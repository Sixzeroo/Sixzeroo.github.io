<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sixzeroo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.liuin.cn/"/>
  <updated>2017-11-24T17:47:38.000Z</updated>
  <id>https://www.liuin.cn/</id>
  
  <author>
    <name>Sixzeroo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 停止追踪文件</title>
    <link href="https://www.liuin.cn/2017/11/10/Git-%E5%81%9C%E6%AD%A2%E8%BF%BD%E8%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>https://www.liuin.cn/2017/11/10/Git-停止追踪文件/</id>
    <published>2017-11-10T14:18:23.000Z</published>
    <updated>2017-11-24T17:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时在使用Git的时候，大多会有这种情况：因为在初始化git的时候没有考虑周全导致有些不需要的文件已经被被追踪，或者想不让在某次提交以后一些文件不被追踪（比如说一些涉及隐私的配置文件）。这里提供一些解决方案</p>
<a id="more"></a>
<h2 id="Git中忽略某些文件"><a href="#Git中忽略某些文件" class="headerlink" title="Git中忽略某些文件"></a>Git中忽略某些文件</h2><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>在一开始git进行初始化的时候我们可以通过修改配置文件.gitignore来指定哪些文件是不需要被追踪的。<br>文件 .gitignore 的格式规范如下：</p>
<ul>
<li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配。(glob 模式是指 shell 所使用的简化了的正则表达式)</li>
<li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li>
</ul>
<h3 id="快捷设置-gitignore"><a href="#快捷设置-gitignore" class="headerlink" title="快捷设置.gitignore"></a>快捷设置.gitignore</h3><p>一般我们在项目中会有超多不需要放到git上面的东西，但是一个一个加入到.gitignore中是非常麻烦的。可以使用gitignore.io提供的API快速创建<br>设置别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.ignore &apos;!gi() &#123; curl -L -s https://www.gitignore.io/api/$@ ; &#125;; gi&apos;</div></pre></td></tr></table></figure></p>
<p>这样以后创建项目的时候只需要结合你的开发环境通过关键进行快捷创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git ignore macOS &gt;&gt; .gitignore</div></pre></td></tr></table></figure></p>
<h2 id="忽略未追踪文件"><a href="#忽略未追踪文件" class="headerlink" title="忽略未追踪文件"></a>忽略未追踪文件</h2><p>在项目开发中可能会有一些新的不想追踪的文件生成，这个时候有两种处理方法：</p>
<ol>
<li>更新.gitignore 文件，这种操作能够使得其他人也忽略对这些文件的追踪</li>
<li>将忽略的文件加到项目文件夹中的 .git/Info/exclude文件中，这种操作只对本地起作用。</li>
</ol>
<h2 id="停止追踪某些文件"><a href="#停止追踪某些文件" class="headerlink" title="停止追踪某些文件"></a>停止追踪某些文件</h2><p>如果文件已经被git追踪，不想在后面的开发中提交这些文件的修改，这里有两个方案：</p>
<ol>
<li>删除文件以后再加到.gitignore 中，这种方案会使得原来那个可能有用的文件就丢失了。</li>
<li>使用<code>git update-index --assume-unchanged [filename]</code> 来忽略某些文件的修改, 这种修改只能再本地起作用，当别人使用这个项目的时候并不会起作用。</li>
<li>使用<code>git rm --cached filename</code>把文件从暂存里移除掉，之后的修改就不会追踪这些文件了。这种方案能够同步到远程，但是别人在拉取你的更新时也要消除对这些文件的追踪。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时在使用Git的时候，大多会有这种情况：因为在初始化git的时候没有考虑周全导致有些不需要的文件已经被被追踪，或者想不让在某次提交以后一些文件不被追踪（比如说一些涉及隐私的配置文件）。这里提供一些解决方案&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Git" scheme="https://www.liuin.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 结构解析</title>
    <link href="https://www.liuin.cn/2017/11/09/Hexo-%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.liuin.cn/2017/11/09/Hexo-结构解析/</id>
    <published>2017-11-09T08:19:57.000Z</published>
    <updated>2017-11-24T17:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>对Hexo 的配置文件夹进行分析。</p>
<a id="more"></a>
<h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><p>在hexo的主目录下有一下文件和文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">├── _config.yml	    #站点配置文件</div><div class="line">├── db.json            #缓存文件</div><div class="line">├── debug.log       #hexo s --debug 产生的日志文件</div><div class="line">├── node_modules    #nodejs 本地包</div><div class="line">├── package.json    #nodejs 本地配置信息</div><div class="line">├── public               #生成的静态文件所在的文件夹</div><div class="line">├── scaffolds          #新生成page的模板</div><div class="line">├── source             #文章所在文件夹</div><div class="line">└── themes           #主题所在文件夹</div><div class="line"></div><div class="line">5 directories, 4 files</div></pre></td></tr></table></figure></p>
<h2 id="主题文件结构"><a href="#主题文件结构" class="headerlink" title="主题文件结构"></a>主题文件结构</h2><p>一个主题的大致结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml   # 主题配置文件</div><div class="line">├── languages     #语言文件夹</div><div class="line">├── layout            # 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式</div><div class="line">├── scripts        # 脚本文件夹</div><div class="line">└── source       # 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。</div></pre></td></tr></table></figure></p>
<h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式。Hexo 默认使用的Swig模板引擎。使用语法和Jinja2、Django模板引擎类似。</p>
<p>文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。</p>
<p>每个模板都默认使用 layout 布局，实际对应的文件是_layout.swig 文件。下面是各个页面所对应的模板的名称：</p>
<table>
<thead>
<tr>
<th>模板</th>
<th>用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>首页</td>
</tr>
<tr>
<td>post</td>
<td>文章</td>
<td>index</td>
</tr>
<tr>
<td>page</td>
<td>分页</td>
<td>index</td>
</tr>
<tr>
<td>archive</td>
<td>归档</td>
<td>index</td>
</tr>
<tr>
<td>category</td>
<td>分类归档</td>
<td>archive</td>
</tr>
<tr>
<td>tag</td>
<td>标签归档</td>
<td>archive</td>
</tr>
</tbody>
</table>
<p>局部模版（Partial）<br>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。</p>
<h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>只需要把 JavaScript 文件放到 scripts 文件夹，在启动时就会自动载入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Hexo 的配置文件夹进行分析。&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="https://www.liuin.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux cd后追加ls</title>
    <link href="https://www.liuin.cn/2017/11/04/Linux-cd%E5%90%8E%E8%BF%BD%E5%8A%A0ls/"/>
    <id>https://www.liuin.cn/2017/11/04/Linux-cd后追加ls/</id>
    <published>2017-11-04T11:15:10.000Z</published>
    <updated>2017-11-23T11:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道你们在使用命令行的时候有没有这种体验：就是每次到一个新的目录下就会追加一个命令ls看看该目录下面有什么。这里提供一个在cd后自动追加ls的解决方案。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>查看了一下经常使用的电脑的输入指令统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1	740  33.3634%    ls</div><div class="line">2	372  16.7719%    cd</div><div class="line">3	273  12.3084%    git</div><div class="line">4	177  7.98016%    vim</div></pre></td></tr></table></figure></p>
<p>发现排在前两位的是ls和cd，而且每次cd以后必然会ls一次。所以何必不把这两个东西合在一起呢。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在环境变量的配置文件（.zshrc或者.bashrc）中加入一小段脚本即可:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">cdl</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> [ -n <span class="variable">$1</span> ] ; <span class="keyword">then</span></div><div class="line">		<span class="built_in">cd</span> <span class="variable">$1</span></div><div class="line">		ls</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">cd</span></div><div class="line">		ls</div><div class="line">	<span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> <span class="built_in">cd</span>=cdl</div></pre></td></tr></table></figure></p>
<p>这段脚本应该都看得懂吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道你们在使用命令行的时候有没有这种体验：就是每次到一个新的目录下就会追加一个命令ls看看该目录下面有什么。这里提供一个在cd后自动追加ls的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Bandit 通关题解</title>
    <link href="https://www.liuin.cn/2017/11/01/Bandit-%E9%80%9A%E5%85%B3%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.liuin.cn/2017/11/01/Bandit-通关题解/</id>
    <published>2017-11-01T14:20:54.000Z</published>
    <updated>2017-11-24T07:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bandit 是一个适合学习Linux指令的游戏吧，规则是每一关利用提供的hostname:port和上一关的password（第一关提供password）通过ssh进入到给定的环境中，按照题目要求拿到指定的Key作为下一关的password。挺好玩的，目前尚未通关，在此挖个坑</p>
<a id="more"></a>
<p>网址：<a href="http://overthewire.org/wargames/bandit/" target="_blank" rel="external">http://overthewire.org/wargames/bandit/</a></p>
<p>通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh bandit0@bandit.labs.overthewire.org -p 2220</div></pre></td></tr></table></figure></p>
<p>开玩吧！</p>
<h2 id="Level-0-→-Level-1"><a href="#Level-0-→-Level-1" class="headerlink" title="Level 0 → Level 1"></a>Level 0 → Level 1</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat readme</div></pre></td></tr></table></figure>
<h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>boJ9jbbUNNfktd78OOpsqOltutMc3MY1</p>
<h2 id="Level-1-→-Level-2"><a href="#Level-1-→-Level-2" class="headerlink" title="Level 1 → Level 2"></a>Level 1 → Level 2</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>在Linux中含有特殊字符的文件名可能和shell的一些语法向冲突，比如这一道题目中的“-”，shell就认定其之后的内容为参数。所以我们要通过./-表示文件来消除这种歧义。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ./-</div></pre></td></tr></table></figure>
<h3 id="Key-1"><a href="#Key-1" class="headerlink" title="Key"></a>Key</h3><p>CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</p>
<h2 id="Level-2-→-Level-3"><a href="#Level-2-→-Level-3" class="headerlink" title="Level 2 → Level 3"></a>Level 2 → Level 3</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>文件名中含有空格可以用反斜杠+空格表示</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat spaces\ in\ this\ filename</div></pre></td></tr></table></figure>
<h3 id="Key-2"><a href="#Key-2" class="headerlink" title="Key"></a>Key</h3><p>UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</p>
<h2 id="Level-3-→-Level-4"><a href="#Level-3-→-Level-4" class="headerlink" title="Level 3 → Level 4"></a>Level 3 → Level 4</h2><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat inhere/.inhere</div></pre></td></tr></table></figure>
<h3 id="Key-3"><a href="#Key-3" class="headerlink" title="Key"></a>Key</h3><p>pIwrPrtPN36QITSp3EQaw936yaFoFgAB</p>
<h2 id="Level-4-→-Level-5"><a href="#Level-4-→-Level-5" class="headerlink" title="Level 4 → Level 5"></a>Level 4 → Level 5</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>通过file 列出文件属性来查看那些文件是ASCII编码（人类可读的）</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cd inhere/</div><div class="line">file ./*</div><div class="line"></div><div class="line">./-file00: data</div><div class="line">./-file01: data</div><div class="line">./-file02: data</div><div class="line">./-file03: data</div><div class="line">./-file04: data</div><div class="line">./-file05: data</div><div class="line">./-file06: data</div><div class="line">./-file07: ASCII text</div><div class="line">./-file08: data</div><div class="line">./-file09: data</div><div class="line"></div><div class="line">cat ./-file07</div></pre></td></tr></table></figure>
<h3 id="Key-4"><a href="#Key-4" class="headerlink" title="Key"></a>Key</h3><p>koReBOKuIDDepwhWk7jZC0RTdopnAYKh</p>
<h2 id="Level-5-→-Level-6"><a href="#Level-5-→-Level-6" class="headerlink" title="Level 5 → Level 6"></a>Level 5 → Level 6</h2><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>和上一题一样通过文件属性进行查找，用到find指令，只需要通过文件大小就能够确定文件位置了</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd inhere/</div><div class="line">find . -size 1033c</div><div class="line"></div><div class="line">./maybehere07/.file2</div><div class="line"></div><div class="line">cat ./maybehere07/.file2</div></pre></td></tr></table></figure>
<h3 id="Key-5"><a href="#Key-5" class="headerlink" title="Key"></a>Key</h3><p>DXjZPULLxYr17uwoI01bNLQbtFemEgo7</p>
<h2 id="Level-6-→-Level-7"><a href="#Level-6-→-Level-7" class="headerlink" title="Level 6 → Level 7"></a>Level 6 → Level 7</h2><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>考察使用find指令查找文件，用到了-user、-group、-size参数。同时使用 /dev/null 来过滤多余的错误信息</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</div><div class="line"></div><div class="line">cat /var/lib/dpkg/info/bandit7.password</div></pre></td></tr></table></figure>
<h3 id="Key-6"><a href="#Key-6" class="headerlink" title="Key"></a>Key</h3><p>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</p>
<h2 id="Level-7-→-Level-8"><a href="#Level-7-→-Level-8" class="headerlink" title="Level 7 → Level 8"></a>Level 7 → Level 8</h2><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>使用grep指令在文件中查找指定字符串</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep millionth ./data.txt</div></pre></td></tr></table></figure>
<h3 id="Key-7"><a href="#Key-7" class="headerlink" title="Key"></a>Key</h3><p>cvX2JJa4CFALtqS87jk27qwqGhBM9plV</p>
<h2 id="Level-8-→-Level-9"><a href="#Level-8-→-Level-9" class="headerlink" title="Level 8 → Level 9"></a>Level 8 → Level 9</h2><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>uniq 指令能够找出文件中相邻的重复的或者不重复的行，key是所给的文件中只出现一次的行，所以要先进行排序，然后再用uniq找出不重复的行</p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort data.txt | uniq -u</div></pre></td></tr></table></figure>
<h3 id="Key-8"><a href="#Key-8" class="headerlink" title="Key"></a>Key</h3><p>UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</p>
<h2 id="Level-9-→-Level-10"><a href="#Level-9-→-Level-10" class="headerlink" title="Level 9 → Level 10"></a>Level 9 → Level 10</h2><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>strings 指令能够找出所给文件中可以打印的字符串，然后再使用grep查找key所在的位置</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings data.txt | grep ==</div></pre></td></tr></table></figure>
<h3 id="Key-9"><a href="#Key-9" class="headerlink" title="Key"></a>Key</h3><p>truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</p>
<h2 id="Level-10-→-Level-11"><a href="#Level-10-→-Level-11" class="headerlink" title="Level 10 → Level 11"></a>Level 10 → Level 11</h2><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>使用base64指令对以base64编码的文本进行解码</p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat data.txt | base64 --decode</div></pre></td></tr></table></figure>
<h3 id="Key-10"><a href="#Key-10" class="headerlink" title="Key"></a>Key</h3><p>IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</p>
<h2 id="Level-11-→-Level-12"><a href="#Level-11-→-Level-12" class="headerlink" title="Level 11 → Level 12"></a>Level 11 → Level 12</h2><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>所给的文本中的字符都被旋转了13个位置，所以我们使用tr命令将这些字符全部旋转回来</p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat data.txt | tr &apos;A-Za-z&apos; &apos;N-ZA-Mn-za-m&apos;</div></pre></td></tr></table></figure>
<h3 id="Key-11"><a href="#Key-11" class="headerlink" title="Key"></a>Key</h3><p>5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</p>
<h2 id="Level-12-→-Level-13"><a href="#Level-12-→-Level-13" class="headerlink" title="Level 12 → Level 13"></a>Level 12 → Level 13</h2><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>所给的文件是一个经过多重压缩以后的二进制文件，首先使用xxd指令将二进制文件进行反转。然后不断使用file指令得到文件信息再调用相应的解压缩指令进行解压缩。其中用到的压缩指令有：gzip、bzip2、tar </p>
<h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">xxd -r data.txt data2</div><div class="line">file data2</div><div class="line">data2: gzip compressed data, was &quot;data2.bin&quot;, from Unix, last modified: Thu Jun 6 13:59:44 2013, max compression</div><div class="line">mv data2 data.gz</div><div class="line">gzip -d data.gz</div><div class="line">file data</div><div class="line">data: bzip2 compressed data, block size = 900k</div><div class="line">bzip2 -d data</div><div class="line">bzip2: Can&apos;t guess original name for data -- using data.out</div><div class="line">file data.out</div><div class="line">data.out: gzip compressed data, was &quot;data4.bin&quot;, from Unix, last modified: Thu Jun 6 13:59:43 2013, max compression</div><div class="line">zcat data.out &gt; data3</div><div class="line">file data3</div><div class="line">data3: POSIX tar archive (GNU)</div><div class="line">tar -xvf data3</div><div class="line">data5.bin</div><div class="line">file data5.bin</div><div class="line">data5.bin: POSIX tar archive (GNU)</div><div class="line">tar -xvf data5.bin</div><div class="line">data6.bin</div><div class="line">file data6.bin</div><div class="line">bzip2 -d data6.bin</div><div class="line">bzip2: Can&apos;t guess original name for data6.bin -- using data6.bin.out</div><div class="line">file data6.bin.out</div><div class="line">data6.bin.out: POSIX tar archive (GNU)</div><div class="line">tar -xvf data6.bin.out</div><div class="line">data8.bin</div><div class="line">file data8.bin</div><div class="line">data8.bin: gzip compressed data, was &quot;data9.bin&quot;, from Unix, last modified: Thu Jun  6 13:59:43 2013, max compression</div><div class="line">zcat data8.bin &gt; data9.bin</div><div class="line">file data9.bin</div><div class="line">data9.bin: ASCII text</div><div class="line">cat data9.bin</div><div class="line">8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</div></pre></td></tr></table></figure>
<h3 id="Key-12"><a href="#Key-12" class="headerlink" title="Key"></a>Key</h3><p>8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</p>
<h2 id="Level-13-→-Level-14"><a href="#Level-13-→-Level-14" class="headerlink" title="Level 13 → Level 14"></a>Level 13 → Level 14</h2><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>给出的是bandit14的私钥，要求使用这个私钥登录bandit14获取Key，这里用到了ssh -i 指令</p>
<h3 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /etc/bandit_pass/bandit14</div><div class="line">ssh -i sshkey.private bandit14@localhost</div><div class="line">cat /etc/bandit_pass/bandit14</div></pre></td></tr></table></figure>
<h3 id="Key-13"><a href="#Key-13" class="headerlink" title="Key"></a>Key</h3><p>4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</p>
<p>#Bandit Level 14 → Level 15</p>
<h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h3><h3 id="Key-14"><a href="#Key-14" class="headerlink" title="Key"></a>Key</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bandit 是一个适合学习Linux指令的游戏吧，规则是每一关利用提供的hostname:port和上一关的password（第一关提供password）通过ssh进入到给定的环境中，按照题目要求拿到指定的Key作为下一关的password。挺好玩的，目前尚未通关，在此挖个坑&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux中 ps 配合 kill 的操作</title>
    <link href="https://www.liuin.cn/2017/10/25/Linux%E4%B8%AD-ps-%E9%85%8D%E5%90%88-kill-%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.liuin.cn/2017/10/25/Linux中-ps-配合-kill-的操作/</id>
    <published>2017-10-25T05:03:26.000Z</published>
    <updated>2017-11-15T05:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候我们想要关掉一些程序的一系列进程，又不想一个一个通过ps找到pid，再一个一个kill这些进程，这个时候用ps配合kill就是最好的选择了。</p>
<a id="more"></a>
<h2 id="使用到的命令"><a href="#使用到的命令" class="headerlink" title="使用到的命令"></a>使用到的命令</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>ps(process status)命令用来列出系统中当前运行的那些进程。常常使用的形式有：</p>
<ul>
<li>ps aux 列出目前所有的正在内存当中的程序</li>
<li>ps -ef 显示所有进程信息，连同命令行<br><a href="http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html" target="_blank" rel="external">更多参考</a>]</li>
</ul>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>kill 命令能够发送指定的信号到相应进程。</p>
<p>命令参数如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-l</td>
<td>信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</td>
</tr>
<tr>
<td style="text-align:center">-a</td>
<td>当处理当前进程时，不限制命令名和进程号的对应关系</td>
</tr>
<tr>
<td style="text-align:center">-p</td>
<td>指定kill 命令只打印相关进程的进程号，而不发送任何信号</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td>指定发送信号</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td>指定用户</td>
</tr>
</tbody>
</table>
<p>使用参数-s 指定发送信号。如果要无条件终止进程，就要发送第九种信号SIGKILL。以下是常用的信号：</p>
<table>
<thead>
<tr>
<th>信号</th>
<th>表示</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>HUP</td>
<td>1</td>
<td>终端断线</td>
</tr>
<tr>
<td>INT</td>
<td>2</td>
<td>中断（同 Ctrl + C）</td>
</tr>
<tr>
<td>QUIT</td>
<td>3</td>
<td>退出（同 Ctrl + \）</td>
</tr>
<tr>
<td>TERM</td>
<td>15</td>
<td>终止</td>
</tr>
<tr>
<td>KILL</td>
<td>9</td>
<td>强制终止</td>
</tr>
<tr>
<td>CONT</td>
<td>18</td>
<td>继续（与STOP相反， fg/bg命令）</td>
</tr>
<tr>
<td>STOP</td>
<td>19</td>
<td>暂停（同 Ctrl + Z）</td>
</tr>
</tbody>
</table>
<p><a href="http://www.cnblogs.com/peida/archive/2012/12/20/2825837.html" target="_blank" rel="external">更多参考</a></p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>grep 是一种强大的文本搜索工具。grep 也是一个管道命令，接受standard output 作为查找的文本。不作为管道命令的时候后面接文件名作为参数。</p>
<h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h3><p>pgrep程序检查在系统的中活动进程，报告进程属性匹配命令行上指定条件的进程的ID。相当于命令 ps aux | grep XXX<br><a href="http://www.ha97.com/2523.html" target="_blank" rel="external">更多参考</a></p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep chrome | grep -v grep | cut -c 10-14 | xargs kill -s 9</div></pre></td></tr></table></figure>
<ul>
<li>” grep chrome “输出所有含有关键字“chrome”的进程信息</li>
<li>” grep -v grep “ 除去含有关键字”grep“的进程信息，因为grep会产生一个进程里面含有 chrome 关键字</li>
<li>” cut -c 10-14 “ 截取输入行的第9个字符到第15个字符，而这正好是进程号PID</li>
<li>” xargs kill -s 9 “ 终止相关进程</li>
</ul>
<h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep chrome | awk &apos;&#123;print $2&#125;&apos; | xargs kill -9</div></pre></td></tr></table></figure>
<ul>
<li>“awk ‘awk{ print $2 }’ “使用awk 代替cut ，不用一个一个数PID在什么位置</li>
</ul>
<h3 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgrep chrome | xargs kill -s 9</div></pre></td></tr></table></figure>
<ul>
<li>” pgrep chrome “列出含有关键字”chrome“的相关进程</li>
<li>” xargs kill -s 9 “ 终止相关进程</li>
</ul>
<h3 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall -9 chrome</div></pre></td></tr></table></figure>
<ul>
<li>终止进程名为chrome的进程，注意要给进程的全名</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候我们想要关掉一些程序的一系列进程，又不想一个一个通过ps找到pid，再一个一个kill这些进程，这个时候用ps配合kill就是最好的选择了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux系统" scheme="https://www.liuin.cn/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>花莲之旅</title>
    <link href="https://www.liuin.cn/2017/10/20/%E8%8A%B1%E8%8E%B2%E4%B9%8B%E6%97%85/"/>
    <id>https://www.liuin.cn/2017/10/20/花莲之旅/</id>
    <published>2017-10-20T03:53:53.000Z</published>
    <updated>2017-11-01T04:09:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离从花莲回来差不多有一个星期了，心态也逐渐调整过来了，现在也能够静下心来记录这一路的所见所想。花莲的确是一座非常美的城市，一座有故事的城市。<br><a id="more"></a></p>
<h2 id="行程规划"><a href="#行程规划" class="headerlink" title="行程规划"></a>行程规划</h2><p>我们行程是安排在台湾这边的联假（就是台湾这边的国庆），所以火车票和民宿都非常紧张。我们没有买到火车坐票，最后只能够采用买客运和铁路的联票到花莲（坐客运到罗东，再坐区间车到花莲）。车程还算比较长，总共四天假可能我们花在路上的时间就占了大半天吧。到花莲基本上是订民宿，这边的民宿做得口碑都比较好，大部分民宿都是来了以后都会推荐给朋友来的那种（事实证明我们住的民宿也是）。<br>我们大致的行程安排是第一天在花东纵谷线上玩鲤鱼潭和复兴糖厂，第二天清水断崖-太鲁阁-七星潭，第三天滑翔-几米公园，第四天兰阳博物馆+礁溪温泉公园。因为花莲这一带的景点都是分布在比较狭长的区域内，所以最好的交通工具就是包车出游。我们也是吃了这个亏，第一天下午在交通上面花了非常多的时间导致只玩了一个景点。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG13.jpeg" alt="enter description here" title="花连狭长的景点分布"></p>
<h2 id="鲤鱼潭"><a href="#鲤鱼潭" class="headerlink" title="鲤鱼潭"></a>鲤鱼潭</h2><p>从花莲火车站到鲤鱼潭大概二十多分钟的车程，我们去的时候天下着小雨，计程车行驶在盘旋的山路上别有一番意境。<br>“鲤鱼潭”的得名说法有二：一是因为侧边山岳形似鲤鱼，故山与湖同齐名为鲤鱼，有“鲤鱼山上有鲤鱼，鲤鱼潭里水中游。”俚语的称呼。另一种说法源于最早活动于此处的台湾原住民太鲁阁族，因为登至山顶往下看，潭的形状就像是一只刚捕获的鲤鱼在跳跃，所以以此名之。<br>鲤鱼潭周围的风光的确还不错，挺适合骑自行车慢慢玩的，但是天杀的我们去的那天下雨，没办法我们只能够等中间雨停的时候租条脚踏船玩完。<br>鲤鱼潭风光还是不错的，同行的一直在华北平原的小伙伴对这样的山还是蛮有好感的。但是对于我这种在雪峰山脉长大的孩子来说我还是觉得没有什么特色，不怎么推荐。<br>后面因为我们没有赶上公交车，多等了一个小时，到达复兴糖厂的时候差不多商家都打烊了，唯一一个能够玩的文物馆也已经关门了。不过在复兴糖厂吃到感觉有生以来最好吃的烤肠，烤肠里面有些许的酒味，还是挺满足的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG10.jpeg" alt="enter description here" title="鲤鱼潭"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG9.jpeg" alt="enter description here" title="鲤鱼潭潭面"></p>
<h2 id="超赞的民宿"><a href="#超赞的民宿" class="headerlink" title="超赞的民宿"></a>超赞的民宿</h2><p>在复兴糖厂完了一小会，我们就急忙赶到到复兴车站坐区间车去民宿了。其实之前对这个民宿有很大的期待的，因为介绍里说地址在海边而且有一间房是海景房。<br>来到民宿以后老板张阿姨很热情地接待我们，民宿老板之前是幼儿园的园长现在退休了。她给我们讲了他的民宿名字——花莲你来 的来历还有她同学为她的民宿写的歌。这个民宿其实是张阿姨为了能让她父亲更好地看海而建的，为了方便她父亲能够去顶楼看海还特别修建了电梯（整个房子只有7楼）。<br>进到房间以后感觉真的是超赞，装修非常精致，特别是阳台的装扮。整个阳台是面朝大海的，面积比较大，铺了草坪种了树，布置得很好。特别是阳台旁边的透明玻璃栏杆，刚看的时候给人的视觉冲击非常大。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG7.jpeg" alt="enter description here" title="从民宿看到的海边"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG8.jpeg" alt="enter description here" title="为民宿写的歌"></p>
<h2 id="清水断崖-太鲁阁-七星潭"><a href="#清水断崖-太鲁阁-七星潭" class="headerlink" title="清水断崖-太鲁阁-七星潭"></a>清水断崖-太鲁阁-七星潭</h2><p>第二天我们是包车前往太鲁阁那一片景点的，司机是一个叫阿靖的小伙，一路为我们讲解各个景点以及他们背后的故事。<br>清水断崖是来花莲必去的景点，台湾八景之一。一边是几近垂直、陡峭壁立的山壁，一遍是蓝蓝的大海，景色不要太美。不说了，上图吧。。。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG6.jpeg" alt="enter description here" title="清水断崖"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG5.jpeg" alt="enter description here" title="石头和狗"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG3.jpeg" alt="enter description here" title="太鲁阁"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG4.jpeg" alt="enter description here" title="七星潭的海-1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG2.jpeg" alt="enter description here" title="七星潭的海-2"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_%E6%9C%80%E5%90%8E%E6%9D%A5%E4%B8%80%E5%BC%A0%E8%83%8C%E5%BD%B1.jpeg" alt="enter description here" title="最后来一张背影"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离从花莲回来差不多有一个星期了，心态也逐渐调整过来了，现在也能够静下心来记录这一路的所见所想。花莲的确是一座非常美的城市，一座有故事的城市。&lt;br&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>十分九份一日游</title>
    <link href="https://www.liuin.cn/2017/09/25/%E5%8D%81%E5%88%86%E4%B9%9D%E4%BB%BD%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/09/25/十分九份一日游/</id>
    <published>2017-09-25T07:16:50.000Z</published>
    <updated>2017-09-25T07:17:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>还记得《那些年，我们一起追的女孩》里面柯景腾和沈佳宜一起走铁道，放天灯的场景吗？那里面的场景就是在十分附近拍摄的，第二周我选择来这里浪，顺便拜访旁边传说《千与千寻》的取景地——九份</p>
<a id="more"></a>
<h2 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h2><p>我们大致的行程是从台北车站随便坐一辆区间车能够到瑞芳，然后转平溪线到十分。在十分玩完十分瀑布和十分老街之后，坐平溪线回到瑞芳，然后再坐公交车去九份。<br>这也是我第一次体验台湾的火车，感受到这边的铁路跟大陆那边还是一些不同的： 这边有一种区间车，运营就像国内的地铁（车内长得也像地铁）。买票的时候只要选择起点站和终点站，然后进站以后可以随便上一辆区间车到达目的地。普通车的站票也是这样。<br>顺便吐槽一句：铁路订票系统做得太烂了，页面UI差就算了，还查不了余票，必须要把所有的信息输进去验证以后才能够得到订票失败的提示。。。</p>
<p>车内长得像地铁的区间车：</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0.jpg" alt="enter description here"></p>
<h2 id="十分老街"><a href="#十分老街" class="headerlink" title="十分老街"></a>十分老街</h2><p>从十分车站出来以后就是十分老街了，整个十分老街是在火车铁轨两旁，算是有一点特色。两边的店铺主要经营的是小吃、纪念品还有天灯。旁边有个静安吊桥，也有许多人在那拍照。铁轨上许多人在放天灯，不过大多数都是韩国人日本人。</p>
<p>十分车站</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-3.jpg" alt="enter description here"></p>
<p>放天灯的游客</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-1.jpg" alt="enter description here"></p>
<h2 id="十分瀑布"><a href="#十分瀑布" class="headerlink" title="十分瀑布"></a>十分瀑布</h2><p>十分老街不是很长，如果不吃什么东西的话，一会就逛完了。走到老街的尽头就可以看到有很多租电动车的店铺，主要提供给去十分瀑布的游客。价格不算贵，一般是一个小时一百新台币。<br>我们两人小分队也租了一辆小电动，说实话骑着电动在山间穿梭还是蛮爽的，就是距离能够再长一点就好了。从老街到瀑布只用了十分钟左右。<br>十分瀑布景色还行，旁边有一道彩虹。</p>
<p>十分瀑布</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-2.jpg" alt="enter description here"></p>
<h2 id="九份"><a href="#九份" class="headerlink" title="九份"></a>九份</h2><p>九份是一座坐落在台湾东北部的小城，三面环山，一面临海。整个小镇座落于山坡地上，也因此形成了独特的山坡和阶梯式建筑景观。早期因为开采金矿而闻名，后面慢慢没落。1990年代后，因电影《悲情城市》于九份取景，九份的独特旧式建筑、坡地及风情透过此片吸引国内外的注目，使得来九份的人越来越多。</p>
<p>依山而建的九份小城</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-4.jpg" alt="enter description here"></p>
<p>阿妹茶楼</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-5.jpg" alt="enter description here"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得《那些年，我们一起追的女孩》里面柯景腾和沈佳宜一起走铁道，放天灯的场景吗？那里面的场景就是在十分附近拍摄的，第二周我选择来这里浪，顺便拜访旁边传说《千与千寻》的取景地——九份&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>打卡台北101</title>
    <link href="https://www.liuin.cn/2017/09/17/%E6%89%93%E5%8D%A1%E5%8F%B0%E5%8C%97101/"/>
    <id>https://www.liuin.cn/2017/09/17/打卡台北101/</id>
    <published>2017-09-17T06:55:38.000Z</published>
    <updated>2017-09-17T06:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>台北101是台湾的第一高楼，也曾经有五年多的时间是世界第一高楼，旁边紧邻着台北市政府。现在是世界第十高楼（七年时间从第一变成第十），也是很多有名的跨国公司（比如说Google）的在台湾地区的办公地。</p>
<a id="more"></a>
<h2 id="交通与门票"><a href="#交通与门票" class="headerlink" title="交通与门票"></a>交通与门票</h2><p>台北101大楼位于台北市信义区，紧邻台北市政府大楼，是台北市的新地标。离101比较近的捷运站有市政府站和101站，坐捷运到这两个捷运站去101都可以。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_1505628281374.jpg" alt="enter description here"></p>
<p>我的话因为是游玩完上一个景点才去的，远处看起来比较近，所以我和我的小伙伴就选择了脚踏车作为交通工具。因为101实在是太高了，看着不远，但是实际骑起来还真是有点距离的。</p>
<p>到达101脚下</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_QQ20170917-0.jpg" alt="到达101脚下"></p>
<p>上观景台参观的门票在5F卖，有两种：一种是全票600NTD；另外一种是优惠票540NTD，学生还有台湾地区的军警能够购买。我们买的是优惠票，使用支付宝支付，差不多花了120人民币。</p>
<h2 id="夕阳"><a href="#夕阳" class="headerlink" title="夕阳"></a>夕阳</h2><p>上面供游客玩的地方就三层：88F、89F和91F。88F展示的是全球第二大的开放游客观赏的巨型阻尼器；89F是一个环形的带玻璃的观景平台，还想着能够有那种伸出空中全是玻璃的刺激的地方，结果没有；91F是一个露天的观景平台，只不过只开放一小部分区域，还有特别高的栅栏。比较欣慰的是，栅栏的间隙不是很小，手可以伸出去拍照。</p>
<p>我们上去的时间是下午五点到五点半的场次，刚好是黄昏的时候，从观景平台俯瞰下面，有种玩天际线（模拟城市类的游戏）的既视感。感觉特别爽。</p>
<p>从101俯瞰台北</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG11.jpeg" alt="从101俯瞰台北"></p>
<p>101上的黄昏</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG12.jpeg" alt="101上的黄昏"></p>
<h2 id="夜景"><a href="#夜景" class="headerlink" title="夜景"></a>夜景</h2><p>本着不浪费这120门票的原则，我们硬是在上面待到了晚上。其实上面还是有很多东西可以逛的，纪念品商店有很多东西可以看看；有邮箱可以寄明信片。随便逛逛天就黑了。</p>
<p>晚上在101看到的又是另一番景色了，很赞。</p>
<p>俯瞰夜景（手机拍出来的效果实在是太差了，还是用同学的图吧）</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG2.jpeg" alt="enter description here"></p>
<h2 id="象山上看到的101"><a href="#象山上看到的101" class="headerlink" title="象山上看到的101"></a>象山上看到的101</h2><p>下来以后差不多是8点，感觉还早，就跑到旁边的象山区浪了，因为那里可以看到晚上的101外景。一开始一位晚上没什么人，结果上登山道的时候有点吃惊，原来这么多人都在晚上爬象山。</p>
<p>其实象山蛮大的，我们没有爬到山顶，只爬到了半山腰的一个摄影平台（一天奔波实在是有点累了）。</p>
<p>101外景（同学的图）</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG9.jpeg" alt="101外景"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;台北101是台湾的第一高楼，也曾经有五年多的时间是世界第一高楼，旁边紧邻着台北市政府。现在是世界第十高楼（七年时间从第一变成第十），也是很多有名的跨国公司（比如说Google）的在台湾地区的办公地。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>淡水 一日游</title>
    <link href="https://www.liuin.cn/2017/09/11/%E6%B7%A1%E6%B0%B4-%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/09/11/淡水-一日游/</id>
    <published>2017-09-11T12:03:46.000Z</published>
    <updated>2017-09-17T05:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>淡水是台湾北部比较有名的一个景点，被称为<a href="https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3%E5%85%AB%E6%99%AF" target="_blank" rel="external">台湾八景</a>。在历史上曾经是台湾第一大港，也是西方文明在台湾北部散播的起点。</p>
<a id="more"></a>
<h2 id="淡水老街"><a href="#淡水老街" class="headerlink" title="淡水老街"></a>淡水老街</h2><p>从淡水捷运站出来以后走不久就是淡水老街了，这里集美食、小吃、老街为一身，近年来更因不少古董店及民艺品店进驻，营造出更浓郁的民俗色彩与怀旧风味。邻近淡水捷运站，应该是游客到这里来必游的景点，人比较多。</p>
<p>在淡水老街上尝了一些小吃：鐵蛋、酸梅湯，鐵蛋很硬，酸梅汤很正宗</p>
<p>淡水街头</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0.jpg" alt=""></p>
<h2 id="阿给"><a href="#阿给" class="headerlink" title="阿给"></a>阿给</h2><p>阿给可以说是淡水最有名的小吃了。为什么叫“阿给”呢？其实它是日本语“油炸豆腐皮”的音译简称。阿给的做法是将油豆腐的中间挖空，然后填充炒过的冬粉（有些店家使用的是没有炒过的冬粉）、浸泡过卤汁，以鱼浆封口，加以蒸熟，食用前淋上甜辣酱或其他特殊酱汁。</p>
<p>我们逛到阿给的小吃店的时候刚好是中午午餐的时候，还是蛮好吃的，唯一不足的地方就是中午的气温有点高吃起来非常热。</p>
<p>网上的阿给图片</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_1024px-Agei.JPG" alt=""></p>
<h2 id="淡江中学"><a href="#淡江中学" class="headerlink" title="淡江中学"></a>淡江中学</h2><p>淡水中学中学是周杰伦还有前台湾地区领导人李登辉的母校，也因为周杰伦的《不能说的秘密》，而被众人所知（怪不得同行的女生听到淡水中学这么兴奋）。这所学校全名私立淡江高级中学，是台湾省比较著名的中学，已经有近100年的历史了。台湾这边公立的中学叫国民高中（国中），旁边的淡水国中就是的。门口贴着不允许参观的标志，但是可能是我们来的时候是周末，门卫放我们进去了。进去以后看到台湾这边的高三学生也补课（按理说他们读大学的压力比大陆小很多），看来高三逃脱不了补课的命运。</p>
<p>淡水中学历史比较久，所以里面的建筑还是很有特色的。</p>
<p>淡江高级中学埔顶钟声</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-1.jpg" alt=""></p>
<h2 id="真理大学"><a href="#真理大学" class="headerlink" title="真理大学"></a>真理大学</h2><p>真理大学为北部台湾基督长老教会所创办之大学，是一所历史渊远的私立大学。以“追求真理、爱与服务”为校务发展宗旨。源自1872年3月9日加拿大基督长老教会宣教师马偕登陆淡水，选定现址（今真理大学淡水校区）兴建校舍以作传道、教育及医疗之用。</p>
<p>校园里面游客比较多，建筑比较有特色的就是旁边的大礼拜堂。校园风景非常优美，建筑物主要以红色为主。刚进去的时候能够看到许多的鸽子，它们不怎么怕游客，可能是习惯了吧。也有很多游客给一些事物给他们吃。</p>
<p>真理大学大门</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-2.jpg" alt=""></p>
<h2 id="红毛城"><a href="#红毛城" class="headerlink" title="红毛城"></a>红毛城</h2><p>红毛城，西班牙人1692年建造，荷兰人打败西班牙人占领此城。为啥叫红毛城呢，以前咱管俄国人叫“老毛子、白毛”，称荷兰人为“红毛”，因此得名。里面的东西感觉也没什么特点就是一些那个时候办公用的东西。</p>
<p>不过这里要说的是台湾在景点上面对学生的优惠力度还是很大的，一般的景点只要你凭学生证就不要门票，在淡水两个景点要收费，小白宫和这个红毛城，一个地方80新台币，想想赚了160新台币心里还是美滋滋的。</p>
<p>红毛城照片</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-3.jpg" alt=""></p>
<h2 id="渔人码头-情人桥"><a href="#渔人码头-情人桥" class="headerlink" title="渔人码头/情人桥"></a>渔人码头/情人桥</h2><p>淡水的最后一个景点就是渔人码头了，位于淡水河出海口右岸。《命中注定我爱你》陈欣怡和纪存希生日那天，纪存希陪陈欣怡买船回姜母岛吃姜军包，纪念品号停靠那个码头哦，就是渔人码头，后面就是情人桥。</p>
<p>传说情人桥暗藏“玄机”，恋人来此，如果没有走过情人桥，可能很快就会分手，如果只走过了奇数，而不是偶数，也会分手。由于那天太阳比较大，所以情人桥也没有待太久，不然真的会被热化的。</p>
<p>情人桥（同学的照片）：</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-4.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>淡水还是一个景色优美，有好吃的好玩的，能看海的好去处。趁手里还在台湾而且有学生证，赶紧多玩几个景点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;淡水是台湾北部比较有名的一个景点，被称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3%E5%85%AB%E6%99%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;台湾八景&lt;/a&gt;。在历史上曾经是台湾第一大港，也是西方文明在台湾北部散播的起点。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台湾，我来了</title>
    <link href="https://www.liuin.cn/2017/09/07/%E5%8F%B0%E6%B9%BE%EF%BC%8C%E6%88%91%E6%9D%A5%E4%BA%86/"/>
    <id>https://www.liuin.cn/2017/09/07/台湾，我来了/</id>
    <published>2017-09-07T08:46:33.000Z</published>
    <updated>2017-09-07T08:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>期待了许久，终于等到了去台湾的日子。9.5从上海出发，乘坐吉祥航空飞台北。正式开始我131天的台湾交换之旅。</p>
<a id="more"></a>
<h2 id="台湾初感受"><a href="#台湾初感受" class="headerlink" title="台湾初感受"></a>台湾初感受</h2><p>飞机刚降落，开了数据流量以后马上用Google 随便搜了点东西，直连谷歌，哈哈，肉身翻墙就是爽。<br>抵达桃园机场后，找到了台科大接机的同学把我们送到了台科大。然后我们就去找我们租房子的地方了，我们租房子的地方位于新北市，但是学校是在台北市，中间隔着一条河，坐公交应该是20分钟左右。看来在宣区从寝室到教室5分钟搞定的事情成了一种奢望。<br>在找租房子的地址的时候，感觉台湾各种小巷子太多了、红路灯太多了、机车太多了、便利店太多了。</p>
<p>从地图可以出道路基本上都是这种小巷子:</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_7_1504772211813.jpg" alt="从地图可以出道路基本上都是这种小巷子"></p>
<p>之前一直听说台湾这边的人非常热情，来到这里以后真的是深刻体会到了。在路上问路他们一定会说得非常详细，居委会的阿姨看到我们来了以后跟我们说了一大堆东西，这种感觉真好。</p>
<p>大陆和台湾的一些用词习惯是不一样的，比如我们的网络他们叫网路，计算机专业他们一般叫资讯工程。有几次去便利店买东西，店员听了我说的东西以后都是一脸懵逼，要我详细解释这个东西是用来干什么的，他们才清楚。看来还得慢慢适应。</p>
<h2 id="机车"><a href="#机车" class="headerlink" title="机车"></a>机车</h2><p>台湾这边的机车就是一般大陆说的摩托车，说真的这边的机车真的不要太多。过红绿灯的时候，机车引擎的声音那叫一个大呀，特别是在刚刚转绿灯的时候堪比赛车比赛开始的场面。</p>
<p>台湾的机车为什么这么多呢？原因应该是多方面的，人口多、道路窄是一个方面的原因。在台北，骑机车的大多是在市区周围上班族（就像我住的地方一样），把机车作为一种通勤工具，相比地铁公交的拥挤，开车要找车位开销大，骑机车成为了这些人的首选。当然还有一个更重要的原因就是台湾这边不禁摩，如果北上广深也不禁摩，可能机车的规模比台北还要多。</p>
<p>台湾街头的机车大军:</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_7_1504773955984.jpg" alt="台湾街头的机车大军"></p>
<h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><p>接下来希望自己能够好好把握好台湾交换的时间，博客中的台湾游记系列也要定时进行更新。加油吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;期待了许久，终于等到了去台湾的日子。9.5从上海出发，乘坐吉祥航空飞台北。正式开始我131天的台湾交换之旅。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm 使用技巧汇总</title>
    <link href="https://www.liuin.cn/2017/09/03/PyCharm-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/"/>
    <id>https://www.liuin.cn/2017/09/03/PyCharm-使用技巧汇总/</id>
    <published>2017-09-03T08:19:38.000Z</published>
    <updated>2017-09-03T08:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说的好，磨刀不误砍柴工，写代码也一样，在工具上面花的时间是非常值得的。对于Python语言的编程而言，Pycharm是一个非常好用的集成开发环境，虽然Vim能够做到轻巧，但是功能始终是做不到IDE那么强大，所以对于Python代码的编程后期还是主要以Pycharm为工具，今天在这里收集一些Pycharm的使用技巧，有一些来源于网上，有一些也来源本身Pycharm的教程。（以下技巧适用于macOS系统）</p>
<a id="more"></a>
<h2 id="教程中的快捷键"><a href="#教程中的快捷键" class="headerlink" title="教程中的快捷键"></a>教程中的快捷键</h2><ul>
<li>“⇧⌘O ”能够快速查找相关文件和类</li>
<li>Command+B 跳转到原码，看到里面的类和方法</li>
<li>Command+Option+L  一键实现PEP8规范</li>
<li>Command + Shift + O  查找文件、类和方法</li>
<li>Command + Option + Shift + [     光标放在函数的前面快速选中这个函数中的所有内容</li>
<li>Command + J   快速插入常用代码</li>
<li>Command + Shift + -    展开收缩你的代码块</li>
<li>Command+P  显示当前函数需要的参数</li>
<li>F1     可以调出光标处函数文档</li>
</ul>
<h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ul>
<li>能够在下面的状态栏中看到当前使用换行符情况（是”\r\n”  “\n”  还是”\r”），多选文件在File | Line Separators 中选择适当的换行符就可以切换了</li>
<li>在Preference -&gt; Editor -&gt; File and Code Template 中设置代码模板</li>
</ul>
<h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><p>鼠标放到当前导航处的文件名，然后右键 Split Vertically 或者 Split Horizontally 就可以啦</p>
<h2 id="添加Vim插件"><a href="#添加Vim插件" class="headerlink" title="添加Vim插件"></a>添加Vim插件</h2><p>在偏好设置里面Plugins中添加新的Plugin插件，搜索IdeaVIm添加就可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;俗话说的好，磨刀不误砍柴工，写代码也一样，在工具上面花的时间是非常值得的。对于Python语言的编程而言，Pycharm是一个非常好用的集成开发环境，虽然Vim能够做到轻巧，但是功能始终是做不到IDE那么强大，所以对于Python代码的编程后期还是主要以Pycharm为工具，今天在这里收集一些Pycharm的使用技巧，有一些来源于网上，有一些也来源本身Pycharm的教程。（以下技巧适用于macOS系统）&lt;/p&gt;
    
    </summary>
    
      <category term="软件使用" scheme="https://www.liuin.cn/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="工具" scheme="https://www.liuin.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SQLAchemy 学习(2)</title>
    <link href="https://www.liuin.cn/2017/08/30/SQLAchemy-%E5%AD%A6%E4%B9%A0-2/"/>
    <id>https://www.liuin.cn/2017/08/30/SQLAchemy-学习-2/</id>
    <published>2017-08-30T08:12:19.000Z</published>
    <updated>2017-09-03T08:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一篇SQLAlchemy学习<br><a id="more"></a></p>
<h2 id="relationship"><a href="#relationship" class="headerlink" title="relationship"></a>relationship</h2><p>relationship函数是sqlalchemy对关系之间提供的一种便利的调用方式, backref参数则对关系提供反向引用的声明<br>通过relationship我们可以轻松在实现嵌套将一个实例的属性转换成另一个类的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addresses_from_user</span><span class="params">(user_name)</span>:</span></div><div class="line">    user = session.query(User).filter_by(name=user_name).first()</div><div class="line">    <span class="keyword">return</span> user.addresses   <span class="comment">#返回的是Adresses的一个对象</span></div></pre></td></tr></table></figure></p>
<p>back_populates参数和backref参数功能类似，只是前者提供单向的关系引用，且必须成对存在，但是完成的功能和backref是一样的</p>
<h2 id="定义1-1-1-n-m-n-关系"><a href="#定义1-1-1-n-m-n-关系" class="headerlink" title="定义1:1 1:n m:n 关系"></a>定义1:1 1:n m:n 关系</h2><h3 id="1-n"><a href="#1-n" class="headerlink" title="1:n"></a>1:n</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(<span class="string">"Child"</span>, back_populates=<span class="string">"parent"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</div><div class="line">    parent = relationship(<span class="string">"Parent"</span>, back_populates=<span class="string">"children"</span>)</div><div class="line">    <span class="comment"># 子表类中附加一个 relationship() 方法</span></div><div class="line">    <span class="comment"># 并且在(父)子表类的 relationship() 方法中使用 relationship.back_populates 参数</span></div></pre></td></tr></table></figure>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1:1"></a>1:1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    child = relationship(<span class="string">"Child"</span>, uselist=<span class="keyword">False</span>, back_populates=<span class="string">"parent"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</div><div class="line">    parent = relationship(<span class="string">"Parent"</span>, back_populates=<span class="string">"child"</span>)</div></pre></td></tr></table></figure>
<p>和1:n的不同在于，在父表上用uselist参数进行了限定</p>
<h3 id="m-n"><a href="#m-n" class="headerlink" title="m:n"></a>m:n</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">association_table = Table(<span class="string">'association'</span>, Base.metadata,</div><div class="line">    Column(<span class="string">'left_id'</span>, Integer, ForeignKey(<span class="string">'left.id'</span>)),</div><div class="line">    Column(<span class="string">'right_id'</span>, Integer, ForeignKey(<span class="string">'right.id'</span>))</div><div class="line">)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'left'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(</div><div class="line">        <span class="string">"Child"</span>,</div><div class="line">        secondary=association_table,</div><div class="line">        back_populates=<span class="string">"parents"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'right'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parents = relationship(</div><div class="line">        <span class="string">"Parent"</span>,</div><div class="line">        secondary=association_table,</div><div class="line">        back_populates=<span class="string">"children"</span>)</div></pre></td></tr></table></figure>
<h2 id="SQLAlchemy-数据表结构改变（数据迁移）方法"><a href="#SQLAlchemy-数据表结构改变（数据迁移）方法" class="headerlink" title="SQLAlchemy 数据表结构改变（数据迁移）方法"></a>SQLAlchemy 数据表结构改变（数据迁移）方法</h2><p>在使用Django的ORM的时候我们可以轻易地通过<strong>python manage.py makemigration </strong> 和 <strong> python manage.py migrate </strong>实现数据表结构的改变<br>但是在SQLAlchemy这个工具中似乎不支持数据迁移，所以在这里使用到一个另外一个库：SQLAlchemy-migrate<br>使用这个库我们可以分别写两个文件表示创建数据库的时候和修改数据库的时候：</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Base</div><div class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> engine</div><div class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</div><div class="line"></div><div class="line">Base.metadata.create_all(bind=engine)</div><div class="line"></div><div class="line"><span class="comment"># 创建表结构</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> (os.path.exists(sqlachemy_migrate_repo)):</div><div class="line">    api.create(sqlachemy_migrate_repo,<span class="string">'database repository'</span>)</div><div class="line">    api.version_control(postgresql_url,sqlachemy_migrate_repo)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    api.version_control(postgresql_url,sqlachemy_migrate_repo)</div></pre></td></tr></table></figure>
<h3 id="修改数据表的结构"><a href="#修改数据表的结构" class="headerlink" title="修改数据表的结构"></a>修改数据表的结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> imp</div><div class="line"></div><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Base</div><div class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> engine</div><div class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</div><div class="line"></div><div class="line">Base.metadata.create_all(bind=engine)</div><div class="line"></div><div class="line"><span class="comment"># 迁移表结构</span></div><div class="line">migration = sqlachemy_migrate_repo + <span class="string">'/versions/%03d_migration.py'</span> % (api.db_version(postgresql_url, sqlachemy_migrate_repo) + <span class="number">1</span>)</div><div class="line">tmp_module = imp.new_module(<span class="string">'old_model'</span>)</div><div class="line">old_model = api.create_model(postgresql_url, sqlachemy_migrate_repo)</div><div class="line">exec(old_model, tmp_module.__dict__)</div><div class="line">script = api.make_update_script_for_model(postgresql_url, sqlachemy_migrate_repo, tmp_module.meta, Base.metadata)</div><div class="line">open(migration, <span class="string">'wt'</span>).write(script)</div><div class="line">api.upgrade(postgresql_url, sqlachemy_migrate_repo)</div><div class="line"></div><div class="line">print(<span class="string">'New migration saved as '</span> + migration)</div><div class="line">print(<span class="string">'Current database version: '</span> + str(api.db_version(postgresql_url, sqlachemy_migrate_repo)))</div></pre></td></tr></table></figure>
<p>但是当修改的东西过多的时候，这个时候会报错</p>
<h2 id="Django-中get-or-create-方法的实现"><a href="#Django-中get-or-create-方法的实现" class="headerlink" title="Django 中get_or_create 方法的实现"></a>Django 中get_or_create 方法的实现</h2><p>和上面一样在SQLAlchemy中也不存在非常方便的get_or_create的方法，用的比较多的时候，应该有必要重新写一下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_or_create</span><span class="params">(session, model, defaults=None, **kwargs)</span>:</span></div><div class="line">    instance = session.query(model).filter_by(**kwargs).first()</div><div class="line">    <span class="keyword">if</span> instance:</div><div class="line">        <span class="keyword">return</span> instance, <span class="keyword">False</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        params = dict((k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.iteritems() <span class="keyword">if</span> <span class="keyword">not</span> isinstance(v, ClauseElement))</div><div class="line">        params.update(defaults <span class="keyword">or</span> &#123;&#125;)</div><div class="line">        instance = model(**params)</div><div class="line">        session.add(instance)</div><div class="line">        <span class="keyword">return</span> instance, <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://codeday.me/bug/20170612/24948.html" target="_blank" rel="external">https://codeday.me/bug/20170612/24948.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上一篇SQLAlchemy学习&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.liuin.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.liuin.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQLAchemy 学习(1)</title>
    <link href="https://www.liuin.cn/2017/08/17/SQLAchemy-%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://www.liuin.cn/2017/08/17/SQLAchemy-学习-1/</id>
    <published>2017-08-17T08:04:48.000Z</published>
    <updated>2017-09-03T08:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>SQLAchemy 是Python操纵数据库的一个常用的第三方ORM框架，我将通过几篇文章总结一下对SQLAlchemy的学习。</p>
<a id="more"></a>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM全称是Object-relational mapping，他将关系数据库中表中的记录映射成为对象，以对象的形式展现，程序员可以把对数据库的操作转化为对对象的操作。<br>它的作用是在关系型数据库和业务实体对象之间作一个映射，这样，我们在具体的操作业务对象的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了。<br>因此ORM的目的是为了方便开发人员以面向对象的思想来实现对数据库的操作。</p>
<p>python中最流行的ORM库就是SQLAlchemy</p>
<h2 id="SQLAchemy-架构"><a href="#SQLAchemy-架构" class="headerlink" title="SQLAchemy 架构"></a>SQLAchemy 架构</h2><p>SQLAcheemy两个层次的关系图<br><img src="https://data2.liuin.cn/story-writer/2017_7_27_1501156105658.jpg" alt=""><br>SQLAchemy方言系统核心类的关系图<br><img src="https://data2.liuin.cn/story-writer/2017_7_27_1501156198516.jpg" alt=""></p>
<h2 id="Connecting"><a href="#Connecting" class="headerlink" title="Connecting"></a>Connecting</h2><p>通过create_engine()方法创建一个Engine对象实现连接：<code>engine = create_engine(&quot;mysql://scott:tiger@hostname/dbname&quot;,encoding=&#39;latin1&#39;, echo=True)</code><br>数据库URL的格式为：dialect[+driver]://user:password@host/dbname[?key=value..]，其中dialect为使用的数据库名字，driver为驱动器（比如说mysql的pymysql或者psycopg2）</p>
<h2 id="Declare-a-Mapping（声明映射）"><a href="#Declare-a-Mapping（声明映射）" class="headerlink" title="Declare a Mapping（声明映射）"></a>Declare a Mapping（声明映射）</h2><p>我们要定义关系类的时候要依据一个基类，这个基类是维系类和数据表关系的目录，我们使用<strong>declarative_base()</strong>函数创建基类，<br>如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Base = declarative_base()</div></pre></td></tr></table></figure></p>
<p>后面所有定义的映射的类将继承这个类进行创建</p>
<h2 id="Create-a-Schema（创建模式）"><a href="#Create-a-Schema（创建模式）" class="headerlink" title="Create a Schema（创建模式）"></a>Create a Schema（创建模式）</h2><p>我们可以通过定义映射类类来创建相关的模式（ORM的特点），比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = Column(Integer, Sequence(<span class="string">'user_id_seq'</span>), primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">50</span>))</div><div class="line">    fullname = Column(String(<span class="number">50</span>))</div><div class="line">    password = Column(String(<span class="number">12</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name='%s', fullname='%s', password='%s')&gt;"</span> % (</div><div class="line">                                self.name, self.fullname, self.password)</div></pre></td></tr></table></figure></p>
<h2 id="Create-an-Instance-of-the-Mapped-Class"><a href="#Create-an-Instance-of-the-Mapped-Class" class="headerlink" title="Create an Instance of the Mapped Class"></a>Create an Instance of the Mapped Class</h2><p>实例化一个映射类，同样也支持使用<strong><strong>init</strong>()</strong>方法进行构造<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user = User(name=<span class="string">'ed'</span>, fullname=<span class="string">'Ed Jones'</span>, password=<span class="string">'edspassword'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user.name</div><div class="line"><span class="string">'ed'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user.password</div><div class="line"><span class="string">'edspassword'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(ed_user.id)</div><div class="line"><span class="string">'None'</span></div></pre></td></tr></table></figure></p>
<h2 id="Adding-and-Updating-Objects"><a href="#Adding-and-Updating-Objects" class="headerlink" title="Adding and Updating Objects"></a>Adding and Updating Objects</h2><p>通过Session和数据库进行对话，通过<strong>sessionmaker()</strong> 利用之前创建的Engine上创建一个会话类，每次进行修改的时候都要由这个类生成一个实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Session = sessionmaker(bind=engine)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session = Session()</div></pre></td></tr></table></figure></p>
<p>我们对对象进行修改以后，通过创建的这个session实例对象来进行提交<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user = User(name=<span class="string">'ed'</span>, fullname=<span class="string">'Ed Jones'</span>, password=<span class="string">'edspassword'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(ed_user)</div></pre></td></tr></table></figure></p>
<h2 id="Querying"><a href="#Querying" class="headerlink" title="Querying"></a>Querying</h2><p>Query通过Session中的query()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</div><div class="line"><span class="meta">... </span>    print(instance.name, instance.fullname)</div><div class="line">ed Ed Jones</div><div class="line">wendy Wendy Williams</div><div class="line">mary Mary Contrary</div><div class="line">fred Fred Flinstone</div></pre></td></tr></table></figure></p>
<p>Query提供多种筛选filter操作，在数据库中的相关基本运算</p>
<h2 id="常用的一些方法"><a href="#常用的一些方法" class="headerlink" title="常用的一些方法"></a>常用的一些方法</h2><ul>
<li>Base.metadata.create_all(engine) 常用于正常使用的时候创建表，自动建立表结构。优点是省时；缺点是风险高，只有在内测环境且数据量已经备份的前提下方可使用。是一种修改表结构的方法，但是风险比较高。还可以使用其他的库（如openstack/sqlalchemy-migrate)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQLAchemy 是Python操纵数据库的一个常用的第三方ORM框架，我将通过几篇文章总结一下对SQLAlchemy的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.liuin.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.liuin.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初识Scrapy 爬虫框架</title>
    <link href="https://www.liuin.cn/2017/08/08/%E5%88%9D%E8%AF%86Scrapy-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.liuin.cn/2017/08/08/初识Scrapy-爬虫框架/</id>
    <published>2017-08-08T00:52:40.000Z</published>
    <updated>2017-09-01T01:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前写的爬虫差不多都是用requests发出请求然后通过BeautifulSoup进行解析获取数据，最近接触到了一个python的爬虫框架Scrapy。前后者的区别有点组装机和品牌机之间的区别。</p>
<a id="more"></a>
<h2 id="为什么要爬虫框架"><a href="#为什么要爬虫框架" class="headerlink" title="为什么要爬虫框架"></a>为什么要爬虫框架</h2><ul>
<li>将精力更多放在提取数据上，很多其他的模块（比如下载模块）不需要自己写</li>
<li>使用异步模式，提高速度，不要自己去实现异步框架</li>
<li>使用已有的轮子，大量减少代码量</li>
</ul>
<h2 id="框架架构"><a href="#框架架构" class="headerlink" title="框架架构"></a>框架架构</h2><p><img src="http://ot40h275y.bkt.clouddn.com/story-writer/2017_7_25_1500991351462.jpg" alt="架构图"><br>Scrapy Engine: 这是引擎，负责Spiders、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等等！</p>
<p>Scheduler(调度器): 它负责接受引擎发送过来的requests请求，并按照一定的方式进行整理排列，入队、并等待Scrapy Engine(引擎)来请求时，交给引擎</p>
<p>Downloader（下载器）：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spiders来处理</p>
<p>Spiders：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器)，业务逻辑的主要部分</p>
<p>Item Pipeline：它负责处理Spiders中获取到的Item，并进行处理，比如去重，持久化存储（存数据库，写入文件，总之就是保存数据用的）</p>
<p>Downloader Middlewares（下载中间件）：你可以当作是一个可以自定义扩展下载功能的组件</p>
<p>Spider Middlewares（Spider中间件）：你可以理解为是一个可以自定扩展和操作引擎和Spiders中间‘通信‘的功能组件（比如进入Spiders的Responses;和从Spiders出去的Requests）</p>
<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>通过以下命令创建一个tutorial项目<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy startproject tutorial</div></pre></td></tr></table></figure></p>
<p>运行以后，将产生一个tutorial文件夹，含有以下的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">tutorial/</div><div class="line">    scrapy.cfg            # deploy configuration file</div><div class="line"></div><div class="line">    tutorial/             # project&apos;s Python module, you&apos;ll import your code from here</div><div class="line">        __init__.py</div><div class="line"></div><div class="line">        items.py          # project items definition file</div><div class="line"></div><div class="line">        pipelines.py      # project pipelines file</div><div class="line"></div><div class="line">        settings.py       # project settings file</div><div class="line"></div><div class="line">        spiders/          # a directory where you&apos;ll later put your spiders</div><div class="line">            __init__.py</div></pre></td></tr></table></figure></p>
<h3 id="创建第一个Spider"><a href="#创建第一个Spider" class="headerlink" title="创建第一个Spider"></a>创建第一个Spider</h3><ul>
<li>通过一个继承scrapy.Spider的类实现主要的功能，名字通过name定义</li>
<li>定义一个start_requests函数（返回iterable of Requests），提供给Spider爬取的URL</li>
<li>以上的start_request有一个快捷方式：直接指出start_urls需要爬取的URL lists</li>
<li>response是通过下载器在所给的URL中下载的内容</li>
<li>定义一个parse 函数对响应（response）进行处理解析</li>
<li>通过response.urljoin方法找到下一个URL链接，通过response.follow 方法使用快捷方式直接发出新的请求</li>
<li>在parse方法中返回数据，或者在启动爬虫的时候加上参数，使得数据得到保存</li>
</ul>
<h3 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h3><p>取出response中的内容</p>
<ul>
<li>通过css方法找到指定的标签或者模块</li>
<li>extract()取出response中的内容</li>
<li>也可以使用xpath方法找到想要找的模块</li>
<li>通过scrapy shell + 网址 可以在shell中对response进行处理（常用于测试）</li>
</ul>
<h3 id="Item类"><a href="#Item类" class="headerlink" title="Item类"></a>Item类</h3><p>在Scrapy爬虫框架中，Item类的作用是帮助我们把爬取的数据结构化表示<br>向前承接爬虫爬取的数据，向后为后面的数据持久化做准备<br>在project目录下默认创建的item.py文件可能无法引入到我们的爬虫文件中来，我们可以将这个item.py文件移动到项目根目录下</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写的爬虫差不多都是用requests发出请求然后通过BeautifulSoup进行解析获取数据，最近接触到了一个python的爬虫框架Scrapy。前后者的区别有点组装机和品牌机之间的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.liuin.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.liuin.cn/tags/python/"/>
    
      <category term="爬虫" scheme="https://www.liuin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python实现进度条显示</title>
    <link href="https://www.liuin.cn/2017/08/02/Python%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA/"/>
    <id>https://www.liuin.cn/2017/08/02/Python实现进度条显示/</id>
    <published>2017-08-02T12:11:33.000Z</published>
    <updated>2017-09-01T00:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>运行程序的时候，即不想看那些快速飘过的日志信息，又不想只让光标在那闪，怎么办呢？加个进度条吧</p>
<a id="more"></a>
<h2 id="tqdm"><a href="#tqdm" class="headerlink" title="tqdm"></a>tqdm</h2><p>tqdm是Python的一个进度条库，使用起来非常方便，上手十分容易</p>
<p><img src="http://ot40h275y.bkt.clouddn.com/story-writer/2017_7_31_1501480765636.jpg" alt="运行效果"></p>
<p>最简单的方式是使用tqdm包裹一个迭代器，迭代器现在所处的进度就是后面显示的进度。</p>
<h2 id="基于迭代的使用"><a href="#基于迭代的使用" class="headerlink" title="基于迭代的使用"></a>基于迭代的使用</h2><p>tqdm可以包裹任何迭代器，显示的进度就是当前迭代的进度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]):</div><div class="line">    text = text + char</div></pre></td></tr></table></figure></p>
<h2 id="手动操作"><a href="#手动操作" class="headerlink" title="手动操作"></a>手动操作</h2><p>通过with来控制tqdm()的更新：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> tqdm(total=<span class="number">100</span>) <span class="keyword">as</span> pbar:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        pbar.update(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p>或者不使用with，使用一个变量来表示，但是最后不要忘了撤销close()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pbar = tqdm(total=<span class="number">100</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    pbar.update(<span class="number">10</span>)</div><div class="line">pbar.close()</div></pre></td></tr></table></figure></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>tqdm还可以使用在shell的管道命令中，在标准输入和标准输出中添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ time find . -name <span class="string">'*.py'</span> -exec cat \&#123;&#125; \; | wc <span class="_">-l</span></div><div class="line">857365</div><div class="line"></div><div class="line">real    0m3.458s</div><div class="line">user    0m0.274s</div><div class="line">sys     0m3.325s</div><div class="line"></div><div class="line">$ time find . -name <span class="string">'*.py'</span> -exec cat \&#123;&#125; \; | tqdm | wc <span class="_">-l</span></div><div class="line">857366it [00:03, 246471.31it/s]</div><div class="line">857365</div><div class="line"></div><div class="line">real    0m3.585s</div><div class="line">user    0m0.862s</div><div class="line">sys     0m3.358s</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运行程序的时候，即不想看那些快速飘过的日志信息，又不想只让光标在那闪，怎么办呢？加个进度条吧&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.liuin.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.liuin.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux中查找目录下的文件是否含有某个字符串</title>
    <link href="https://www.liuin.cn/2017/07/28/Linux%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://www.liuin.cn/2017/07/28/Linux中查找目录下的文件是否含有某个字符串/</id>
    <published>2017-07-28T11:51:16.000Z</published>
    <updated>2017-09-01T00:49:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中，我们常常有这样的需求：想要在一个都是文本文件的文件夹中查找文件中含有某些字符串的文件。这篇文章给出了一种解决方案：通过find、xargs和grep三个命令实现。</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>查找目录下的所有文件中是否含有某个字符串”Ali”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find .|xargs grep -ri &quot;Ali&quot;</div></pre></td></tr></table></figure></p>
<p>查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find .|xargs grep -ri &quot;Ali&quot; -l</div></pre></td></tr></table></figure></p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find 是一个利用正则表达式查找当前目录下的文件及子目录中文件的命令，查找的根据可以是文件名，也可以是文件从属关系等等<br>同时结合-exec选项和其他命令结合使用<br>在这里find的作用是将查找范围定在当前的目录下的所有文本展现出来通过xargs 提供给grep 作为参数</p>
<p>参考：<a href="http://man.linuxde.net/find" target="_blank" rel="external">http://man.linuxde.net/find</a></p>
<h2 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h2><p>xargs 是一个给其他命令传递参数的一个过滤器，它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。<br>在这里xargs 为后面的grep 提供查找的内容</p>
<p>参考：<a href="http://man.linuxde.net/xargs" target="_blank" rel="external">http://man.linuxde.net/xargs</a></p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>grep 是一种强大的文本搜索工具。grep 也是一个管道命令，接受standard output 作为查找的文本。不作为管道命令的时候后面接文件名作为参数。<br>这里使用到了三个选项：-r 递归搜索   -i 忽略大小写   -l  仅显示文件名</p>
<p>参考：<a href="http://man.linuxde.net/grep" target="_blank" rel="external">http://man.linuxde.net/grep</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常开发中，我们常常有这样的需求：想要在一个都是文本文件的文件夹中查找文件中含有某些字符串的文件。这篇文章给出了一种解决方案：通过find、xargs和grep三个命令实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux系统" scheme="https://www.liuin.cn/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 中的语言设置问题</title>
    <link href="https://www.liuin.cn/2017/07/21/Linux-%E4%B8%AD%E7%9A%84%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://www.liuin.cn/2017/07/21/Linux-中的语言设置问题/</id>
    <published>2017-07-21T11:21:09.000Z</published>
    <updated>2017-09-01T00:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>语言问题是在Linux系统中经常遇到的问题，有的时候在使用数据库的时候，会出现编码不支持导致无法进行中文操作的情况。这篇文章是我在整理了一些Linux的编码相关的资料和查看了相关的博客以后，对Linux语言设置做的一个总结。</p>
<a id="more"></a>
<h2 id="locale-查看当前系统编码设置情况"><a href="#locale-查看当前系统编码设置情况" class="headerlink" title="locale 查看当前系统编码设置情况"></a>locale 查看当前系统编码设置情况</h2><p>使用locale命令以后，我们可以看到当前语言环境的一些配置，出现字段的含义分别是：<br>1、 语言符号及其分类(LC_CTYPE)<br>2、 数字(LC_NUMERIC)<br>3、 比较和排序习惯(LC_COLLATE)<br>4、 时间显示格式(LC_TIME)<br>5、 货币单位(LC_MONETARY)<br>6、 信息主要是提示信息,错误信息, 状态信息, 标题, 标签, 按钮和菜单等(LC_MESSAGES)<br>7、 姓名书写方式(LC_NAME)<br>8、 地址书写方式(LC_ADDRESS)<br>9、 电话号码书写方式(LC_TELEPHONE)<br>10、度量衡表达方式(LC_MEASUREMENT)<br>11、默认纸张尺寸大小(LC_PAPER)<br>12、对locale自身包含信息的概述(LC_IDENTIFICATION)。</p>
<p>设定locale就是设定12大类的locale分类属性，即 12个LC_*。除了这12个变量可以设定以外，为了简便起见，还有两个变量：LC_ALL和LANG。<br>它们之间有一个优先级的关系：LC<em>ALL &gt; LC\</em>* &gt; LANG<br>可以这么说，LC_ALL是最上级设定或者强制设定，而LANG是默认设定值。</p>
<p><strong>LANG和LANGUAGE的区别</strong>：<br>LANGUAGE是设置应用程序的界面语言。而LANG是优先级很低的一个变量，它指定所有与locale有关的变量的默认值</p>
<h2 id="安装相应的语言包"><a href="#安装相应的语言包" class="headerlink" title="安装相应的语言包"></a>安装相应的语言包</h2><p>有些系统一开始是不带有中文的语言包的，需要自己进行安装。<br>在Ubuntu系统中，安装中文语言包：<br><code>sudo apt-get install language-pack-zh-hans</code><br>再使用locale -a 查看是否有zh_CN.*这样的语言环境</p>
<h2 id="修改系统locale-设置"><a href="#修改系统locale-设置" class="headerlink" title="修改系统locale 设置"></a>修改系统locale 设置</h2><p>可以通过修改LC<em>ALL、LC\</em>*、LANG这三种变量的值来更改使用的语言（修改前，必须确定已经安装好相应的语言包，通过 <code>locale -a</code>命令进行查看已经安装的语言包）</p>
<ol>
<li>如果需要一个纯中文的系统的话，设定LC_ALL= zh_CN.XXXX，或者LANG=zh_CN.XXXX都可以</li>
<li>如果只想要一个可以输入中文的环境，而保持菜单、标题，系统信息等等为英文界面，那么只需要设定 LC_CTYPE＝zh_CN.XXXX，LANG=en_US.XXXX就可以</li>
</ol>
<p>具体方法：<br>在系统中修改 <strong>/etc/default/local</strong> 中的LANG和LANGUAGE(如果需要修改其他语言设置变量的值，列出即可) 的设置以后进行重启即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;语言问题是在Linux系统中经常遇到的问题，有的时候在使用数据库的时候，会出现编码不支持导致无法进行中文操作的情况。这篇文章是我在整理了一些Linux的编码相关的资料和查看了相关的博客以后，对Linux语言设置做的一个总结。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux系统" scheme="https://www.liuin.cn/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode] Longest Substring Without Repeating Characters 题解</title>
    <link href="https://www.liuin.cn/2017/07/15/Leetcode-Longest-Substring-Without-Repeating-Characters-%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.liuin.cn/2017/07/15/Leetcode-Longest-Substring-Without-Repeating-Characters-题解/</id>
    <published>2017-07-15T13:46:55.000Z</published>
    <updated>2017-07-15T13:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description" target="_blank" rel="external">https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个字符串，求出其中最长的不重复字符串的长度</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>用一个数组记录每个字符出现的索引值，没有出现的为零</li>
<li>设定一个开始指针表示计算字符开始的地方（初始值为0），这样每次扫描到一个字符的时候，先更新这个指针。然后计算开始指针到扫描的地方的字符串长度更新结果值。</li>
<li>最后更新字符出现的索引值</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a[<span class="number">256</span>];</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,num=<span class="number">0</span>,start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.size();i++)</div><div class="line">        &#123;</div><div class="line">            start=start&gt;a[s[i<span class="number">-1</span>]]?start:a[s[i<span class="number">-1</span>]];</div><div class="line">            num=i-start;</div><div class="line">            ans=ans&gt;num?ans:num;</div><div class="line">            a[s[i<span class="number">-1</span>]]=i;</div><div class="line">        &#125;</div><div class="line">        ans=ans&gt;num?ans:num;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接:&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="贪心" scheme="https://www.liuin.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>初识 Git hook钩子</title>
    <link href="https://www.liuin.cn/2017/06/12/%E5%88%9D%E8%AF%86-Git-hook%E9%92%A9%E5%AD%90/"/>
    <id>https://www.liuin.cn/2017/06/12/初识-Git-hook钩子/</id>
    <published>2017-06-11T17:13:23.000Z</published>
    <updated>2017-06-11T17:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用git一直停留在比较浅的层面，最近涉及部署的相关东西的时候接触到了Git的hook，感觉这个东西非常有趣，下面总结一下我对Git中hook的认识以及分享一下我使用git的hook部署hexo博客到服务器上的过程。</p>
<a id="more"></a>
<h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Git钩子是仓库中特定事件发生时Git自动运行的普通脚本。每当我们创建一个仓库的时候，我们仓库的.git/hooks目录中有一些示例脚本。<br>这些脚本可以是任何脚本语言编写的，只要它们最后能编译到可执行文件。每次脚本中的#!/bin/sh定义了你的文件将被如何解释。</p>
<h3 id="pre-receive"><a href="#pre-receive" class="headerlink" title="pre-receive"></a>pre-receive</h3><p>git有非常多的本地钩子和服务端钩子，因为这次我使用的主要是pre-receive来部署博客，所以介绍一下pre-receive钩子,更多的钩子信息可以在文章最后的参考信息中查看<br>pre-receive钩子在有人用git push向仓库推送代码时被执行。它只存在于远端仓库中，而不是原来的仓库中。<br>所以我们可以用来在hexo提交更新的时候对服务器上的相关资源进行更新</p>
<h2 id="使用-Git-hook-自动部署-Hexo博客"><a href="#使用-Git-hook-自动部署-Hexo博客" class="headerlink" title="使用 Git hook 自动部署 Hexo博客"></a>使用 Git hook 自动部署 Hexo博客</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>首先我们要在服务器器创建一个管理内容的仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/repo</div><div class="line"><span class="built_in">cd</span> /var/repo</div><div class="line">sudo git init --bare blog.git</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里使用了 –bare 参数，是为了创建一个裸仓库，没有工作区。我们不会在裸仓库上进行操作，它只为共享而存在。<br>后面在hook的设置中会讲到工作区的设置</p>
</blockquote>
<h3 id="配置hook"><a href="#配置hook" class="headerlink" title="配置hook"></a>配置hook</h3><p>因为是在push操作时才发生的事件所以使用post-receive钩子，钩子将在git操作完以后运行<br>在blog.git/hooks 目录下新建一个post-receive文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/repo/blog.git/hooks</div><div class="line">vim post-reveive</div></pre></td></tr></table></figure></p>
<p>在post-receive中写入以下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout <span class="_">-f</span></div></pre></td></tr></table></figure>
<p>注意，/var/www/hexo 要换成你自己的部署目录，一般可能都是 /var/www/html。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。<br>同时加上可执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure></p>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>修改 hexo 目录下的 _config.yml 文件 ，使得hexo博客可以自动deploy到服务器上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@www.example.com:/var/repo/blog.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>切换服务器地址和目录为你自己的服务器的地址和目录</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>此时你创建新的文章的时候就可以通过git hook来进行自动部署了，而不需要使用GitHub page的相关服务了</p>
<hr>
<p>参考：<br><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前使用git一直停留在比较浅的层面，最近涉及部署的相关东西的时候接触到了Git的hook，感觉这个东西非常有趣，下面总结一下我对Git中hook的认识以及分享一下我使用git的hook部署hexo博客到服务器上的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://www.liuin.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>HDU 3092 Least common multiple 素数打表+ 完全背包</title>
    <link href="https://www.liuin.cn/2017/05/18/HDU-3092-Least-common-multiple-%E7%B4%A0%E6%95%B0%E6%89%93%E8%A1%A8-%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    <id>https://www.liuin.cn/2017/05/18/HDU-3092-Least-common-multiple-素数打表-完全背包/</id>
    <published>2017-05-18T08:01:14.000Z</published>
    <updated>2017-05-18T08:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3092" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3092</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出两个数S和M，让你将S分解成多个整数的和，使得这些整数的最小公倍数最大，输出这个最小公倍数（对M取模以后）</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>首先在S的范围内进行素数打表，这样就可以看成取出这么多个素数进行相加的完全背包问题（因为同一个可以取多次，相乘以后照样和其他素数互质）</li>
<li>与我们平常见到的完全背包不同的是，如果一个素数取多次，他的代价和收益都是相乘的，而不是相加，所以写法应该在01背包的基础上进行改进，枚举可能相乘的个数</li>
<li>因为相乘一定会溢出，同时取模会影响到比较大小，所以采取取对数的方法来对dp数组进行操作，同时另外开一个数组ans[]来记录答案</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10005</span>; </div><div class="line"></div><div class="line"><span class="keyword">bool</span> is_prime[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn],num;</div><div class="line"><span class="keyword">double</span> dp[maxn];</div><div class="line">ll ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	num=<span class="number">0</span>;</div><div class="line">	<span class="built_in">memset</span>(is_prime,<span class="literal">true</span>,<span class="keyword">sizeof</span>(is_prime));</div><div class="line">	is_prime[<span class="number">0</span>]=is_prime[<span class="number">1</span>]=<span class="literal">false</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(is_prime[i])prime[num++]=i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num &amp;&amp; i*prime[j]&lt;maxn;j++)</div><div class="line">		&#123;</div><div class="line">			is_prime[i*prime[j]]=<span class="literal">false</span>;</div><div class="line">			<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;  <span class="comment">//保证每一个合数都被他的最小质因数排除</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S,M;</div><div class="line">	prime_init();</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;S,&amp;M)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">		fill(ans,ans+num,<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num &amp;&amp; prime[i]&lt;S ;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">double</span> tmp=<span class="built_in">log</span>(prime[i]*<span class="number">1.0</span>);</div><div class="line">			<span class="keyword">for</span>(ll j=S;j&gt;=prime[i];j--)</div><div class="line">				<span class="keyword">for</span>(ll k=prime[i],q=<span class="number">1</span>;k&lt;=j;k*=prime[i],q++)  <span class="comment">//可以重复，q表示重复次数</span></div><div class="line">					<span class="keyword">if</span>(dp[j-k]+q*tmp&gt;dp[j])</div><div class="line">					&#123;</div><div class="line">						dp[j]=dp[j-k]+q*tmp;</div><div class="line">						ans[j]=ans[j-k]*k%M;</div><div class="line">					&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[S]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接： &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3092&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=3092&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="https://www.liuin.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
