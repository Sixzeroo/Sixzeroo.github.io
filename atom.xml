<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sixzeroo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.liuin.cn/"/>
  <updated>2017-12-04T14:47:23.000Z</updated>
  <id>https://www.liuin.cn/</id>
  
  <author>
    <name>Sixzeroo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识iptables</title>
    <link href="https://www.liuin.cn/2017/12/04/%E5%88%9D%E8%AF%86iptables/"/>
    <id>https://www.liuin.cn/2017/12/04/初识iptables/</id>
    <published>2017-12-04T14:44:30.000Z</published>
    <updated>2017-12-04T14:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.wikiwand.com/zh-cn/Iptables" target="_blank" rel="external">iptables</a> 可以简单理解为 Linux 系统内核级防火墙 netfilter 的用户态客户端。<br>Linux 管理员通过调用 iptables 命令，配置 Linux 内核 netfilter 模块规则，对网络数据包的流动进行管理。</p>
<a id="more"></a>
<h4 id="iptables-基本命令"><a href="#iptables-基本命令" class="headerlink" title="iptables 基本命令"></a>iptables 基本命令</h4><h5 id="iptables-语法帮助"><a href="#iptables-语法帮助" class="headerlink" title="iptables 语法帮助"></a>iptables 语法帮助</h5><p>可以使用<code>iptables</code>查看iptables的帮助文档</p>
<h5 id="查看-iptables-表的规则"><a href="#查看-iptables-表的规则" class="headerlink" title="查看 iptables 表的规则"></a>查看 iptables 表的规则</h5><p>iptables 有[表 (tables)] 的概念，每张表又包含不同[链 (chains)]，大部分情况下我们仅需要使用 filter 和 nat 两张表的链就可以完成功能。</p>
<p>使用以下命令可以查看 filter 表中的规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -L -n</div></pre></td></tr></table></figure></p>
<p>参数解析 -L 列出规则， -n 不显示域名，命令默认显示的是 filter 表，可以通过 -t 参数来指定其他表</p>
<p>可以看到目前 filter 表中有 3 条链: INPUT, FORWARD, OUTPUT。 3 条链都没有任何规则存在，因此通过网卡的网络数据包不会受到任何影响。</p>
<blockquote>
<p>iptables 包含 5 张表（tables）：<br> raw 用于配置数据包，raw 中的数据包不会被系统跟踪。<br> filter 是用于存放所有与防火墙相关操作的默认表。<br> nat 用于网络地址转换（例如：端口转发）。<br> mangle 用于对特定数据包的修改。<br> security 用于强制访问控制网络规则。</p>
<p>链可以看作是一系列规则集合，默认的链被用于不同的场景，用户也可以创建自定义的链。例如：<br>filter 表的 INPUT 链用于进入网卡的数据包过滤<br>filter 表的 OUTPUT 链用于过滤网卡对外发送的数据包过滤 一条链中的规则从上自下顺序执行。<br>实验</p>
</blockquote>
<h4 id="禁止访问目的地址"><a href="#禁止访问目的地址" class="headerlink" title="禁止访问目的地址"></a>禁止访问目的地址</h4><h5 id="添加一条规则到-Filter-表"><a href="#添加一条规则到-Filter-表" class="headerlink" title="添加一条规则到 Filter 表"></a>添加一条规则到 Filter 表</h5><p>在没有任何防火墙规则时，尝试 ping 百度的服务器，ping 是可以正常返回的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ping -c 4 www.baidu.com</div><div class="line">PING qcloud.com (119.29.47.192) 56(84) bytes of data.</div><div class="line">64 bytes from 119.29.47.192: icmp_seq=1 ttl=58 time=3.11 ms</div><div class="line">64 bytes from 119.29.47.192: icmp_seq=2 ttl=58 time=3.10 ms</div><div class="line">64 bytes from 119.29.47.192: icmp_seq=3 ttl=58 time=3.17 ms</div></pre></td></tr></table></figure></p>
<p>假设我们作为 Linux 管理员，不希望有人从本机 ping 百度的服务器，那么就可以用到如下的 iptables 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -I OUTPUT -p icmp -d www.baidu.com -j DROP</div></pre></td></tr></table></figure></p>
<p>参数解析 -I 添加规则到链的最前面， -p 匹配协议， -d 匹配目的地址， -j DROP 将匹配的数据包实施丢掉动作</p>
<blockquote>
<p>重要:<br>因为在 iptables 一个链中的规则是从上到下依次执行的，因此一条规则在链中的位置十分重要。<br>例如一条拒绝全部连接的规则 -j REJECT 一定要放在链的最后，而允许通行的规则要放在这条规则之前。<br>否则所有网络数据包进入链后直接匹配到这条规则，将导致所有连接被拒绝。</p>
</blockquote>
<p>现在我们可以用 <code>sudo iptables -L -n</code> 命令看到 filter 表的 OUTPUT 链中新增了两条记录，其中 destination 地址是 DNS 返回的百度服务器 IP 地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line">DROP       icmp --  0.0.0.0/0            220.181.112.244</div><div class="line">DROP       icmp --  0.0.0.0/0            220.181.111.188</div></pre></td></tr></table></figure></p>
<p>这时再 ping 百度服务器会发现无法 ping 通了，因为访问百度服务器 IP 地址的数据包已经被防火墙过滤丢掉了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ping -c 4 www.baidu.com</div><div class="line">PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.</div><div class="line">ping: sendmsg: Operation not permitted</div><div class="line">ping: sendmsg: Operation not permitted</div></pre></td></tr></table></figure></p>
<h4 id="导出、编辑、导入规则"><a href="#导出、编辑、导入规则" class="headerlink" title="导出、编辑、导入规则"></a>导出、编辑、导入规则</h4><p>在进行一系列复杂的防火墙配置时，大多数时候不建议直接调用 iptables 做规则修改。 因为任何一条错误的配置或者一个 typo （输入错误）都有可能导致严重的网络问题。</p>
<p>一个最佳实践是导出现有规则到文本文件，对该文本文件进行编辑，进行检查无误后再将其导入。</p>
<h5 id="导出规则"><a href="#导出规则" class="headerlink" title="导出规则"></a>导出规则</h5><p>通过如下命令导出所有规则到文本文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables-save &gt; /home/ubuntu/iptables_rules</div></pre></td></tr></table></figure></p>
<h5 id="编辑规则"><a href="#编辑规则" class="headerlink" title="编辑规则"></a>编辑规则</h5><p>在新标签页打开 iptables_rules，在 filter 表的 :OUTPUT ACCEPT 链下面添加一条规则的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A OUTPUT -p icmp -d 114.114.114.114 -j DROP</div></pre></td></tr></table></figure></p>
<h5 id="导入规则"><a href="#导入规则" class="headerlink" title="导入规则"></a>导入规则</h5><p>使用命令将编辑过的规则重新导入 iptables<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables-restore /home/ubuntu/iptables_rules</div></pre></td></tr></table></figure></p>
<p>使用 sudo iptables -L -n 查看是否有禁止 ping 114.114.114.114 的新增规则</p>
<h5 id="清除全部规则"><a href="#清除全部规则" class="headerlink" title="清除全部规则"></a>清除全部规则</h5><p>现在我们清除上一小节中增加的规则，还原到没有任何规则的初始状态。</p>
<p>Note：当你因为错误的配置 iptables 导致自己无法远程访问的时候，从 console 执行这条命令可以快速修复状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -F</div></pre></td></tr></table></figure>
<p>iptables 还提供 -X 参数清除[自定义链]， -Z 参数重置计数器</p>
<h4 id="黑-白名单"><a href="#黑-白名单" class="headerlink" title="黑/白名单"></a>黑/白名单</h4><p>某公司禁止特定的 PC 设备访问和工作无关的网站，而其他设备则不受限制。</p>
<p>分析：</p>
<p>1.首先明确是对外访问限制，所以应该编辑 iptables OUTPUT 链进行限制</p>
<p>2.其次，由于目的地址可能是数百个网站，针对每一台PC配置数百条规则是不可接受的，因此我们选择使用自建一条链来实现。</p>
<p>3.公司只限制部分 PC 访问，因此对 PC 的匹配最好使用 IP 地址匹配，不匹配的设备则不受限制。</p>
<p>Note: 对于进入 INPUT 链的入站规则还可以采用 mac 匹配。</p>
<h5 id="查看本机-IP-地址。"><a href="#查看本机-IP-地址。" class="headerlink" title="查看本机 IP 地址。"></a>查看本机 IP 地址。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ip a show eth0</div></pre></td></tr></table></figure>
<p>在 inet 之后的就是本机网口的 IP 地址，例如 10.135.166.86</p>
<p>查看公网IP也可以使用一些IP工具进行查看</p>
<h5 id="编辑-iptables-规则："><a href="#编辑-iptables-规则：" class="headerlink" title="编辑 iptables 规则："></a>编辑 iptables 规则：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//清除已有规则</div><div class="line"></div><div class="line">sudo iptables -F</div><div class="line">//清除自建链</div><div class="line"></div><div class="line">sudo iptables -X</div><div class="line">//新建一个叫做 BLACKLIST 的链</div><div class="line"></div><div class="line">sudo iptables -N BLACKLIST</div><div class="line">//当访问的源 IP 地址是本机的时候进入 BLACKLIST 链</div><div class="line"></div><div class="line">sudo iptables -A OUTPUT -s 10.135.166.86 -j BLACKLIST</div><div class="line">//向 BLACKLIST 链添加 2 条规则</div><div class="line"></div><div class="line">sudo iptables -A BLACKLIST -d 114.114.114.114 -j DROP</div><div class="line">sudo iptables -A BLACKLIST -d 220.181.111.188 -j DROP</div></pre></td></tr></table></figure>
<p>如上配置后，会发现本机已经无法 ping BLACKLIST 中的目的地址了。</p>
<p>如果后续要增加新的禁止访问的目的地址，则只需向 BLACKLIST 链添加新规则。<br>如果需要限制另一台 PC 通过本网关转发访问外网，则只需添加一条 OUTPUT 链的源 IP 匹配规则并指向 -j BLACKLIST。</p>
<h4 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h4><p>分析： 通常来讲应该首先考虑程序本身能否配置监听多个端口，或者使用负载均衡器作为代理程序。 但在本次实验中我们将使用 iptables 监听 8080 端口并将网络数据包转发给本地80端口</p>
<p>首先测试 <code>telnet 0 80</code> 和 <code>telnet 0 8080</code> 可以看到 80 和 8080 端口都是不通的。</p>
<p>接下来我们用 netcat 监听 80 端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nc -k -l 80 &amp;</div></pre></td></tr></table></figure></p>
<p>这时候 telnet 0 80 发现 80 端口可以工作了。</p>
<p>下面我们用 iptables 做一个端口映射<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A OUTPUT -p tcp -d 127.0.0.1 --dport 8080 -j DNAT --to 127.0.0.1:80</div></pre></td></tr></table></figure></p>
<p>这里我们用到了 -t nat 参数，表示我们使用了 netfilter 的 nat 表。在 nat 表的 OUTPUT 链上做了一个 -j DNAT 转发，将访问内网 8080 端口的数据包转向了 80 端口。</p>
<p>这时候 telnet 0 8080 发现 8080 端口也可以工作了。</p>
<p>如果是监听外网的 8080 端口转发到 80 端口，则需要执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-ports 80</div></pre></td></tr></table></figure></p>
<p>通过使用 PREROUTING 链直接将访问 8080 端口的数据包转发到 80 端口</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/zh-cn/Iptables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iptables&lt;/a&gt; 可以简单理解为 Linux 系统内核级防火墙 netfilter 的用户态客户端。&lt;br&gt;Linux 管理员通过调用 iptables 命令，配置 Linux 内核 netfilter 模块规则，对网络数据包的流动进行管理。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="iptables" scheme="https://www.liuin.cn/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>台中两日游</title>
    <link href="https://www.liuin.cn/2017/12/04/%E5%8F%B0%E4%B8%AD%E4%B8%A4%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/12/04/台中两日游/</id>
    <published>2017-12-04T08:58:32.000Z</published>
    <updated>2017-12-04T08:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到周末，看天气预报台北这个周末还是下雨，这次下定决心要南下避雨。早上做的决定，然后查火车时间、定民宿九点才从家里出发，也算是一个说走就走的旅行吧。</p>
<a id="more"></a>
<h2 id="台铁网络"><a href="#台铁网络" class="headerlink" title="台铁网络"></a>台铁网络</h2><p>早上在家查火车时间的时候已经没有对号列车，想要有座位只能做区间车，还好从台北车站上车的时候还有一些座位。</p>
<p>到台中已经是下午一点了，然后继续坐区间车到清水车站，转一次公交车到高美湿地，中间换乘公交的时候等了很久。最后到高美湿地的时候已经是下午四点了。</p>
<p>其中区间车从台中到清水事实上是北上的，按理说如果北上的话我在从台北到台中的车上到清水停下来就行了。之前我一直以为台湾的铁路网络就是绕着台湾转一个圈圈，其实除了台铁在这个圆圈中生出一些短的分支以外，还有一段是两条线平行的。具体可以看台铁的<a href="https://www.railway.gov.tw/Upload/UserFiles/tr_line.pdf" target="_blank" rel="external">线路图</a>。这一段大致就是从新竹到台中一段，分成了山线和海线两条平行线，台中在山线的一段，清水在海线的一段，所以才要坐区间车绕到海线然后北上。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160347.png" alt="台中车站"></p>
<h2 id="高美湿地"><a href="#高美湿地" class="headerlink" title="高美湿地"></a>高美湿地</h2><p>高美湿地之前其实不是湿地是对外开放的<a href="https://www.wikiwand.com/zh-cn/%E6%B5%B7%E6%B0%B4%E6%B5%B4%E5%A0%B4" target="_blank" rel="external">海水浴场</a>，湿地也是这几十年形成的。主要的原因是旁边建了一个台中港导致泥沙淤积。后面又建了一组风力发电站，才有了今天照片中的这番景色。</p>
<p>到了高美湿地以后第一个感受就是风大，到桥的边上感觉都能够被吹起来。第二感觉就是这“风扇叶子”好大啊，站在发电机组旁边想着这玩意要是砸下来不就GG了。高美湿地一直是以夕阳的美景著称，但是我去的那天天上全都是云，偶尔有几个“窟窿”还不是在海的那一边，可能是我来得太早了吧。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_1512374762267.jpg" alt="别人拍的高美湿地"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160712.png" alt="我拍的高美湿地"></p>
<h2 id="台中公共交通"><a href="#台中公共交通" class="headerlink" title="台中公共交通"></a>台中公共交通</h2><p>台中的公交交通一个比较有特点的地方就是前十公里免费，这种优惠政策在台湾只有台中有，在世界上应该也是蛮罕见的。至于为什么台中会实施这种优惠政策，看网上说的好像是市长选举的时候为了拉选票推出的。另外台中的iUbike前30分钟也是免费的，这福利真是太好了，我在台中的这两天我坐公交一共只花了10+TWD。</p>
<p>不过还是要吐槽一下台中的公交车，发车间隔太长了。除了由之前的快速公交改过来的300路，其他公交线路发车间隔时间都在20分钟以上。去高美湿地的时候来回差不多都等了半个小时的公交，还是台北的公交系统发达啊。</p>
<h2 id="逢甲夜市"><a href="#逢甲夜市" class="headerlink" title="逢甲夜市"></a>逢甲夜市</h2><p>逢甲夜市号称是台湾最大的夜市，这个看他们的牌子就看得出来，别的夜市一般都只加上“观光夜市”的字样，逢甲霸气的加上了“国际观光夜市”。</p>
<p>东西的确挺多的，占了两条街，我选了两个队排得比较长的吃了一下，感觉还行。</p>
<p>旁边隔着的就是逢甲大学了，外面人潮涌动，逢甲大学里面却只有稀稀疏疏几个人。学校旁边是台湾最大的夜市，一定能够换着花样吃。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160837.png" alt="逢甲夜市"></p>
<h2 id="民宿体验"><a href="#民宿体验" class="headerlink" title="民宿体验"></a>民宿体验</h2><p>民宿因为是当天才找的，所以能够选择的余地并不过。不过总体的体验还好，民宿小姐姐特意来新光三越接我。我住的是8人混住房实际住的只有4个人，高中之后第一次睡上下铺。地点在台中市的市中心，旁边就是新光三越和市政府。卫生情况也还可以，比较特别的就是认识两个小伙伴，一个是在世新大学读传媒的马来西亚交换生；另一个是台湾这边的一个老师。</p>
<p>和他们聊的时候也收获到了蛮多的东西，比如说为什么马拉西亚人的中文那么好、台北冬天为什么一直下雨。其实想想，一个人出来玩有一个人出来玩的好处吧，如果结伴出行可能就不一定会认识到这些人有这些收获。</p>
<h2 id="东海大学"><a href="#东海大学" class="headerlink" title="东海大学"></a>东海大学</h2><p>东海大学是台中的一个有基督教背景的私立大学，台中非常有名的路思义教堂就在东海大学里面。有人评价路思义教堂是中华文化与西方相遇而产生的最佳作品。对建筑风格没什么了解，不过觉得还是挺有特色的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160942.png" alt="东海大学"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160940.png" alt="路思义教堂"></p>
<h2 id="台中歌剧院"><a href="#台中歌剧院" class="headerlink" title="台中歌剧院"></a>台中歌剧院</h2><p>台中歌剧院的建筑非常有特色，位于台湾市中心。歌剧院由钢筋混沙土构造，部分为钢构造；建筑师伊东丰雄的设计，以人类最原始的“树屋”、“洞窟”的概念设计出美声国栋（Sexy guy），内部墙面均为曲面。共有58面曲墙，兴建难度极高。</p>
<p>比较感兴趣的时候楼顶的空中花园，但是因为修养关闭没能够上去，可惜了。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-162744.png" alt="台中歌剧院"></p>
<h2 id="台湾美术馆"><a href="#台湾美术馆" class="headerlink" title="台湾美术馆"></a>台湾美术馆</h2><p>前面的歌剧院因为11：30才开馆，所以也没能够进去参观，台湾美术馆应该是这次台中之行在室内看的最受震撼的地方吧。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-163955.png" alt="enter description here" title="美术馆外景-1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-164107.png" alt="enter description here" title="美术馆外景-2"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-163957.png" alt="enter description here" title="美术馆内景-1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-163959.png" alt="enter description here" title="美术馆内景-2"></p>
<h2 id="静宜大学"><a href="#静宜大学" class="headerlink" title="静宜大学"></a>静宜大学</h2><p>前面的东海大学是基督教大学，而静宜大学是一所天主教大学。之前一直是一所女子大学，从1993年开始才开始招收男生。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-164806.png" alt="enter description here" title="静宜大学校门"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-164735.png" alt="enter description here" title="静宜大学图书馆"></p>
<h2 id="宫原眼科"><a href="#宫原眼科" class="headerlink" title="宫原眼科"></a>宫原眼科</h2><p>当我第一次看到这个景点名的时候，我一直以为是一个医院，看他的<a href="http://www.miyahara.com.tw/" target="_blank" rel="external">官网</a>也不知道具体是干啥的。</p>
<p>后来才知道是一个甜品店，建造於西元1927年，是由日本眼科博士宫原武熊所兴建，也是日治时代台中规模最大的眼科诊所。后来成了危楼被，被「日出」团队重新复原成现在颇具特色的宫原眼科。</p>
<p>听说里面的冰淇淋和凤梨酥比较有名，尝了一下冰淇淋，还不错。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-165730.png" alt="enter description here" title="宫原眼科"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到周末，看天气预报台北这个周末还是下雨，这次下定决心要南下避雨。早上做的决定，然后查火车时间、定民宿九点才从家里出发，也算是一个说走就走的旅行吧。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>士林半日游</title>
    <link href="https://www.liuin.cn/2017/11/28/%E5%A3%AB%E6%9E%97%E5%8D%8A%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/11/28/士林半日游/</id>
    <published>2017-11-28T06:54:34.000Z</published>
    <updated>2017-12-02T06:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>周末在家瘫了一天，另一天不想浪费了。刚好最近看了一个体验东京科技馆的视频，就想看看台湾科技馆里面有什么有趣的东西。</p>
<a id="more"></a>
<h2 id="台湾科教馆"><a href="#台湾科教馆" class="headerlink" title="台湾科教馆"></a>台湾科教馆</h2><p>台湾科教馆在台北捷运红线士林站附近，不过离捷运站还是有一点距离，推荐骑Ubike过去。旁边是台北天文馆和台北新儿童乐园。这一带还是挺适合亲子周末游玩了。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_001.jpg" alt="外景（我去的时候装修，没拍到）"></p>
<p>科教馆里面3楼到7楼是常设展厅，需要购票。价格是100TWD，学生优惠价70TWD。另外还有一些项目，立体剧院、地震剧场啥的，我也花了20TWD体验了一把地震剧场。</p>
<p>3楼到7楼的常设展厅还是挺有意思的，有许多学习互动的设备。涉及的知识差不多就是初中高中所学的生物、物理、化学和数学的相关知识（哈哈，感觉回到了高中课堂）。正常速度走走看看能够看两三个小时。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG2.jpeg" alt="模型"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG3.jpeg" alt="馆内的科普讲座"></p>
<p>参观完常设展厅，我也体验了一下地震剧场。就是一个比较大的圆盘里面坐十个人左右，然后模拟4-5级的地震，然后屏幕上播放<a href="https://www.wikiwand.com/zh-hans/921%E5%A4%A7%E5%9C%B0%E9%9C%87" target="_blank" rel="external">921地震</a>的纪录片。地震体验效果一般，但是屏幕上播放的纪录片挺震撼的。</p>
<h2 id="士林夜市"><a href="#士林夜市" class="headerlink" title="士林夜市"></a>士林夜市</h2><p>到了士林，自然要来这里有名的士林夜市逛一逛了。因为来得太早了，之前得到的逛夜市经验（哪里排队多哪里好吃）也派不上用场。于是就在网上找了推荐比较多的两家店平吃了一下。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG4.jpeg" alt="士林市场大门"></p>
<p>1972年就开业的忠诚号蚵仔煎应该是士林夜市最具代表性的小吃了，上次吃蚵仔煎还是在花莲的东门夜市，不过上次因为是带回民宿吃的，所以最后吃到的东西是凉的。这次的蚵仔煎感觉就跟上次的大不一样了，非常好吃。<br>注意台湾这边蚵仔煎的叫法是从闽南话音译过来的，叫（ǒu ā jīan）</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG1.jpeg" alt="忠诚号"></p>
<p>士林夜市大门旁边的十全排骨也不错，份量很足，吃起来很带劲。</p>
<p>十全排骨 照片</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末在家瘫了一天，另一天不想浪费了。刚好最近看了一个体验东京科技馆的视频，就想看看台湾科技馆里面有什么有趣的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>夜登剑潭山</title>
    <link href="https://www.liuin.cn/2017/11/26/%E5%A4%9C%E7%99%BB%E5%89%91%E6%BD%AD%E5%B1%B1/"/>
    <id>https://www.liuin.cn/2017/11/26/夜登剑潭山/</id>
    <published>2017-11-26T06:53:03.000Z</published>
    <updated>2017-12-02T06:56:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>看台北夜景一般的选择都是象山，那边有台北的地标建筑——101大楼。除了象山，剑潭山也是看台北夜景的一个不错的选择，人少而且能够换一个角度看台北。</p>
<a id="more"></a>
<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><p>剑潭山在士林夜市旁边，能够在士林夜市吃饱喝足再上山。不过我最近迷恋金拱门，这次是吃了两包大暑才上山的。</p>
<p>我们上山的线路大致是<a href="https://www.google.com/maps/dir/%E6%8D%B7%E9%81%8B%E5%8A%8D%E6%BD%AD%E7%AB%99+111%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A3%AB%E6%9E%97%E5%8D%80/104%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E5%B1%B1%E5%8C%BA%E8%80%81%E5%9C%B0%E6%96%B9%E8%A7%82%E6%99%AF%E5%B9%B3%E5%8F%B0/@25.0834816,121.5280835,15.63z/data=!4m24!4m23!1m15!1m1!1s0x3442aeb1dc51736b:0xba7e1559c66ed90f!2m2!1d121.525077!2d25.084873!3m4!1m2!1d121.5249269!2d25.0796471!3s0x3442aeb29b137353:0xc81fe0fdb900019a!3m4!1m2!1d121.5297702!2d25.0831486!3s0x3442aeae847cf9f3:0x8ad42cd31d0e8b6a!1m5!1m1!1s0x3442aea758724e3b:0x6f606638fbaff219!2m2!1d121.536965!2d25.0904047!3e2" target="_blank" rel="external">这样</a>的：</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_1512191397180.jpg" alt="登山路线"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG5.jpeg" alt="登山，出发！"></p>
<h2 id="爬山"><a href="#爬山" class="headerlink" title="爬山"></a>爬山</h2><p>我们上山的时候刚好是晚上十二点，山上几乎是一个人都没有，遇到的唯一一对外国情侣还是我们刚上去他们从山上下来的时候遇到了。</p>
<p>想想半夜如果你爬山爬着爬着发现后面有两个人其实也蛮恐怖的。</p>
<p>上山道路的前一半是有路灯的，而且这些路灯是通宵开着的，所以前面一段路还是不用怕的。途中也能够遇到一些寺庙、亭子，甚至还有羽毛球场（在山上打羽毛球就不怕球掉书上吗）。下雨的时候还能够遇到一些动物，大型的蜗牛啥的。</p>
<p>不过有路灯的登山道到的观景平台能够看到的景色就有限了，在剑潭山看台北夜景最好的地方就是老地方观景平台了。</p>
<p>晚上想要到老地方观景平台就必须要走一段没有路灯的山路，就是上面的路线图中的标出来比较大的路。一开始我们以为是公路，结果就是比前面的登山道大一点点。凌晨一点，两个大老爷们纠结了十多分钟走不走这个没有路灯的路，各种想象什么土狗、浪、蛇什么的。最后还是鼓起勇气走了，一开始走的时候有点害怕，一篇漆黑，但是走到后面习惯了也就不那么怕了。</p>
<p>没有路灯的路走个半个小时应该就到了剑潭山看夜景最好的位置——老地方观景平台了，能够望见远处的101大楼和松山机场，晚上的景色十分美丽。</p>
<p>由于晚上手机照相的质量实在是太差了，照片可以参考<a href="http://hx271.pixnet.net/blog/post/61096888-%E3%80%90%E5%8F%B0%E5%8C%97%E5%8D%81%E5%A4%A7%E5%A4%9C%E6%99%AF%E3%80%91%E9%98%BF%E5%AE%8F%E9%81%94%E4%BA%BA%E7%B2%BE%E9%81%B8~%E5%A4%9C%E6%99%9A%E5%BF%85%E7%9C%8B%E7%9A%84" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看台北夜景一般的选择都是象山，那边有台北的地标建筑——101大楼。除了象山，剑潭山也是看台北夜景的一个不错的选择，人少而且能够换一个角度看台北。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台湾延时摄影集合</title>
    <link href="https://www.liuin.cn/2017/11/21/%E5%8F%B0%E6%B9%BE%E5%BB%B6%E6%97%B6%E6%91%84%E5%BD%B1%E9%9B%86%E5%90%88/"/>
    <id>https://www.liuin.cn/2017/11/21/台湾延时摄影集合/</id>
    <published>2017-11-20T20:18:29.000Z</published>
    <updated>2017-12-04T06:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在台湾交换期间拍摄的延时摄影的集合，没有专业设备，大家看看就好</p>
<a id="more"></a>
<h2 id="捷运文湖线"><a href="#捷运文湖线" class="headerlink" title="捷运文湖线"></a>捷运文湖线</h2><p>因为文湖线的列车都是自动驾驶的，所以才能够有机会拍出这些片子</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/OYMoRU74TuA" frameborder="0" gesture="media" allowfullscreen></iframe>


<iframe height="498" width="510" src="http://player.youku.com/embed/XMzE4OTM5NzcxMg==" frameborder="0" allowfullscreen></iframe>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在台湾交换期间拍摄的延时摄影的集合，没有专业设备，大家看看就好&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台北捷运集章第一弹</title>
    <link href="https://www.liuin.cn/2017/11/19/%E5%8F%B0%E5%8C%97%E6%8D%B7%E8%BF%90%E9%9B%86%E7%AB%A0%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
    <id>https://www.liuin.cn/2017/11/19/台北捷运集章第一弹/</id>
    <published>2017-11-19T02:04:09.000Z</published>
    <updated>2017-11-27T02:06:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我完成集齐捷运纪念章章计划第一天。</p>
<a id="more"></a>
<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><p>先放一张台北整体的捷运图吧。<br><img src="https://data2.liuin.cn/story-writer/2017_11_12_1510496480309.jpg" alt="enter description here" title="台北捷运路线图"><br>计划一天完成线路：<br>永安市场（黄线）–&gt; 南势角（黄线）–&gt; 忠孝新生 –&gt; 顶埔（蓝线） –&gt; 南港展览馆 –&gt;  动物园（棕线） –&gt; 南京复兴 –&gt; 松山（绿线）–&gt; 新店（绿线） –&gt; 公馆（绿线）–&gt; 回家<br>将蓝线、棕线和绿线的所有捷运站的纪念章都集齐</p>
<p>实际完成的情况是这样的：<br>永安市场（黄线）–&gt; 南势角（黄线）–&gt; 忠孝新生 –&gt; 顶埔（蓝线） –&gt; 南港展览馆 –&gt; 南京复兴 –&gt; 松山（路线） –&gt; 大安森林公园（红线）–&gt; 回家<br>只完成了蓝线的集章任务</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG4.jpeg" alt="enter description here" title="出发"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG1-1.jpeg" alt="enter description here" title="捷运一日票"></p>
<h2 id="台北捷运“观光线”——棕线"><a href="#台北捷运“观光线”——棕线" class="headerlink" title="台北捷运“观光线”——棕线"></a>台北捷运“观光线”——棕线</h2><h2 id="大湖公园"><a href="#大湖公园" class="headerlink" title="大湖公园"></a>大湖公园</h2><p>今天一天中比较好玩的景点差不多都在棕线上，大湖公园本来不是计划游玩的景点，但是却花了一个小时在里面逛。主要是捷运一转弯就看到了这个非常美丽的湖，忍不住下去看两眼。<br> “大湖”旧名十四份埤（陂），因白鹭成群又称白鹭湖，采用中国园林式设计。其实这个湖的名气不是很大，只是台北的一个区域性公园。但是风景是相当的好，公园里面的小动物也挺多的，是一个踏青的好地方。</p>
<p> <img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG9.jpeg" alt="enter description here" title="大湖湖面"></p>
<p> <img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG11.jpeg" alt="enter description here" title="大湖风景"></p>
<h2 id="松山机场"><a href="#松山机场" class="headerlink" title="松山机场"></a>松山机场</h2><p>松山机场应该是台湾的第三大机场，仅次于桃园机场和高雄机场。是一个军民合用机场，民用部分为台北国际航空站，主要负责的是台晚本地的航线以及两岸航线，最远的也只是到韩国；军用部分为空军松山基地。<br>松山机场开放了一个观景平台供游客参观，在第一航厦和第二航厦之间。机场里面有明显的指示牌，非常容易找到。装饰非常棒，就是今天一直是阴雨天气，看到的是灰蒙蒙的一片，或许以后天气好的时候可以再来一次。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG10.jpeg" alt="enter description here" title="观景台指引"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG3.jpeg" alt="enter description here" title="台北国际航空站"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG5.jpeg" alt="enter description here" title="观景平台"></p>
<h2 id="饶河夜市"><a href="#饶河夜市" class="headerlink" title="饶河夜市"></a>饶河夜市</h2><p>来之前听说松山捷运站有一个花一千五百万新台币修建的叫“河流彎曲之處”的捷运艺术还不错，趁今天买了捷运一日票特地去看看。到了现场感受没有图片中那么好看，可能是图片修过吧。<br>饶河夜市就在松山捷运站的出口处，是台北一个比较有名的观光夜市。逛夜市就要找人多的地方，这次花了半个小时在两个地方吃了点东西，都非常好吃，一个是爆浆鸡翅另一个是进夜市口能够看到的福州世祖胡椒饼</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG7.jpeg" alt="enter description here" title="松山捷运站艺术"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG2.jpeg" alt="enter description here" title="饶河观光夜市"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG6.jpeg" alt="enter description here" title="福州世祖胡椒饼"></p>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>这一天一共集章44块，台北的捷运站一共有117个。现在的进度是44/117，看来还要两次才能够完成台北捷运全制霸的计划。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG12.jpeg" alt="enter description here" title="成果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我完成集齐捷运纪念章章计划第一天。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git 停止追踪文件</title>
    <link href="https://www.liuin.cn/2017/11/16/Git-%E5%81%9C%E6%AD%A2%E8%BF%BD%E8%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>https://www.liuin.cn/2017/11/16/Git-停止追踪文件/</id>
    <published>2017-11-16T14:18:23.000Z</published>
    <updated>2017-11-24T17:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时在使用Git的时候，大多会有这种情况：因为在初始化git的时候没有考虑周全导致有些不需要的文件已经被被追踪，或者想不让在某次提交以后一些文件不被追踪（比如说一些涉及隐私的配置文件）。这里提供一些解决方案</p>
<a id="more"></a>
<h2 id="Git中忽略某些文件"><a href="#Git中忽略某些文件" class="headerlink" title="Git中忽略某些文件"></a>Git中忽略某些文件</h2><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>在一开始git进行初始化的时候我们可以通过修改配置文件.gitignore来指定哪些文件是不需要被追踪的。<br>文件 .gitignore 的格式规范如下：</p>
<ul>
<li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配。(glob 模式是指 shell 所使用的简化了的正则表达式)</li>
<li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li>
</ul>
<h3 id="快捷设置-gitignore"><a href="#快捷设置-gitignore" class="headerlink" title="快捷设置.gitignore"></a>快捷设置.gitignore</h3><p>一般我们在项目中会有超多不需要放到git上面的东西，但是一个一个加入到.gitignore中是非常麻烦的。可以使用gitignore.io提供的API快速创建<br>设置别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.ignore &apos;!gi() &#123; curl -L -s https://www.gitignore.io/api/$@ ; &#125;; gi&apos;</div></pre></td></tr></table></figure></p>
<p>这样以后创建项目的时候只需要结合你的开发环境通过关键进行快捷创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git ignore macOS &gt;&gt; .gitignore</div></pre></td></tr></table></figure></p>
<h2 id="忽略未追踪文件"><a href="#忽略未追踪文件" class="headerlink" title="忽略未追踪文件"></a>忽略未追踪文件</h2><p>在项目开发中可能会有一些新的不想追踪的文件生成，这个时候有两种处理方法：</p>
<ol>
<li>更新.gitignore 文件，这种操作能够使得其他人也忽略对这些文件的追踪</li>
<li>将忽略的文件加到项目文件夹中的 .git/Info/exclude文件中，这种操作只对本地起作用。</li>
</ol>
<h2 id="停止追踪某些文件"><a href="#停止追踪某些文件" class="headerlink" title="停止追踪某些文件"></a>停止追踪某些文件</h2><p>如果文件已经被git追踪，不想在后面的开发中提交这些文件的修改，这里有两个方案：</p>
<ol>
<li>删除文件以后再加到.gitignore 中，这种方案会使得原来那个可能有用的文件就丢失了。</li>
<li>使用<code>git update-index --assume-unchanged [filename]</code> 来忽略某些文件的修改, 这种修改只能再本地起作用，当别人使用这个项目的时候并不会起作用。</li>
<li>使用<code>git rm --cached filename</code>把文件从暂存里移除掉，之后的修改就不会追踪这些文件了。这种方案能够同步到远程，但是别人在拉取你的更新时也要消除对这些文件的追踪。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时在使用Git的时候，大多会有这种情况：因为在初始化git的时候没有考虑周全导致有些不需要的文件已经被被追踪，或者想不让在某次提交以后一些文件不被追踪（比如说一些涉及隐私的配置文件）。这里提供一些解决方案&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Git" scheme="https://www.liuin.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux中搭建FTP文件服务器</title>
    <link href="https://www.liuin.cn/2017/11/12/Linux%E4%B8%AD%E6%90%AD%E5%BB%BAFTP%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.liuin.cn/2017/11/12/Linux中搭建FTP文件服务器/</id>
    <published>2017-11-12T14:32:33.000Z</published>
    <updated>2017-12-04T14:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章对在Linux中使用VSFTPD部署FTP文件服务器做了一个简单的介绍。<br>使用的是VSFTPD，vsftpd 是“very secure FTP damon”的缩写，vsftpd的一个最大的特点是它的安全性。</p>
<a id="more"></a>
<h2 id="安装并启动FTP服务器"><a href="#安装并启动FTP服务器" class="headerlink" title="安装并启动FTP服务器"></a>安装并启动FTP服务器</h2><h3 id="安装VSFTPD"><a href="#安装VSFTPD" class="headerlink" title="安装VSFTPD"></a>安装VSFTPD</h3><p>使用 <code>apt-get</code> 安装 vsftpd：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vsftpd -y</div></pre></td></tr></table></figure></p>
<p><code>-y</code> 参数表示对所有问题用yes来回答</p>
<h3 id="启动VSFTPD"><a href="#启动VSFTPD" class="headerlink" title="启动VSFTPD"></a>启动VSFTPD</h3><p>安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经监听了 21 端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netstat -nltp | grep 21</div></pre></td></tr></table></figure></p>
<p>如果没有启动，可以手动开启 VSFTPD 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start vsftpd.service</div></pre></td></tr></table></figure></p>
<h2 id="配置用户访问目录"><a href="#配置用户访问目录" class="headerlink" title="配置用户访问目录"></a>配置用户访问目录</h2><h3 id="新建用户主目录"><a href="#新建用户主目录" class="headerlink" title="新建用户主目录"></a>新建用户主目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/uftp</div></pre></td></tr></table></figure>
<p>创建登录欢迎文件用来测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo touch /home/uftp/welcome.txt</div></pre></td></tr></table></figure></p>
<h3 id="新建用户-uftp-并设置密码"><a href="#新建用户-uftp-并设置密码" class="headerlink" title="新建用户 uftp 并设置密码"></a>新建用户 uftp 并设置密码</h3><p>创建一个用户 uftp :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd -d /home/uftp -s /bin/bash uftp</div></pre></td></tr></table></figure></p>
<p>为用户 uftp 设置密码 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd uftp</div></pre></td></tr></table></figure></p>
<p>删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /etc/pam.d/vsftpd</div></pre></td></tr></table></figure></p>
<h3 id="限制该用户仅能通过-FTP-访问"><a href="#限制该用户仅能通过-FTP-访问" class="headerlink" title="限制该用户仅能通过 FTP 访问"></a>限制该用户仅能通过 FTP 访问</h3><p>限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -s /sbin/nologin uftp</div></pre></td></tr></table></figure></p>
<h3 id="修改-vsftpd-配置"><a href="#修改-vsftpd-配置" class="headerlink" title="修改 vsftpd 配置"></a>修改 vsftpd 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a+w /etc/vsftpd.conf</div></pre></td></tr></table></figure>
<p>修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 限制用户对主目录以外目录访问</div><div class="line">chroot_local_user=YES</div><div class="line"></div><div class="line"># 指定一个 userlist 存放允许访问 ftp 的用户列表</div><div class="line">userlist_deny=NO</div><div class="line">userlist_enable=YES</div><div class="line"></div><div class="line"># 记录允许访问 ftp 用户列表</div><div class="line">userlist_file=/etc/vsftpd.user_list</div><div class="line"></div><div class="line"># 不配置可能导致莫名的530问题</div><div class="line">seccomp_sandbox=NO</div><div class="line"></div><div class="line"># 允许文件上传</div><div class="line">write_enable=YES</div><div class="line"></div><div class="line"># 使用utf8编码</div><div class="line">utf8_filesystem=YES</div></pre></td></tr></table></figure></p>
<p>新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo touch /etc/vsftpd.user_list</div><div class="line">sudo chmod a+w /etc/vsftpd.user_list</div></pre></td></tr></table></figure></p>
<p>修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uftp</div></pre></td></tr></table></figure>
<h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><p>设置主目录访问权限（只读）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a-w /home/uftp</div></pre></td></tr></table></figure></p>
<p>新建公共目录，并设置权限（读写）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</div></pre></td></tr></table></figure></p>
<p>重启vsftpd 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart vsftpd.service</div></pre></td></tr></table></figure></p>
<p>也可以多创建几个用户来实现对主目录的不同读写权限的管理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章对在Linux中使用VSFTPD部署FTP文件服务器做了一个简单的介绍。&lt;br&gt;使用的是VSFTPD，vsftpd 是“very secure FTP damon”的缩写，vsftpd的一个最大的特点是它的安全性。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 结构解析</title>
    <link href="https://www.liuin.cn/2017/11/09/Hexo-%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.liuin.cn/2017/11/09/Hexo-结构解析/</id>
    <published>2017-11-09T08:19:57.000Z</published>
    <updated>2017-11-24T17:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>对Hexo 的配置文件夹进行分析。</p>
<a id="more"></a>
<h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><p>在hexo的主目录下有一下文件和文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">├── _config.yml	    #站点配置文件</div><div class="line">├── db.json            #缓存文件</div><div class="line">├── debug.log       #hexo s --debug 产生的日志文件</div><div class="line">├── node_modules    #nodejs 本地包</div><div class="line">├── package.json    #nodejs 本地配置信息</div><div class="line">├── public               #生成的静态文件所在的文件夹</div><div class="line">├── scaffolds          #新生成page的模板</div><div class="line">├── source             #文章所在文件夹</div><div class="line">└── themes           #主题所在文件夹</div><div class="line"></div><div class="line">5 directories, 4 files</div></pre></td></tr></table></figure></p>
<h2 id="主题文件结构"><a href="#主题文件结构" class="headerlink" title="主题文件结构"></a>主题文件结构</h2><p>一个主题的大致结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml   # 主题配置文件</div><div class="line">├── languages     #语言文件夹</div><div class="line">├── layout            # 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式</div><div class="line">├── scripts        # 脚本文件夹</div><div class="line">└── source       # 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。</div></pre></td></tr></table></figure></p>
<h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式。Hexo 默认使用的Swig模板引擎。使用语法和Jinja2、Django模板引擎类似。</p>
<p>文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。</p>
<p>每个模板都默认使用 layout 布局，实际对应的文件是_layout.swig 文件。下面是各个页面所对应的模板的名称：</p>
<table>
<thead>
<tr>
<th>模板</th>
<th>用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>首页</td>
</tr>
<tr>
<td>post</td>
<td>文章</td>
<td>index</td>
</tr>
<tr>
<td>page</td>
<td>分页</td>
<td>index</td>
</tr>
<tr>
<td>archive</td>
<td>归档</td>
<td>index</td>
</tr>
<tr>
<td>category</td>
<td>分类归档</td>
<td>archive</td>
</tr>
<tr>
<td>tag</td>
<td>标签归档</td>
<td>archive</td>
</tr>
</tbody>
</table>
<p>局部模版（Partial）<br>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。</p>
<h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>只需要把 JavaScript 文件放到 scripts 文件夹，在启动时就会自动载入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Hexo 的配置文件夹进行分析。&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="https://www.liuin.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux cd后追加ls</title>
    <link href="https://www.liuin.cn/2017/11/04/Linux-cd%E5%90%8E%E8%BF%BD%E5%8A%A0ls/"/>
    <id>https://www.liuin.cn/2017/11/04/Linux-cd后追加ls/</id>
    <published>2017-11-04T11:15:10.000Z</published>
    <updated>2017-11-23T11:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道你们在使用命令行的时候有没有这种体验：就是每次到一个新的目录下就会追加一个命令ls看看该目录下面有什么。这里提供一个在cd后自动追加ls的解决方案。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>查看了一下经常使用的电脑的输入指令统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1	740  33.3634%    ls</div><div class="line">2	372  16.7719%    cd</div><div class="line">3	273  12.3084%    git</div><div class="line">4	177  7.98016%    vim</div></pre></td></tr></table></figure></p>
<p>发现排在前两位的是ls和cd，而且每次cd以后必然会ls一次。所以何必不把这两个东西合在一起呢。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在环境变量的配置文件（.zshrc或者.bashrc）中加入一小段脚本即可:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">cdl</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> [ -n <span class="variable">$1</span> ] ; <span class="keyword">then</span></div><div class="line">		<span class="built_in">cd</span> <span class="variable">$1</span></div><div class="line">		ls</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">cd</span></div><div class="line">		ls</div><div class="line">	<span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> <span class="built_in">cd</span>=cdl</div></pre></td></tr></table></figure></p>
<p>这段脚本应该都看得懂吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道你们在使用命令行的时候有没有这种体验：就是每次到一个新的目录下就会追加一个命令ls看看该目录下面有什么。这里提供一个在cd后自动追加ls的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Bandit 通关题解</title>
    <link href="https://www.liuin.cn/2017/11/01/Bandit-%E9%80%9A%E5%85%B3%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.liuin.cn/2017/11/01/Bandit-通关题解/</id>
    <published>2017-11-01T14:20:54.000Z</published>
    <updated>2017-11-24T07:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bandit 是一个适合学习Linux指令的游戏吧，规则是每一关利用提供的hostname:port和上一关的password（第一关提供password）通过ssh进入到给定的环境中，按照题目要求拿到指定的Key作为下一关的password。挺好玩的，目前尚未通关，在此挖个坑</p>
<a id="more"></a>
<p>网址：<a href="http://overthewire.org/wargames/bandit/" target="_blank" rel="external">http://overthewire.org/wargames/bandit/</a></p>
<p>通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh bandit0@bandit.labs.overthewire.org -p 2220</div></pre></td></tr></table></figure></p>
<p>开玩吧！</p>
<h2 id="Level-0-→-Level-1"><a href="#Level-0-→-Level-1" class="headerlink" title="Level 0 → Level 1"></a>Level 0 → Level 1</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat readme</div></pre></td></tr></table></figure>
<h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>boJ9jbbUNNfktd78OOpsqOltutMc3MY1</p>
<h2 id="Level-1-→-Level-2"><a href="#Level-1-→-Level-2" class="headerlink" title="Level 1 → Level 2"></a>Level 1 → Level 2</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>在Linux中含有特殊字符的文件名可能和shell的一些语法向冲突，比如这一道题目中的“-”，shell就认定其之后的内容为参数。所以我们要通过./-表示文件来消除这种歧义。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ./-</div></pre></td></tr></table></figure>
<h3 id="Key-1"><a href="#Key-1" class="headerlink" title="Key"></a>Key</h3><p>CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</p>
<h2 id="Level-2-→-Level-3"><a href="#Level-2-→-Level-3" class="headerlink" title="Level 2 → Level 3"></a>Level 2 → Level 3</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>文件名中含有空格可以用反斜杠+空格表示</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat spaces\ in\ this\ filename</div></pre></td></tr></table></figure>
<h3 id="Key-2"><a href="#Key-2" class="headerlink" title="Key"></a>Key</h3><p>UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</p>
<h2 id="Level-3-→-Level-4"><a href="#Level-3-→-Level-4" class="headerlink" title="Level 3 → Level 4"></a>Level 3 → Level 4</h2><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat inhere/.inhere</div></pre></td></tr></table></figure>
<h3 id="Key-3"><a href="#Key-3" class="headerlink" title="Key"></a>Key</h3><p>pIwrPrtPN36QITSp3EQaw936yaFoFgAB</p>
<h2 id="Level-4-→-Level-5"><a href="#Level-4-→-Level-5" class="headerlink" title="Level 4 → Level 5"></a>Level 4 → Level 5</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>通过file 列出文件属性来查看那些文件是ASCII编码（人类可读的）</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cd inhere/</div><div class="line">file ./*</div><div class="line"></div><div class="line">./-file00: data</div><div class="line">./-file01: data</div><div class="line">./-file02: data</div><div class="line">./-file03: data</div><div class="line">./-file04: data</div><div class="line">./-file05: data</div><div class="line">./-file06: data</div><div class="line">./-file07: ASCII text</div><div class="line">./-file08: data</div><div class="line">./-file09: data</div><div class="line"></div><div class="line">cat ./-file07</div></pre></td></tr></table></figure>
<h3 id="Key-4"><a href="#Key-4" class="headerlink" title="Key"></a>Key</h3><p>koReBOKuIDDepwhWk7jZC0RTdopnAYKh</p>
<h2 id="Level-5-→-Level-6"><a href="#Level-5-→-Level-6" class="headerlink" title="Level 5 → Level 6"></a>Level 5 → Level 6</h2><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>和上一题一样通过文件属性进行查找，用到find指令，只需要通过文件大小就能够确定文件位置了</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd inhere/</div><div class="line">find . -size 1033c</div><div class="line"></div><div class="line">./maybehere07/.file2</div><div class="line"></div><div class="line">cat ./maybehere07/.file2</div></pre></td></tr></table></figure>
<h3 id="Key-5"><a href="#Key-5" class="headerlink" title="Key"></a>Key</h3><p>DXjZPULLxYr17uwoI01bNLQbtFemEgo7</p>
<h2 id="Level-6-→-Level-7"><a href="#Level-6-→-Level-7" class="headerlink" title="Level 6 → Level 7"></a>Level 6 → Level 7</h2><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>考察使用find指令查找文件，用到了-user、-group、-size参数。同时使用 /dev/null 来过滤多余的错误信息</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</div><div class="line"></div><div class="line">cat /var/lib/dpkg/info/bandit7.password</div></pre></td></tr></table></figure>
<h3 id="Key-6"><a href="#Key-6" class="headerlink" title="Key"></a>Key</h3><p>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</p>
<h2 id="Level-7-→-Level-8"><a href="#Level-7-→-Level-8" class="headerlink" title="Level 7 → Level 8"></a>Level 7 → Level 8</h2><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>使用grep指令在文件中查找指定字符串</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep millionth ./data.txt</div></pre></td></tr></table></figure>
<h3 id="Key-7"><a href="#Key-7" class="headerlink" title="Key"></a>Key</h3><p>cvX2JJa4CFALtqS87jk27qwqGhBM9plV</p>
<h2 id="Level-8-→-Level-9"><a href="#Level-8-→-Level-9" class="headerlink" title="Level 8 → Level 9"></a>Level 8 → Level 9</h2><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>uniq 指令能够找出文件中相邻的重复的或者不重复的行，key是所给的文件中只出现一次的行，所以要先进行排序，然后再用uniq找出不重复的行</p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort data.txt | uniq -u</div></pre></td></tr></table></figure>
<h3 id="Key-8"><a href="#Key-8" class="headerlink" title="Key"></a>Key</h3><p>UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</p>
<h2 id="Level-9-→-Level-10"><a href="#Level-9-→-Level-10" class="headerlink" title="Level 9 → Level 10"></a>Level 9 → Level 10</h2><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>strings 指令能够找出所给文件中可以打印的字符串，然后再使用grep查找key所在的位置</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings data.txt | grep ==</div></pre></td></tr></table></figure>
<h3 id="Key-9"><a href="#Key-9" class="headerlink" title="Key"></a>Key</h3><p>truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</p>
<h2 id="Level-10-→-Level-11"><a href="#Level-10-→-Level-11" class="headerlink" title="Level 10 → Level 11"></a>Level 10 → Level 11</h2><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>使用base64指令对以base64编码的文本进行解码</p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat data.txt | base64 --decode</div></pre></td></tr></table></figure>
<h3 id="Key-10"><a href="#Key-10" class="headerlink" title="Key"></a>Key</h3><p>IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</p>
<h2 id="Level-11-→-Level-12"><a href="#Level-11-→-Level-12" class="headerlink" title="Level 11 → Level 12"></a>Level 11 → Level 12</h2><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>所给的文本中的字符都被旋转了13个位置，所以我们使用tr命令将这些字符全部旋转回来</p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat data.txt | tr &apos;A-Za-z&apos; &apos;N-ZA-Mn-za-m&apos;</div></pre></td></tr></table></figure>
<h3 id="Key-11"><a href="#Key-11" class="headerlink" title="Key"></a>Key</h3><p>5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</p>
<h2 id="Level-12-→-Level-13"><a href="#Level-12-→-Level-13" class="headerlink" title="Level 12 → Level 13"></a>Level 12 → Level 13</h2><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>所给的文件是一个经过多重压缩以后的二进制文件，首先使用xxd指令将二进制文件进行反转。然后不断使用file指令得到文件信息再调用相应的解压缩指令进行解压缩。其中用到的压缩指令有：gzip、bzip2、tar </p>
<h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">xxd -r data.txt data2</div><div class="line">file data2</div><div class="line">data2: gzip compressed data, was &quot;data2.bin&quot;, from Unix, last modified: Thu Jun 6 13:59:44 2013, max compression</div><div class="line">mv data2 data.gz</div><div class="line">gzip -d data.gz</div><div class="line">file data</div><div class="line">data: bzip2 compressed data, block size = 900k</div><div class="line">bzip2 -d data</div><div class="line">bzip2: Can&apos;t guess original name for data -- using data.out</div><div class="line">file data.out</div><div class="line">data.out: gzip compressed data, was &quot;data4.bin&quot;, from Unix, last modified: Thu Jun 6 13:59:43 2013, max compression</div><div class="line">zcat data.out &gt; data3</div><div class="line">file data3</div><div class="line">data3: POSIX tar archive (GNU)</div><div class="line">tar -xvf data3</div><div class="line">data5.bin</div><div class="line">file data5.bin</div><div class="line">data5.bin: POSIX tar archive (GNU)</div><div class="line">tar -xvf data5.bin</div><div class="line">data6.bin</div><div class="line">file data6.bin</div><div class="line">bzip2 -d data6.bin</div><div class="line">bzip2: Can&apos;t guess original name for data6.bin -- using data6.bin.out</div><div class="line">file data6.bin.out</div><div class="line">data6.bin.out: POSIX tar archive (GNU)</div><div class="line">tar -xvf data6.bin.out</div><div class="line">data8.bin</div><div class="line">file data8.bin</div><div class="line">data8.bin: gzip compressed data, was &quot;data9.bin&quot;, from Unix, last modified: Thu Jun  6 13:59:43 2013, max compression</div><div class="line">zcat data8.bin &gt; data9.bin</div><div class="line">file data9.bin</div><div class="line">data9.bin: ASCII text</div><div class="line">cat data9.bin</div><div class="line">8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</div></pre></td></tr></table></figure>
<h3 id="Key-12"><a href="#Key-12" class="headerlink" title="Key"></a>Key</h3><p>8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</p>
<h2 id="Level-13-→-Level-14"><a href="#Level-13-→-Level-14" class="headerlink" title="Level 13 → Level 14"></a>Level 13 → Level 14</h2><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>给出的是bandit14的私钥，要求使用这个私钥登录bandit14获取Key，这里用到了ssh -i 指令</p>
<h3 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /etc/bandit_pass/bandit14</div><div class="line">ssh -i sshkey.private bandit14@localhost</div><div class="line">cat /etc/bandit_pass/bandit14</div></pre></td></tr></table></figure>
<h3 id="Key-13"><a href="#Key-13" class="headerlink" title="Key"></a>Key</h3><p>4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</p>
<p>#Bandit Level 14 → Level 15</p>
<h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h3><h3 id="Key-14"><a href="#Key-14" class="headerlink" title="Key"></a>Key</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bandit 是一个适合学习Linux指令的游戏吧，规则是每一关利用提供的hostname:port和上一关的password（第一关提供password）通过ssh进入到给定的环境中，按照题目要求拿到指定的Key作为下一关的password。挺好玩的，目前尚未通关，在此挖个坑&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux中 ps 配合 kill 的操作</title>
    <link href="https://www.liuin.cn/2017/10/25/Linux%E4%B8%AD-ps-%E9%85%8D%E5%90%88-kill-%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.liuin.cn/2017/10/25/Linux中-ps-配合-kill-的操作/</id>
    <published>2017-10-25T05:03:26.000Z</published>
    <updated>2017-11-27T20:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候我们想要关掉一些程序的一系列进程，又不想一个一个通过ps找到pid，再一个一个kill这些进程，这个时候用ps配合kill就是最好的选择了。</p>
<a id="more"></a>
<h2 id="使用到的命令"><a href="#使用到的命令" class="headerlink" title="使用到的命令"></a>使用到的命令</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>ps(process status)命令用来列出系统中当前运行的那些进程。常常使用的形式有：</p>
<ul>
<li>ps aux 列出目前所有的正在内存当中的程序</li>
<li>ps -ef 显示所有进程信息，连同命令行<br><a href="http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html" target="_blank" rel="external">更多参考</a>]</li>
</ul>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>kill 命令能够发送指定的信号到相应进程。</p>
<p>命令参数如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-l</td>
<td>信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</td>
</tr>
<tr>
<td style="text-align:center">-a</td>
<td>当处理当前进程时，不限制命令名和进程号的对应关系</td>
</tr>
<tr>
<td style="text-align:center">-p</td>
<td>指定kill 命令只打印相关进程的进程号，而不发送任何信号</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td>指定发送信号</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td>指定用户</td>
</tr>
</tbody>
</table>
<p>使用参数-s 指定发送信号。如果要无条件终止进程，就要发送第九种信号SIGKILL。以下是常用的信号：</p>
<table>
<thead>
<tr>
<th>信号</th>
<th>表示</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>HUP</td>
<td>1</td>
<td>终端断线</td>
</tr>
<tr>
<td>INT</td>
<td>2</td>
<td>中断（同 Ctrl + C）</td>
</tr>
<tr>
<td>QUIT</td>
<td>3</td>
<td>退出（同 Ctrl + \）</td>
</tr>
<tr>
<td>TERM</td>
<td>15</td>
<td>终止</td>
</tr>
<tr>
<td>KILL</td>
<td>9</td>
<td>强制终止</td>
</tr>
<tr>
<td>CONT</td>
<td>18</td>
<td>继续（与STOP相反， fg/bg命令）</td>
</tr>
<tr>
<td>STOP</td>
<td>19</td>
<td>暂停（同 Ctrl + Z）</td>
</tr>
</tbody>
</table>
<p><a href="http://www.cnblogs.com/peida/archive/2012/12/20/2825837.html" target="_blank" rel="external">更多参考</a></p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>grep 是一种强大的文本搜索工具。grep 也是一个管道命令，接受standard output 作为查找的文本。不作为管道命令的时候后面接文件名作为参数。</p>
<h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h3><p>pgrep程序检查在系统的中活动进程，报告进程属性匹配命令行上指定条件的进程的ID。相当于命令 ps aux | grep XXX<br><a href="http://www.ha97.com/2523.html" target="_blank" rel="external">更多参考</a></p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep chrome | grep -v grep | cut -c 10-14 | xargs kill -s 9</div></pre></td></tr></table></figure>
<ul>
<li>” grep chrome “输出所有含有关键字“chrome”的进程信息</li>
<li>” grep -v grep “ 除去含有关键字”grep“的进程信息，因为grep会产生一个进程里面含有 chrome 关键字</li>
<li>” cut -c 10-14 “ 截取输入行的第9个字符到第15个字符，而这正好是进程号PID</li>
<li>” xargs kill -s 9 “ 终止相关进程</li>
</ul>
<h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep chrome | awk &apos;&#123;print $2&#125;&apos; | xargs kill -9</div></pre></td></tr></table></figure>
<ul>
<li>“awk ‘awk{ print $2 }’ “使用awk 代替cut ，不用一个一个数PID在什么位置</li>
</ul>
<h3 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgrep chrome | xargs kill -s 9</div></pre></td></tr></table></figure>
<ul>
<li>” pgrep chrome “列出含有关键字”chrome“的相关进程</li>
<li>” xargs kill -s 9 “ 终止相关进程</li>
</ul>
<h3 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall -9 chrome</div></pre></td></tr></table></figure>
<ul>
<li>终止进程名为chrome的进程，注意要给进程的全名</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候我们想要关掉一些程序的一系列进程，又不想一个一个通过ps找到pid，再一个一个kill这些进程，这个时候用ps配合kill就是最好的选择了。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>花莲之旅</title>
    <link href="https://www.liuin.cn/2017/10/20/%E8%8A%B1%E8%8E%B2%E4%B9%8B%E6%97%85/"/>
    <id>https://www.liuin.cn/2017/10/20/花莲之旅/</id>
    <published>2017-10-20T03:53:53.000Z</published>
    <updated>2017-11-01T04:09:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离从花莲回来差不多有一个星期了，心态也逐渐调整过来了，现在也能够静下心来记录这一路的所见所想。花莲的确是一座非常美的城市，一座有故事的城市。<br><a id="more"></a></p>
<h2 id="行程规划"><a href="#行程规划" class="headerlink" title="行程规划"></a>行程规划</h2><p>我们行程是安排在台湾这边的联假（就是台湾这边的国庆），所以火车票和民宿都非常紧张。我们没有买到火车坐票，最后只能够采用买客运和铁路的联票到花莲（坐客运到罗东，再坐区间车到花莲）。车程还算比较长，总共四天假可能我们花在路上的时间就占了大半天吧。到花莲基本上是订民宿，这边的民宿做得口碑都比较好，大部分民宿都是来了以后都会推荐给朋友来的那种（事实证明我们住的民宿也是）。<br>我们大致的行程安排是第一天在花东纵谷线上玩鲤鱼潭和复兴糖厂，第二天清水断崖-太鲁阁-七星潭，第三天滑翔-几米公园，第四天兰阳博物馆+礁溪温泉公园。因为花莲这一带的景点都是分布在比较狭长的区域内，所以最好的交通工具就是包车出游。我们也是吃了这个亏，第一天下午在交通上面花了非常多的时间导致只玩了一个景点。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG13.jpeg" alt="enter description here" title="花连狭长的景点分布"></p>
<h2 id="鲤鱼潭"><a href="#鲤鱼潭" class="headerlink" title="鲤鱼潭"></a>鲤鱼潭</h2><p>从花莲火车站到鲤鱼潭大概二十多分钟的车程，我们去的时候天下着小雨，计程车行驶在盘旋的山路上别有一番意境。<br>“鲤鱼潭”的得名说法有二：一是因为侧边山岳形似鲤鱼，故山与湖同齐名为鲤鱼，有“鲤鱼山上有鲤鱼，鲤鱼潭里水中游。”俚语的称呼。另一种说法源于最早活动于此处的台湾原住民太鲁阁族，因为登至山顶往下看，潭的形状就像是一只刚捕获的鲤鱼在跳跃，所以以此名之。<br>鲤鱼潭周围的风光的确还不错，挺适合骑自行车慢慢玩的，但是天杀的我们去的那天下雨，没办法我们只能够等中间雨停的时候租条脚踏船玩完。<br>鲤鱼潭风光还是不错的，同行的一直在华北平原的小伙伴对这样的山还是蛮有好感的。但是对于我这种在雪峰山脉长大的孩子来说我还是觉得没有什么特色，不怎么推荐。<br>后面因为我们没有赶上公交车，多等了一个小时，到达复兴糖厂的时候差不多商家都打烊了，唯一一个能够玩的文物馆也已经关门了。不过在复兴糖厂吃到感觉有生以来最好吃的烤肠，烤肠里面有些许的酒味，还是挺满足的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG10.jpeg" alt="enter description here" title="鲤鱼潭"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG9.jpeg" alt="enter description here" title="鲤鱼潭潭面"></p>
<h2 id="超赞的民宿"><a href="#超赞的民宿" class="headerlink" title="超赞的民宿"></a>超赞的民宿</h2><p>在复兴糖厂完了一小会，我们就急忙赶到到复兴车站坐区间车去民宿了。其实之前对这个民宿有很大的期待的，因为介绍里说地址在海边而且有一间房是海景房。<br>来到民宿以后老板张阿姨很热情地接待我们，民宿老板之前是幼儿园的园长现在退休了。她给我们讲了他的民宿名字——花莲你来 的来历还有她同学为她的民宿写的歌。这个民宿其实是张阿姨为了能让她父亲更好地看海而建的，为了方便她父亲能够去顶楼看海还特别修建了电梯（整个房子只有7楼）。<br>进到房间以后感觉真的是超赞，装修非常精致，特别是阳台的装扮。整个阳台是面朝大海的，面积比较大，铺了草坪种了树，布置得很好。特别是阳台旁边的透明玻璃栏杆，刚看的时候给人的视觉冲击非常大。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG7.jpeg" alt="enter description here" title="从民宿看到的海边"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG8.jpeg" alt="enter description here" title="为民宿写的歌"></p>
<h2 id="清水断崖-太鲁阁-七星潭"><a href="#清水断崖-太鲁阁-七星潭" class="headerlink" title="清水断崖-太鲁阁-七星潭"></a>清水断崖-太鲁阁-七星潭</h2><p>第二天我们是包车前往太鲁阁那一片景点的，司机是一个叫阿靖的小伙，一路为我们讲解各个景点以及他们背后的故事。<br>清水断崖是来花莲必去的景点，台湾八景之一。一边是几近垂直、陡峭壁立的山壁，一遍是蓝蓝的大海，景色不要太美。不说了，上图吧。。。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG6.jpeg" alt="enter description here" title="清水断崖"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG5.jpeg" alt="enter description here" title="石头和狗"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG3.jpeg" alt="enter description here" title="太鲁阁"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG4.jpeg" alt="enter description here" title="七星潭的海-1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_WechatIMG2.jpeg" alt="enter description here" title="七星潭的海-2"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_1_%E6%9C%80%E5%90%8E%E6%9D%A5%E4%B8%80%E5%BC%A0%E8%83%8C%E5%BD%B1.jpeg" alt="enter description here" title="最后来一张背影"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离从花莲回来差不多有一个星期了，心态也逐渐调整过来了，现在也能够静下心来记录这一路的所见所想。花莲的确是一座非常美的城市，一座有故事的城市。&lt;br&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>十分九份一日游</title>
    <link href="https://www.liuin.cn/2017/09/25/%E5%8D%81%E5%88%86%E4%B9%9D%E4%BB%BD%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/09/25/十分九份一日游/</id>
    <published>2017-09-25T07:16:50.000Z</published>
    <updated>2017-09-25T07:17:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>还记得《那些年，我们一起追的女孩》里面柯景腾和沈佳宜一起走铁道，放天灯的场景吗？那里面的场景就是在十分附近拍摄的，第二周我选择来这里浪，顺便拜访旁边传说《千与千寻》的取景地——九份</p>
<a id="more"></a>
<h2 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h2><p>我们大致的行程是从台北车站随便坐一辆区间车能够到瑞芳，然后转平溪线到十分。在十分玩完十分瀑布和十分老街之后，坐平溪线回到瑞芳，然后再坐公交车去九份。<br>这也是我第一次体验台湾的火车，感受到这边的铁路跟大陆那边还是一些不同的： 这边有一种区间车，运营就像国内的地铁（车内长得也像地铁）。买票的时候只要选择起点站和终点站，然后进站以后可以随便上一辆区间车到达目的地。普通车的站票也是这样。<br>顺便吐槽一句：铁路订票系统做得太烂了，页面UI差就算了，还查不了余票，必须要把所有的信息输进去验证以后才能够得到订票失败的提示。。。</p>
<p>车内长得像地铁的区间车：</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0.jpg" alt="enter description here"></p>
<h2 id="十分老街"><a href="#十分老街" class="headerlink" title="十分老街"></a>十分老街</h2><p>从十分车站出来以后就是十分老街了，整个十分老街是在火车铁轨两旁，算是有一点特色。两边的店铺主要经营的是小吃、纪念品还有天灯。旁边有个静安吊桥，也有许多人在那拍照。铁轨上许多人在放天灯，不过大多数都是韩国人日本人。</p>
<p>十分车站</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-3.jpg" alt="enter description here"></p>
<p>放天灯的游客</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-1.jpg" alt="enter description here"></p>
<h2 id="十分瀑布"><a href="#十分瀑布" class="headerlink" title="十分瀑布"></a>十分瀑布</h2><p>十分老街不是很长，如果不吃什么东西的话，一会就逛完了。走到老街的尽头就可以看到有很多租电动车的店铺，主要提供给去十分瀑布的游客。价格不算贵，一般是一个小时一百新台币。<br>我们两人小分队也租了一辆小电动，说实话骑着电动在山间穿梭还是蛮爽的，就是距离能够再长一点就好了。从老街到瀑布只用了十分钟左右。<br>十分瀑布景色还行，旁边有一道彩虹。</p>
<p>十分瀑布</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-2.jpg" alt="enter description here"></p>
<h2 id="九份"><a href="#九份" class="headerlink" title="九份"></a>九份</h2><p>九份是一座坐落在台湾东北部的小城，三面环山，一面临海。整个小镇座落于山坡地上，也因此形成了独特的山坡和阶梯式建筑景观。早期因为开采金矿而闻名，后面慢慢没落。1990年代后，因电影《悲情城市》于九份取景，九份的独特旧式建筑、坡地及风情透过此片吸引国内外的注目，使得来九份的人越来越多。</p>
<p>依山而建的九份小城</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-4.jpg" alt="enter description here"></p>
<p>阿妹茶楼</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_25_QQ20170925-0-5.jpg" alt="enter description here"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得《那些年，我们一起追的女孩》里面柯景腾和沈佳宜一起走铁道，放天灯的场景吗？那里面的场景就是在十分附近拍摄的，第二周我选择来这里浪，顺便拜访旁边传说《千与千寻》的取景地——九份&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>打卡台北101</title>
    <link href="https://www.liuin.cn/2017/09/17/%E6%89%93%E5%8D%A1%E5%8F%B0%E5%8C%97101/"/>
    <id>https://www.liuin.cn/2017/09/17/打卡台北101/</id>
    <published>2017-09-17T06:55:38.000Z</published>
    <updated>2017-09-17T06:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>台北101是台湾的第一高楼，也曾经有五年多的时间是世界第一高楼，旁边紧邻着台北市政府。现在是世界第十高楼（七年时间从第一变成第十），也是很多有名的跨国公司（比如说Google）的在台湾地区的办公地。</p>
<a id="more"></a>
<h2 id="交通与门票"><a href="#交通与门票" class="headerlink" title="交通与门票"></a>交通与门票</h2><p>台北101大楼位于台北市信义区，紧邻台北市政府大楼，是台北市的新地标。离101比较近的捷运站有市政府站和101站，坐捷运到这两个捷运站去101都可以。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_1505628281374.jpg" alt="enter description here"></p>
<p>我的话因为是游玩完上一个景点才去的，远处看起来比较近，所以我和我的小伙伴就选择了脚踏车作为交通工具。因为101实在是太高了，看着不远，但是实际骑起来还真是有点距离的。</p>
<p>到达101脚下</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_QQ20170917-0.jpg" alt="到达101脚下"></p>
<p>上观景台参观的门票在5F卖，有两种：一种是全票600NTD；另外一种是优惠票540NTD，学生还有台湾地区的军警能够购买。我们买的是优惠票，使用支付宝支付，差不多花了120人民币。</p>
<h2 id="夕阳"><a href="#夕阳" class="headerlink" title="夕阳"></a>夕阳</h2><p>上面供游客玩的地方就三层：88F、89F和91F。88F展示的是全球第二大的开放游客观赏的巨型阻尼器；89F是一个环形的带玻璃的观景平台，还想着能够有那种伸出空中全是玻璃的刺激的地方，结果没有；91F是一个露天的观景平台，只不过只开放一小部分区域，还有特别高的栅栏。比较欣慰的是，栅栏的间隙不是很小，手可以伸出去拍照。</p>
<p>我们上去的时间是下午五点到五点半的场次，刚好是黄昏的时候，从观景平台俯瞰下面，有种玩天际线（模拟城市类的游戏）的既视感。感觉特别爽。</p>
<p>从101俯瞰台北</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG11.jpeg" alt="从101俯瞰台北"></p>
<p>101上的黄昏</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG12.jpeg" alt="101上的黄昏"></p>
<h2 id="夜景"><a href="#夜景" class="headerlink" title="夜景"></a>夜景</h2><p>本着不浪费这120门票的原则，我们硬是在上面待到了晚上。其实上面还是有很多东西可以逛的，纪念品商店有很多东西可以看看；有邮箱可以寄明信片。随便逛逛天就黑了。</p>
<p>晚上在101看到的又是另一番景色了，很赞。</p>
<p>俯瞰夜景（手机拍出来的效果实在是太差了，还是用同学的图吧）</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG2.jpeg" alt="enter description here"></p>
<h2 id="象山上看到的101"><a href="#象山上看到的101" class="headerlink" title="象山上看到的101"></a>象山上看到的101</h2><p>下来以后差不多是8点，感觉还早，就跑到旁边的象山区浪了，因为那里可以看到晚上的101外景。一开始一位晚上没什么人，结果上登山道的时候有点吃惊，原来这么多人都在晚上爬象山。</p>
<p>其实象山蛮大的，我们没有爬到山顶，只爬到了半山腰的一个摄影平台（一天奔波实在是有点累了）。</p>
<p>101外景（同学的图）</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_17_WechatIMG9.jpeg" alt="101外景"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;台北101是台湾的第一高楼，也曾经有五年多的时间是世界第一高楼，旁边紧邻着台北市政府。现在是世界第十高楼（七年时间从第一变成第十），也是很多有名的跨国公司（比如说Google）的在台湾地区的办公地。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>淡水 一日游</title>
    <link href="https://www.liuin.cn/2017/09/11/%E6%B7%A1%E6%B0%B4-%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/09/11/淡水-一日游/</id>
    <published>2017-09-11T12:03:46.000Z</published>
    <updated>2017-09-17T05:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>淡水是台湾北部比较有名的一个景点，被称为<a href="https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3%E5%85%AB%E6%99%AF" target="_blank" rel="external">台湾八景</a>。在历史上曾经是台湾第一大港，也是西方文明在台湾北部散播的起点。</p>
<a id="more"></a>
<h2 id="淡水老街"><a href="#淡水老街" class="headerlink" title="淡水老街"></a>淡水老街</h2><p>从淡水捷运站出来以后走不久就是淡水老街了，这里集美食、小吃、老街为一身，近年来更因不少古董店及民艺品店进驻，营造出更浓郁的民俗色彩与怀旧风味。邻近淡水捷运站，应该是游客到这里来必游的景点，人比较多。</p>
<p>在淡水老街上尝了一些小吃：鐵蛋、酸梅湯，鐵蛋很硬，酸梅汤很正宗</p>
<p>淡水街头</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0.jpg" alt=""></p>
<h2 id="阿给"><a href="#阿给" class="headerlink" title="阿给"></a>阿给</h2><p>阿给可以说是淡水最有名的小吃了。为什么叫“阿给”呢？其实它是日本语“油炸豆腐皮”的音译简称。阿给的做法是将油豆腐的中间挖空，然后填充炒过的冬粉（有些店家使用的是没有炒过的冬粉）、浸泡过卤汁，以鱼浆封口，加以蒸熟，食用前淋上甜辣酱或其他特殊酱汁。</p>
<p>我们逛到阿给的小吃店的时候刚好是中午午餐的时候，还是蛮好吃的，唯一不足的地方就是中午的气温有点高吃起来非常热。</p>
<p>网上的阿给图片</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_1024px-Agei.JPG" alt=""></p>
<h2 id="淡江中学"><a href="#淡江中学" class="headerlink" title="淡江中学"></a>淡江中学</h2><p>淡水中学中学是周杰伦还有前台湾地区领导人李登辉的母校，也因为周杰伦的《不能说的秘密》，而被众人所知（怪不得同行的女生听到淡水中学这么兴奋）。这所学校全名私立淡江高级中学，是台湾省比较著名的中学，已经有近100年的历史了。台湾这边公立的中学叫国民高中（国中），旁边的淡水国中就是的。门口贴着不允许参观的标志，但是可能是我们来的时候是周末，门卫放我们进去了。进去以后看到台湾这边的高三学生也补课（按理说他们读大学的压力比大陆小很多），看来高三逃脱不了补课的命运。</p>
<p>淡水中学历史比较久，所以里面的建筑还是很有特色的。</p>
<p>淡江高级中学埔顶钟声</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-1.jpg" alt=""></p>
<h2 id="真理大学"><a href="#真理大学" class="headerlink" title="真理大学"></a>真理大学</h2><p>真理大学为北部台湾基督长老教会所创办之大学，是一所历史渊远的私立大学。以“追求真理、爱与服务”为校务发展宗旨。源自1872年3月9日加拿大基督长老教会宣教师马偕登陆淡水，选定现址（今真理大学淡水校区）兴建校舍以作传道、教育及医疗之用。</p>
<p>校园里面游客比较多，建筑比较有特色的就是旁边的大礼拜堂。校园风景非常优美，建筑物主要以红色为主。刚进去的时候能够看到许多的鸽子，它们不怎么怕游客，可能是习惯了吧。也有很多游客给一些事物给他们吃。</p>
<p>真理大学大门</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-2.jpg" alt=""></p>
<h2 id="红毛城"><a href="#红毛城" class="headerlink" title="红毛城"></a>红毛城</h2><p>红毛城，西班牙人1692年建造，荷兰人打败西班牙人占领此城。为啥叫红毛城呢，以前咱管俄国人叫“老毛子、白毛”，称荷兰人为“红毛”，因此得名。里面的东西感觉也没什么特点就是一些那个时候办公用的东西。</p>
<p>不过这里要说的是台湾在景点上面对学生的优惠力度还是很大的，一般的景点只要你凭学生证就不要门票，在淡水两个景点要收费，小白宫和这个红毛城，一个地方80新台币，想想赚了160新台币心里还是美滋滋的。</p>
<p>红毛城照片</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-3.jpg" alt=""></p>
<h2 id="渔人码头-情人桥"><a href="#渔人码头-情人桥" class="headerlink" title="渔人码头/情人桥"></a>渔人码头/情人桥</h2><p>淡水的最后一个景点就是渔人码头了，位于淡水河出海口右岸。《命中注定我爱你》陈欣怡和纪存希生日那天，纪存希陪陈欣怡买船回姜母岛吃姜军包，纪念品号停靠那个码头哦，就是渔人码头，后面就是情人桥。</p>
<p>传说情人桥暗藏“玄机”，恋人来此，如果没有走过情人桥，可能很快就会分手，如果只走过了奇数，而不是偶数，也会分手。由于那天太阳比较大，所以情人桥也没有待太久，不然真的会被热化的。</p>
<p>情人桥（同学的照片）：</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_11_QQ20170911-0-4.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>淡水还是一个景色优美，有好吃的好玩的，能看海的好去处。趁手里还在台湾而且有学生证，赶紧多玩几个景点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;淡水是台湾北部比较有名的一个景点，被称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3%E5%85%AB%E6%99%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;台湾八景&lt;/a&gt;。在历史上曾经是台湾第一大港，也是西方文明在台湾北部散播的起点。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台湾，我来了</title>
    <link href="https://www.liuin.cn/2017/09/07/%E5%8F%B0%E6%B9%BE%EF%BC%8C%E6%88%91%E6%9D%A5%E4%BA%86/"/>
    <id>https://www.liuin.cn/2017/09/07/台湾，我来了/</id>
    <published>2017-09-07T08:46:33.000Z</published>
    <updated>2017-09-07T08:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>期待了许久，终于等到了去台湾的日子。9.5从上海出发，乘坐吉祥航空飞台北。正式开始我131天的台湾交换之旅。</p>
<a id="more"></a>
<h2 id="台湾初感受"><a href="#台湾初感受" class="headerlink" title="台湾初感受"></a>台湾初感受</h2><p>飞机刚降落，开了数据流量以后马上用Google 随便搜了点东西，直连谷歌，哈哈，肉身翻墙就是爽。<br>抵达桃园机场后，找到了台科大接机的同学把我们送到了台科大。然后我们就去找我们租房子的地方了，我们租房子的地方位于新北市，但是学校是在台北市，中间隔着一条河，坐公交应该是20分钟左右。看来在宣区从寝室到教室5分钟搞定的事情成了一种奢望。<br>在找租房子的地址的时候，感觉台湾各种小巷子太多了、红路灯太多了、机车太多了、便利店太多了。</p>
<p>从地图可以出道路基本上都是这种小巷子:</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_7_1504772211813.jpg" alt="从地图可以出道路基本上都是这种小巷子"></p>
<p>之前一直听说台湾这边的人非常热情，来到这里以后真的是深刻体会到了。在路上问路他们一定会说得非常详细，居委会的阿姨看到我们来了以后跟我们说了一大堆东西，这种感觉真好。</p>
<p>大陆和台湾的一些用词习惯是不一样的，比如我们的网络他们叫网路，计算机专业他们一般叫资讯工程。有几次去便利店买东西，店员听了我说的东西以后都是一脸懵逼，要我详细解释这个东西是用来干什么的，他们才清楚。看来还得慢慢适应。</p>
<h2 id="机车"><a href="#机车" class="headerlink" title="机车"></a>机车</h2><p>台湾这边的机车就是一般大陆说的摩托车，说真的这边的机车真的不要太多。过红绿灯的时候，机车引擎的声音那叫一个大呀，特别是在刚刚转绿灯的时候堪比赛车比赛开始的场面。</p>
<p>台湾的机车为什么这么多呢？原因应该是多方面的，人口多、道路窄是一个方面的原因。在台北，骑机车的大多是在市区周围上班族（就像我住的地方一样），把机车作为一种通勤工具，相比地铁公交的拥挤，开车要找车位开销大，骑机车成为了这些人的首选。当然还有一个更重要的原因就是台湾这边不禁摩，如果北上广深也不禁摩，可能机车的规模比台北还要多。</p>
<p>台湾街头的机车大军:</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_9_7_1504773955984.jpg" alt="台湾街头的机车大军"></p>
<h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><p>接下来希望自己能够好好把握好台湾交换的时间，博客中的台湾游记系列也要定时进行更新。加油吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;期待了许久，终于等到了去台湾的日子。9.5从上海出发，乘坐吉祥航空飞台北。正式开始我131天的台湾交换之旅。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm 使用技巧汇总</title>
    <link href="https://www.liuin.cn/2017/09/03/PyCharm-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/"/>
    <id>https://www.liuin.cn/2017/09/03/PyCharm-使用技巧汇总/</id>
    <published>2017-09-03T08:19:38.000Z</published>
    <updated>2017-11-27T19:29:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说的好，磨刀不误砍柴工，写代码也一样，在工具上面花的时间是非常值得的。对于Python语言的编程而言，Pycharm是一个非常好用的集成开发环境，虽然Vim能够做到轻巧，但是功能始终是做不到IDE那么强大，所以对于Python代码的编程后期还是主要以Pycharm为工具，今天在这里收集一些Pycharm的使用技巧，有一些来源于网上，有一些也来源本身Pycharm的教程。（以下技巧适用于macOS系统）</p>
<a id="more"></a>
<h2 id="教程中的快捷键"><a href="#教程中的快捷键" class="headerlink" title="教程中的快捷键"></a>教程中的快捷键</h2><ul>
<li>“⇧⌘O ”能够快速查找相关文件和类</li>
<li>Command+B 跳转到原码，看到里面的类和方法</li>
<li>Command+Option+L  一键实现PEP8规范</li>
<li>Command + Shift + O  查找文件、类和方法</li>
<li>Command + Option + Shift + [     光标放在函数的前面快速选中这个函数中的所有内容</li>
<li>Command + J   快速插入常用代码</li>
<li>Command + Shift + -    展开收缩你的代码块</li>
<li>Command+P  显示当前函数需要的参数</li>
<li>F1     可以调出光标处函数文档</li>
</ul>
<h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ul>
<li>能够在下面的状态栏中看到当前使用换行符情况（是”\r\n”  “\n”  还是”\r”），多选文件在File | Line Separators 中选择适当的换行符就可以切换了</li>
<li>在Preference -&gt; Editor -&gt; File and Code Template 中设置代码模板</li>
</ul>
<h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><p>鼠标放到当前导航处的文件名，然后右键 Split Vertically 或者 Split Horizontally 就可以啦<br><img src="https://data2.liuin.cn/story-writer/2017_11_28_11%E6%9C%88-28-2017%2003-26-43.gif" alt="enter description here" title="分屏操作"></p>
<h2 id="添加Vim插件"><a href="#添加Vim插件" class="headerlink" title="添加Vim插件"></a>添加Vim插件</h2><p>在偏好设置里面Plugins中添加新的Plugin插件，搜索IdeaVIm添加就可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;俗话说的好，磨刀不误砍柴工，写代码也一样，在工具上面花的时间是非常值得的。对于Python语言的编程而言，Pycharm是一个非常好用的集成开发环境，虽然Vim能够做到轻巧，但是功能始终是做不到IDE那么强大，所以对于Python代码的编程后期还是主要以Pycharm为工具，今天在这里收集一些Pycharm的使用技巧，有一些来源于网上，有一些也来源本身Pycharm的教程。（以下技巧适用于macOS系统）&lt;/p&gt;
    
    </summary>
    
      <category term="软件使用" scheme="https://www.liuin.cn/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="工具" scheme="https://www.liuin.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SQLAchemy 学习(2)</title>
    <link href="https://www.liuin.cn/2017/08/30/SQLAchemy-%E5%AD%A6%E4%B9%A0-2/"/>
    <id>https://www.liuin.cn/2017/08/30/SQLAchemy-学习-2/</id>
    <published>2017-08-30T08:12:19.000Z</published>
    <updated>2017-09-03T08:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一篇SQLAlchemy学习<br><a id="more"></a></p>
<h2 id="relationship"><a href="#relationship" class="headerlink" title="relationship"></a>relationship</h2><p>relationship函数是sqlalchemy对关系之间提供的一种便利的调用方式, backref参数则对关系提供反向引用的声明<br>通过relationship我们可以轻松在实现嵌套将一个实例的属性转换成另一个类的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addresses_from_user</span><span class="params">(user_name)</span>:</span></div><div class="line">    user = session.query(User).filter_by(name=user_name).first()</div><div class="line">    <span class="keyword">return</span> user.addresses   <span class="comment">#返回的是Adresses的一个对象</span></div></pre></td></tr></table></figure></p>
<p>back_populates参数和backref参数功能类似，只是前者提供单向的关系引用，且必须成对存在，但是完成的功能和backref是一样的</p>
<h2 id="定义1-1-1-n-m-n-关系"><a href="#定义1-1-1-n-m-n-关系" class="headerlink" title="定义1:1 1:n m:n 关系"></a>定义1:1 1:n m:n 关系</h2><h3 id="1-n"><a href="#1-n" class="headerlink" title="1:n"></a>1:n</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(<span class="string">"Child"</span>, back_populates=<span class="string">"parent"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</div><div class="line">    parent = relationship(<span class="string">"Parent"</span>, back_populates=<span class="string">"children"</span>)</div><div class="line">    <span class="comment"># 子表类中附加一个 relationship() 方法</span></div><div class="line">    <span class="comment"># 并且在(父)子表类的 relationship() 方法中使用 relationship.back_populates 参数</span></div></pre></td></tr></table></figure>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1:1"></a>1:1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    child = relationship(<span class="string">"Child"</span>, uselist=<span class="keyword">False</span>, back_populates=<span class="string">"parent"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</div><div class="line">    parent = relationship(<span class="string">"Parent"</span>, back_populates=<span class="string">"child"</span>)</div></pre></td></tr></table></figure>
<p>和1:n的不同在于，在父表上用uselist参数进行了限定</p>
<h3 id="m-n"><a href="#m-n" class="headerlink" title="m:n"></a>m:n</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">association_table = Table(<span class="string">'association'</span>, Base.metadata,</div><div class="line">    Column(<span class="string">'left_id'</span>, Integer, ForeignKey(<span class="string">'left.id'</span>)),</div><div class="line">    Column(<span class="string">'right_id'</span>, Integer, ForeignKey(<span class="string">'right.id'</span>))</div><div class="line">)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'left'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(</div><div class="line">        <span class="string">"Child"</span>,</div><div class="line">        secondary=association_table,</div><div class="line">        back_populates=<span class="string">"parents"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'right'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parents = relationship(</div><div class="line">        <span class="string">"Parent"</span>,</div><div class="line">        secondary=association_table,</div><div class="line">        back_populates=<span class="string">"children"</span>)</div></pre></td></tr></table></figure>
<h2 id="SQLAlchemy-数据表结构改变（数据迁移）方法"><a href="#SQLAlchemy-数据表结构改变（数据迁移）方法" class="headerlink" title="SQLAlchemy 数据表结构改变（数据迁移）方法"></a>SQLAlchemy 数据表结构改变（数据迁移）方法</h2><p>在使用Django的ORM的时候我们可以轻易地通过<strong>python manage.py makemigration </strong> 和 <strong> python manage.py migrate </strong>实现数据表结构的改变<br>但是在SQLAlchemy这个工具中似乎不支持数据迁移，所以在这里使用到一个另外一个库：SQLAlchemy-migrate<br>使用这个库我们可以分别写两个文件表示创建数据库的时候和修改数据库的时候：</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Base</div><div class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> engine</div><div class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</div><div class="line"></div><div class="line">Base.metadata.create_all(bind=engine)</div><div class="line"></div><div class="line"><span class="comment"># 创建表结构</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> (os.path.exists(sqlachemy_migrate_repo)):</div><div class="line">    api.create(sqlachemy_migrate_repo,<span class="string">'database repository'</span>)</div><div class="line">    api.version_control(postgresql_url,sqlachemy_migrate_repo)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    api.version_control(postgresql_url,sqlachemy_migrate_repo)</div></pre></td></tr></table></figure>
<h3 id="修改数据表的结构"><a href="#修改数据表的结构" class="headerlink" title="修改数据表的结构"></a>修改数据表的结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> migrate.versioning <span class="keyword">import</span> api</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> imp</div><div class="line"></div><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Base</div><div class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> engine</div><div class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</div><div class="line"></div><div class="line">Base.metadata.create_all(bind=engine)</div><div class="line"></div><div class="line"><span class="comment"># 迁移表结构</span></div><div class="line">migration = sqlachemy_migrate_repo + <span class="string">'/versions/%03d_migration.py'</span> % (api.db_version(postgresql_url, sqlachemy_migrate_repo) + <span class="number">1</span>)</div><div class="line">tmp_module = imp.new_module(<span class="string">'old_model'</span>)</div><div class="line">old_model = api.create_model(postgresql_url, sqlachemy_migrate_repo)</div><div class="line">exec(old_model, tmp_module.__dict__)</div><div class="line">script = api.make_update_script_for_model(postgresql_url, sqlachemy_migrate_repo, tmp_module.meta, Base.metadata)</div><div class="line">open(migration, <span class="string">'wt'</span>).write(script)</div><div class="line">api.upgrade(postgresql_url, sqlachemy_migrate_repo)</div><div class="line"></div><div class="line">print(<span class="string">'New migration saved as '</span> + migration)</div><div class="line">print(<span class="string">'Current database version: '</span> + str(api.db_version(postgresql_url, sqlachemy_migrate_repo)))</div></pre></td></tr></table></figure>
<p>但是当修改的东西过多的时候，这个时候会报错</p>
<h2 id="Django-中get-or-create-方法的实现"><a href="#Django-中get-or-create-方法的实现" class="headerlink" title="Django 中get_or_create 方法的实现"></a>Django 中get_or_create 方法的实现</h2><p>和上面一样在SQLAlchemy中也不存在非常方便的get_or_create的方法，用的比较多的时候，应该有必要重新写一下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_or_create</span><span class="params">(session, model, defaults=None, **kwargs)</span>:</span></div><div class="line">    instance = session.query(model).filter_by(**kwargs).first()</div><div class="line">    <span class="keyword">if</span> instance:</div><div class="line">        <span class="keyword">return</span> instance, <span class="keyword">False</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        params = dict((k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.iteritems() <span class="keyword">if</span> <span class="keyword">not</span> isinstance(v, ClauseElement))</div><div class="line">        params.update(defaults <span class="keyword">or</span> &#123;&#125;)</div><div class="line">        instance = model(**params)</div><div class="line">        session.add(instance)</div><div class="line">        <span class="keyword">return</span> instance, <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://codeday.me/bug/20170612/24948.html" target="_blank" rel="external">https://codeday.me/bug/20170612/24948.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上一篇SQLAlchemy学习&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.liuin.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.liuin.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQLAchemy 学习(1)</title>
    <link href="https://www.liuin.cn/2017/08/17/SQLAchemy-%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://www.liuin.cn/2017/08/17/SQLAchemy-学习-1/</id>
    <published>2017-08-17T08:04:48.000Z</published>
    <updated>2017-09-03T08:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>SQLAchemy 是Python操纵数据库的一个常用的第三方ORM框架，我将通过几篇文章总结一下对SQLAlchemy的学习。</p>
<a id="more"></a>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM全称是Object-relational mapping，他将关系数据库中表中的记录映射成为对象，以对象的形式展现，程序员可以把对数据库的操作转化为对对象的操作。<br>它的作用是在关系型数据库和业务实体对象之间作一个映射，这样，我们在具体的操作业务对象的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了。<br>因此ORM的目的是为了方便开发人员以面向对象的思想来实现对数据库的操作。</p>
<p>python中最流行的ORM库就是SQLAlchemy</p>
<h2 id="SQLAchemy-架构"><a href="#SQLAchemy-架构" class="headerlink" title="SQLAchemy 架构"></a>SQLAchemy 架构</h2><p>SQLAcheemy两个层次的关系图<br><img src="https://data2.liuin.cn/story-writer/2017_7_27_1501156105658.jpg" alt=""><br>SQLAchemy方言系统核心类的关系图<br><img src="https://data2.liuin.cn/story-writer/2017_7_27_1501156198516.jpg" alt=""></p>
<h2 id="Connecting"><a href="#Connecting" class="headerlink" title="Connecting"></a>Connecting</h2><p>通过create_engine()方法创建一个Engine对象实现连接：<code>engine = create_engine(&quot;mysql://scott:tiger@hostname/dbname&quot;,encoding=&#39;latin1&#39;, echo=True)</code><br>数据库URL的格式为：dialect[+driver]://user:password@host/dbname[?key=value..]，其中dialect为使用的数据库名字，driver为驱动器（比如说mysql的pymysql或者psycopg2）</p>
<h2 id="Declare-a-Mapping（声明映射）"><a href="#Declare-a-Mapping（声明映射）" class="headerlink" title="Declare a Mapping（声明映射）"></a>Declare a Mapping（声明映射）</h2><p>我们要定义关系类的时候要依据一个基类，这个基类是维系类和数据表关系的目录，我们使用<strong>declarative_base()</strong>函数创建基类，<br>如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Base = declarative_base()</div></pre></td></tr></table></figure></p>
<p>后面所有定义的映射的类将继承这个类进行创建</p>
<h2 id="Create-a-Schema（创建模式）"><a href="#Create-a-Schema（创建模式）" class="headerlink" title="Create a Schema（创建模式）"></a>Create a Schema（创建模式）</h2><p>我们可以通过定义映射类类来创建相关的模式（ORM的特点），比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = Column(Integer, Sequence(<span class="string">'user_id_seq'</span>), primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">50</span>))</div><div class="line">    fullname = Column(String(<span class="number">50</span>))</div><div class="line">    password = Column(String(<span class="number">12</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name='%s', fullname='%s', password='%s')&gt;"</span> % (</div><div class="line">                                self.name, self.fullname, self.password)</div></pre></td></tr></table></figure></p>
<h2 id="Create-an-Instance-of-the-Mapped-Class"><a href="#Create-an-Instance-of-the-Mapped-Class" class="headerlink" title="Create an Instance of the Mapped Class"></a>Create an Instance of the Mapped Class</h2><p>实例化一个映射类，同样也支持使用<strong><strong>init</strong>()</strong>方法进行构造<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user = User(name=<span class="string">'ed'</span>, fullname=<span class="string">'Ed Jones'</span>, password=<span class="string">'edspassword'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user.name</div><div class="line"><span class="string">'ed'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user.password</div><div class="line"><span class="string">'edspassword'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(ed_user.id)</div><div class="line"><span class="string">'None'</span></div></pre></td></tr></table></figure></p>
<h2 id="Adding-and-Updating-Objects"><a href="#Adding-and-Updating-Objects" class="headerlink" title="Adding and Updating Objects"></a>Adding and Updating Objects</h2><p>通过Session和数据库进行对话，通过<strong>sessionmaker()</strong> 利用之前创建的Engine上创建一个会话类，每次进行修改的时候都要由这个类生成一个实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Session = sessionmaker(bind=engine)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session = Session()</div></pre></td></tr></table></figure></p>
<p>我们对对象进行修改以后，通过创建的这个session实例对象来进行提交<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user = User(name=<span class="string">'ed'</span>, fullname=<span class="string">'Ed Jones'</span>, password=<span class="string">'edspassword'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(ed_user)</div></pre></td></tr></table></figure></p>
<h2 id="Querying"><a href="#Querying" class="headerlink" title="Querying"></a>Querying</h2><p>Query通过Session中的query()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</div><div class="line"><span class="meta">... </span>    print(instance.name, instance.fullname)</div><div class="line">ed Ed Jones</div><div class="line">wendy Wendy Williams</div><div class="line">mary Mary Contrary</div><div class="line">fred Fred Flinstone</div></pre></td></tr></table></figure></p>
<p>Query提供多种筛选filter操作，在数据库中的相关基本运算</p>
<h2 id="常用的一些方法"><a href="#常用的一些方法" class="headerlink" title="常用的一些方法"></a>常用的一些方法</h2><ul>
<li>Base.metadata.create_all(engine) 常用于正常使用的时候创建表，自动建立表结构。优点是省时；缺点是风险高，只有在内测环境且数据量已经备份的前提下方可使用。是一种修改表结构的方法，但是风险比较高。还可以使用其他的库（如openstack/sqlalchemy-migrate)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQLAchemy 是Python操纵数据库的一个常用的第三方ORM框架，我将通过几篇文章总结一下对SQLAlchemy的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.liuin.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.liuin.cn/tags/python/"/>
    
  </entry>
  
</feed>
