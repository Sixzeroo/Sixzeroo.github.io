<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sixzeroo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.liuin.cn/"/>
  <updated>2018-01-09T13:18:47.000Z</updated>
  <id>https://www.liuin.cn/</id>
  
  <author>
    <name>Sixzeroo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日月潭游记</title>
    <link href="https://www.liuin.cn/2017/12/27/%E6%97%A5%E6%9C%88%E6%BD%AD%E6%B8%B8%E8%AE%B0/"/>
    <id>https://www.liuin.cn/2017/12/27/日月潭游记/</id>
    <published>2017-12-27T10:16:45.000Z</published>
    <updated>2018-01-09T13:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>湾湾交换期间最后一次南下浪。见识了有生以来见过的最美的曙光，骑了体验超赞的环湖自行车线路。日月潭，我还会再来的！</p>
<a id="more"></a>
<h2 id="乘船游湖"><a href="#乘船游湖" class="headerlink" title="乘船游湖"></a>乘船游湖</h2><p>来了日月潭想必都会坐这边的游艇在湖面上逛一逛。这里有很多家游船的公司，价格也不是很贵，每个人150TWD就能够拿下。乘船游湖主要就会游玩三个景点：水社码头、玄光寺、依达邵码头。那个玄光寺就是曾经供奉玄奘部分顶骨的地方。<br>湖面上的景色一般，主要还是游客比较多，湖面上的船非常多，显得很杂乱。坐船在这三个景点之间绕一圈应该两个小时能够搞定。会看到很多大陆来的旅行团。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG2.jpeg" alt="enter description here" title="打卡图片"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG1.jpeg" alt="enter description here" title="风景还不错"></p>
<h2 id="民宿"><a href="#民宿" class="headerlink" title="民宿"></a>民宿</h2><p>为了省钱，这次选的民宿离日月潭有点远，大概有20km距离的水里乡。第一天坐公交去坐了半个小时，接待我们的是一个和蔼的老爷爷，一整栋房子都只有这个老爷爷在照看（想想也觉得挺孤单的），而Airbnb上住宿信息的发布是他女儿弄的。水里乡这里应该真的是台湾这边乡下的代表了，街道上就火车站周围人比较多（火车站里面一天只通过五六趟火车），其他地方基本上很少有人。711便利店也只有一家，在火车站旁边。</p>
<p>因为我们来的这几天日月潭周围在举行祈安清醮祭典，除了711周围都吃不到荤的。晚上饿了出门逛了半天最后还是回到711吃泡面。</p>
<h2 id="日月潭日出"><a href="#日月潭日出" class="headerlink" title="日月潭日出"></a>日月潭日出</h2><p>为了看日出，早上4点半起床，老爷爷很辛苦那么早起来给我们做早餐，然后5点我们就出发去日月潭了。</p>
<p>到日月潭的时候天还没亮，天上的星星还是非常亮。因为没有一点云，所以看到整个星空还是很震撼的。看日出的点我们选在朝暮码头，到达那里的时候早就已经有人架好三脚架了。</p>
<p>随着天一点一点变亮，我敢说这是我有生以来见过的最好看的曙光了。太阳没出来，但是太阳带来的光从山的后面发出，然后被大山挡住展示出整个山的轮廓，加上湖面作用，呈现的就是一个非常美的水平对称的画面。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG3.jpeg" alt="enter description here" title="太阳还未出来1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG4.jpeg" alt="enter description here" title="太阳还未出来2"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG5.jpeg" alt="enter description here" title="太阳还未出来"></p>
<p>然后还看到了出来冬泳的大爷大妈，还有带着狗和鸭子划赛艇的老人。生活在这里的人太幸福了。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG6.jpeg" alt="enter description here" title="溜了溜了"></p>
<h2 id="环湖骑行"><a href="#环湖骑行" class="headerlink" title="环湖骑行"></a>环湖骑行</h2><p>等太阳出来以后船和人就逐渐多了起来，打破了一开始的平静。我们前往了水社码头，准备租个小自行车骑车环湖。</p>
<p>不得不说因为环境实在是太美了，在这里骑车真的是一种享受。一开始骑的是自行车专用道，相比旁边的公路更加接近湖面人比较少，有些时候能够看见一些观湖非常好的角度。后面一段因为没有自行车专用道转到公路上，能够加速奔驰也是挺爽的。</p>
<p>中间一段路要爬一座比较少的山，上坡会比较累，到达最顶端的有一个“玄奘寺”的地方能够买点东西补给一下，然后就是几公里的下坡了，下坡的速度基本上能够达到30码以上。</p>
<p>总体来说是我骑过体验最好的自行车线路，就是车子还不是很好，以后希望能够换一个更好的装备再来一次。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_9_WechatIMG7.jpeg" alt="enter description here" title="环湖骑行"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;湾湾交换期间最后一次南下浪。见识了有生以来见过的最美的曙光，骑了体验超赞的环湖自行车线路。日月潭，我还会再来的！&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器操作</title>
    <link href="https://www.liuin.cn/2017/12/22/Docker%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.liuin.cn/2017/12/22/Docker容器操作/</id>
    <published>2017-12-22T12:17:29.000Z</published>
    <updated>2017-12-29T12:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面两篇文章整理了Docker创建时候的一些配置，这篇文章整理了Docker容器操作的一些常用命令</p>
<a id="more"></a>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>Docker容器太轻量级了，使得我们可以随时创建和新建容器，启动容器可以分成两种：基于image新建一个容器并启动；启动在终止状态的容器</p>
<h3 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h3><p>命令格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<p>常用选项：</p>
<ul>
<li><code>-it</code> -i 打开容器的标准输入  -t 分配一个pseudo-TTY</li>
<li><code>-e</code> 设置环境变量</li>
<li><code>-d</code> 守护态运行容器</li>
<li><code>-p</code> 指定开放端口</li>
<li><code>--name</code> 为容器命名</li>
</ul>
<p>如果使用了 -d 参数运行容器，容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 docker logs 查看)。</p>
<p>Docker在后台运行的标准操作包括:</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<h3 id="启动已经终止的容器"><a href="#启动已经终止的容器" class="headerlink" title="启动已经终止的容器"></a>启动已经终止的容器</h3><p>命令格式： <code>docker contain start</code></p>
<p>将一个已经终止运行的容器重新启动</p>
<p><code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p>
<h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>命令格式：<code>docker container stop</code></p>
<p>对于只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>
<p>容器状态（包括正在运行的和终止的）可以用 <code>docker container ls -a</code> 命令看到。</p>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>进入容器可以使用两个命令： <code>docker attach</code> 和 <code>docker exec</code></p>
<p>前者不需要加参数（自动分配伪终端），但是退出以后便终止容器；后者需要加<code>-it</code>选项以及指定shell类似<code>docker exec -it 69d1 bash</code></p>
<h2 id="导入导出容器"><a href="#导入导出容器" class="headerlink" title="导入导出容器"></a>导入导出容器</h2><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><p>导出容器到本地容器</p>
<p>命令格式： <code>docker export [OPTIONS] CONTAINER</code></p>
<p>实例：<code>docker export 7691a814370e &gt; ubuntu.tar</code></p>
<h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><p>可以使用<code>docker import</code>从快照文件中导入为镜像</p>
<blockquote>
<p>用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
</blockquote>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>删除一个处于终止状态的容器:<br><code>docker container rm</code><br>可以添加<code>-f</code>选项来发送SIGNKILL信号给容器关闭正在运行的容器</p>
<p>清理所有处于终止状态的容器<br><code>docker container prune</code></p>
<hr>
<p>参考：<br><a href="https://www.gitbook.com/book/yeasy/docker_practice/details?spm=5176.100239.blogcont40494.64.FKbhBf" target="_blank" rel="external">Docker — 从入门到实践</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面两篇文章整理了Docker创建时候的一些配置，这篇文章整理了Docker容器操作的一些常用命令&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Docker" scheme="https://www.liuin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>阿里山游记</title>
    <link href="https://www.liuin.cn/2017/12/17/%E9%98%BF%E9%87%8C%E5%B1%B1%E6%B8%B8%E8%AE%B0/"/>
    <id>https://www.liuin.cn/2017/12/17/阿里山游记/</id>
    <published>2017-12-16T16:21:39.000Z</published>
    <updated>2017-12-19T16:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>老一辈想到台湾马上就会想到阿里山，都说是这是宝岛台湾必去的景点。这周末就造访了阿里山森林公园，这应该也是台湾倒数第二次出游了吧。</p>
<a id="more"></a>
<h2 id="交通方式"><a href="#交通方式" class="headerlink" title="交通方式"></a>交通方式</h2><p>因为阿里山的住宿偏贵（大概三百RMB每人每晚），所以我们选择的交通方式是客运，这样一晚上加一天就可以玩完。第一天晚上从台北出发坐6个小时的客运到阿里山，然后第二天中午再做客运回台北。</p>
<p>从台北到阿里山的路总共应该有320km左右，前面一大段是高速，后面一小段（大约一个小时）时盘山公路，后面一段山路各种180度的湾，所以有晕车的要提前准备好措施。中间会休息两个地方，一个是嘉义转运站，另一个是天长地久桥景区。车子到达阿里山的时间大概是凌晨两三点左右，休息一会就可以准备上山看日出了。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_20_1513699348982.jpg" alt="enter description here" title="路程"></p>
<p>总体来说客运的这种交通方式比较经济而且节省时间，缺点就是会有点辛苦，毕竟凌晨三点多到阿里山的半山腰而且还要坐6个小时的车。</p>
<h2 id="祝山日出"><a href="#祝山日出" class="headerlink" title="祝山日出"></a>祝山日出</h2><p>看日出有两种方式，一种是搭阿里山游乐区里面的红色小火车去祝山观日平台看日出，另外一种是在阿里山游乐区门口有私人的接你上山看日出的巴士，去的是一个更高的平台。我们选择的是第一种，这个要在四点多的时候就到阿里山火车站买票，人很多但是只要不是去太晚应该都能够买到票。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_20_WechatIMG1.jpeg" alt="enter description here" title="阿里山小火车"></p>
<p>坐小火车到达山顶以后，就能够见到一个非常大的观日平台。日出差不多是7点，我们6点到达的山顶，见证了天空由黑变蓝再变红的过程。日出很快，马上太阳就全部出来了，想拍一个延时摄影但是苦于没有架三脚架的地方。</p>
<p>山上确实很冷，比山下温度应该是低个十度左右，冷风吹来冻得人直打哆嗦。不过不一会太阳出来以后感觉就暖起来了，可能是在台北没见过什么太阳，见到太阳就兴奋吧。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_20_WechatIMG2.jpeg" alt="enter description here" title="阿里山日出"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_20_WechatIMG3.jpeg" alt="enter description here" title="山上的云"></p>
<h2 id="漫步森林"><a href="#漫步森林" class="headerlink" title="漫步森林"></a>漫步森林</h2><p>看完日出以后，坐火车到沼平车站，开始漫步森林。看到太阳打在对面的山上，那景色就像电脑壁纸里面的一样。</p>
<p>阿里山游乐园里面真的是很有意境，树都是笔直的而且非常高，几乎看不到人工作用的痕迹，走在里面就像进到原始森林里面一样，非常赞。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_20_WechatIMG4.jpeg" alt="enter description here" title="漫步森林中"></p>
<p>准备回去的时候，拍了一个对面山的延时摄影。可以看到山间的“仙气”慢慢升上去，升到空中变成一朵云，非常赞。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8eSMokATgSA" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老一辈想到台湾马上就会想到阿里山，都说是这是宝岛台湾必去的景点。这周末就造访了阿里山森林公园，这应该也是台湾倒数第二次出游了吧。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台湾大学联盟自习环境排行榜</title>
    <link href="https://www.liuin.cn/2017/12/13/%E5%8F%B0%E6%B9%BE%E5%A4%A7%E5%AD%A6%E8%81%94%E7%9B%9F%E8%87%AA%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <id>https://www.liuin.cn/2017/12/13/台湾大学联盟自习环境排行榜/</id>
    <published>2017-12-13T15:40:13.000Z</published>
    <updated>2018-01-15T15:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>台湾大学联盟指台湾大学、台湾科技大学、台湾师范大学组成的大学系统，允许各校学生跨校选课，共用图书馆等资源。作为一个经常去台大、台师大蹭课自习的台科大学生，今天就来总结一下我心目中台湾大学联盟的自习环境排行榜。</p>
<a id="more"></a>
<h2 id="No-4-台科大图书馆"><a href="#No-4-台科大图书馆" class="headerlink" title="No.4 台科大图书馆"></a>No.4 台科大图书馆</h2><blockquote>
<p>环境：三星<br>便利性：四星</p>
</blockquote>
<p>台科大图书馆应该是我自习来过最多的地方了，来自习的主要也是台科大的学生。自习的桌子不是很大，阅览区的自习位没有插座，图书馆里面的自习位一般是两个自习位共用一个插座。<br>一楼有一个休闲的杂志阅览区，旁边有一台自动咖啡机，学累了可以来这里坐一会喝杯咖啡提提神，超赞。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20180111_092603.jpg" alt="enter description here" title="图书馆大门"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20180111_092857.jpg" alt="enter description here" title="书架"></p>
<p>  <img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171225_224156.jpg" alt="enter description here" title="阅览区自习位"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20180111_092637.jpg" alt="enter description here" title="休闲杂志区"></p>
<h2 id="No-3-台师大图书馆"><a href="#No-3-台师大图书馆" class="headerlink" title="No.3 台师大图书馆"></a>No.3 台师大图书馆</h2><blockquote>
<p>环境：四星<br>便利性：三星</p>
</blockquote>
<p>师大图书馆在师大的图书馆校区，距离台科大比较远，所以去得也不多，一般是在游泳课前有时间的时候就去那里自习一会儿。师大图书馆还是很有特色的，建筑整体是一个半圆形的，在图书馆里面看会感觉非常特别。<br>自习区域也很赞，有讨论区开放给团队讨论，就是校园网有的时候使用不了漫游账号。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171229_095420.jpg" alt="enter description here" title="师大图书馆大门"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171229_095635.jpg" alt="enter description here" title="自习区"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171229_095753.jpg" alt="enter description here" title="半圆形建筑"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171229_095822.jpg" alt="enter description here" title="讨论区"></p>
<h2 id="No-2-台大图书馆总馆"><a href="#No-2-台大图书馆总馆" class="headerlink" title="No.2 台大图书馆总馆"></a>No.2 台大图书馆总馆</h2><blockquote>
<p>环境：五星<br>便利性：三星</p>
</blockquote>
<p>台大图书馆总馆应该是我在台湾交换去的第二多的图书馆了，周四下午又台大的课，上午一般就在台大图书馆待着，周末如果学习的话也会选择这里。在这里正很有学习的氛围。加上也是台大的标志性建筑，也是台大的几何中心，算得上是台大的一个标志了。</p>
<p>因为图书馆里面大部分区域是地毯，所以里面非常安静，每层楼的中间和最边上是自习区域，另外的地方是藏书的书架。不过有一点便利性的不足就是没有插座，有的时候电脑没电了就很头疼。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_133521.jpg" alt="enter description here" title="台大地标——图书总馆"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_133217.jpg" alt="enter description here" title="自习位"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_133149.jpg" alt="enter description here" title="自习区域"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171019_180724.jpg" alt="enter description here" title="多媒体借阅区"></p>
<h2 id="No-1-台大社科院图书馆"><a href="#No-1-台大社科院图书馆" class="headerlink" title="No.1 台大社科院图书馆"></a>No.1 台大社科院图书馆</h2><blockquote>
<p>环境：五星<br>便利性：五星</p>
</blockquote>
<p>台大社科院图书馆是有个非常有名的建筑作品，由伊东丰雄设计。相关的介绍可以看<a href="http://www.archcollege.com/archcollege/2016/04/25481.html" target="_blank" rel="external">这里</a>。很喜欢对这个图书馆的一个评价：</p>
<blockquote>
<p>树干般的柱子，是借由具备自我衍生规则的设计算法配置而成。看起来如植物般的双重螺旋，在保持彼此距离的同时也长出复数的节点，而两个螺旋的交汇之处变成了柱子的基点。然后再将基点间做柏洛诺伊分割，进一步决定出个别的屋顶板材的形状。柱子的形状则随着跨距的不同，以大、中、小三个模式加以重复排列</p>
</blockquote>
<p>社科院里面的环境可以说是超级棒，每一个自习位上面也有台灯和插座，真的是进去能够待上一整天。</p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_091823.jpg" alt="enter description here" title="社科院图书馆门口"></p>
<p>  <img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_091910.jpg" alt="enter description here" title="辜振甫先生像"></p>
<p>  <img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_092008.jpg" alt="enter description here" title="自习环境1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_092129.jpg" alt="enter description here" title="自习环境2"></p>
<p><img src="https://data2.liuin.cn/story-writer/2018_1_15_IMG_20171205_092201.jpg" alt="enter description here" title="自习位"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;台湾大学联盟指台湾大学、台湾科技大学、台湾师范大学组成的大学系统，允许各校学生跨校选课，共用图书馆等资源。作为一个经常去台大、台师大蹭课自习的台科大学生，今天就来总结一下我心目中台湾大学联盟的自习环境排行榜。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="排行榜" scheme="https://www.liuin.cn/tags/%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile定制Docker镜像</title>
    <link href="https://www.liuin.cn/2017/12/10/%E4%BD%BF%E7%94%A8Dockerfile%E5%AE%9A%E5%88%B6Docker%E9%95%9C%E5%83%8F/"/>
    <id>https://www.liuin.cn/2017/12/10/使用Dockerfile定制Docker镜像/</id>
    <published>2017-12-10T13:07:08.000Z</published>
    <updated>2017-12-15T08:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解了使用Dockerfile 构建Docker镜像的一些常用指令和注意事项</p>
<a id="more"></a>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么很多无法重复的问题、镜像构建透明性的问题、体积的问题就能够轻松得到解决。</p>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>构建镜像命令的格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</div></pre></td></tr></table></figure></p>
<h3 id="上下文概念"><a href="#上下文概念" class="headerlink" title="上下文概念"></a>上下文概念</h3><p>Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>
<p>当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>
<h3 id="规范做法"><a href="#规范做法" class="headerlink" title="规范做法"></a>规范做法</h3><p>一般来说，应该会将 Dockerfile 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>
<p>在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。</p>
<p>这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。</p>
<p>当然，一般大家习惯性的会使用默认的文件名 Dockerfile，以及会将其置于镜像构建上下文目录中。</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>Dockerfile 中每一个指令都会建立一层，因此尽量将指令融合在一起（特别注意的是RUN指令）</p>
<h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h3><p>以一个镜像为基础，在其之上进行定制。</p>
<p>语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM &lt;image&gt;:&lt;tag&gt; 或者</div><div class="line">FROM &lt;image&gt;@&lt;digest&gt;</div></pre></td></tr></table></figure></p>
<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h3><p>用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>
<ul>
<li><code>shell</code>格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。</li>
<li><code>exec</code>格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>
</ul>
<h3 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h3><p>CMD 指令就是用于指定默认的容器主进程的启动命令的。也是两种格式：</p>
<ul>
<li>shell 格式：CMD &lt;命令&gt;</li>
<li>exec 格式：CMD [“可执行文件”, “参数1”, “参数2”…]</li>
<li>参数列表格式：CMD [“参数1”, “参数2”…]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</li>
</ul>
<p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号。如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。</p>
<p>提到 CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。<br>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。所以<code>systemctl</code>和<code>service</code> 这些命令就不起作用了。<br>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p>
<h3 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h3><p>ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。</p>
<p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 –entrypoint 来指定。</p>
<p>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令</p>
<h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h3><p>两种格式：</p>
<ul>
<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>
<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>
</ul>
<p>对于如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的，比如说<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ENV VERSION=1.0 DEBUG=on \</div><div class="line">    NAME=&quot;Happy Feet&quot;</div></pre></td></tr></table></figure></p>
<h3 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h3><p>格式： <code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>
<p>构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p>
<h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h3><p>格式：</p>
<ul>
<li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<p>&lt;源路径&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="external">filepath.Match</a> 规则</p>
<p>&lt;目标路径&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>
<p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p>
<h3 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h3><p>ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。给出的源路径可以是一个URL地址Docker 引擎会试图去下载这个链接的文件放到 &lt;目标路径&gt; 去。</p>
<p>另外需要注意的是，ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>
<p>因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。</p>
<h3 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h3><p>两种格式：</p>
<ul>
<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>
<li><code>VOLUME &lt;路径&gt;</code></li>
</ul>
<p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>
<h3 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h3><p>格式：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p>
<p>声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p>
<h3 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h3><p>格式： <code>WORKDIR &lt;工作目录路径&gt;</code></p>
<p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p>
<h3 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h3><p>格式： <code>USER &lt;用户名&gt;</code></p>
<p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p>
<p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<h3 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h3><p>两种格式：</p>
<ul>
<li>HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</li>
<li>HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li>
</ul>
<p>HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</p>
<p>具体使用可参考<a href="https://docs.docker.com/engine/reference/builder/#healthcheck" target="_blank" rel="external">这里</a></p>
<h3 id="ONBUILD-定义触发器"><a href="#ONBUILD-定义触发器" class="headerlink" title="ONBUILD 定义触发器"></a>ONBUILD 定义触发器</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code></p>
<p>ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>
<h3 id="MAINTAINER-提供信息"><a href="#MAINTAINER-提供信息" class="headerlink" title="MAINTAINER 提供信息"></a>MAINTAINER 提供信息</h3><p>格式：<code>MAINTAINER &lt;author&#39;s detail&gt;</code></p>
<p>用于提供信息的指令，用于让作者提供本人的信息；不限制其出现的位置，但建议跟在FROM之后。</p>
<h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><h3 id="从rootfs文件导入镜像"><a href="#从rootfs文件导入镜像" class="headerlink" title="从rootfs文件导入镜像"></a>从rootfs文件导入镜像</h3><p>格式：<code>docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p>
<p>压缩包可以是本地文件、远程 Web 文件，甚至是从标准输入中得到。压缩包将会在镜像 / 目录展开，并直接作为镜像第一层提交。</p>
<h3 id="保存和加载镜像"><a href="#保存和加载镜像" class="headerlink" title="保存和加载镜像"></a>保存和加载镜像</h3><p>Docker 还提供了 docker load 和 docker save 命令，用以将镜像保存为一个 tar 文件，然后传输到另一个位置上，再加载进来。这是在没有 Docker Registry 时的做法，现在已经不推荐，镜像迁移应该直接使用 Docker Registry，无论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。</p>
<p>如果我们结合这两个命令以及 ssh 甚至 pv 的话，利用 Linux 强大的管道，我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save &lt;镜像名&gt; | bzip2 | pv | ssh &lt;用户名&gt;@&lt;主机名&gt; &apos;cat | docker load&apos;</div></pre></td></tr></table></figure></p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>格式：<code>$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code></p>
<p>Untagged</p>
<p>有些时候我们删除一个镜像的时候，可能会出现Untagged。这是因为镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 docker pull 看到的层数不一样的源。</p>
<p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p>
<p>参考：<br><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">https://docs.docker.com/engine/reference/builder/</a><br><a href="https://www.gitbook.com/book/yeasy/docker_practice/details?spm=5176.100239.blogcont40494.64.FKbhBf" target="_blank" rel="external">电子书</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解了使用Dockerfile 构建Docker镜像的一些常用指令和注意事项&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Docker" scheme="https://www.liuin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>初识Docker</title>
    <link href="https://www.liuin.cn/2017/12/10/%E5%88%9D%E8%AF%86Docker/"/>
    <id>https://www.liuin.cn/2017/12/10/初识Docker/</id>
    <published>2017-12-10T12:10:47.000Z</published>
    <updated>2018-01-18T02:14:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是我初步了解Docker技术的笔记<br><img src="https://data2.liuin.cn/story-writer/2017_12_10_2333.png" alt=""></p>
<a id="more"></a>
<h2 id="什么是Docker？"><a href="#什么是Docker？" class="headerlink" title="什么是Docker？"></a>什么是Docker？</h2><p>Docker 是能够对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_10_1512908235159.jpg" alt="enter description here" title="传统虚拟机"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_10_1512908269821.jpg" alt="enter description here" title="Docker"></p>
<p>相比传统的虚拟化技术Docker有许多的优点：更高效的利用系统资源；更快速的启动时间；一致的运行环境；持续交付和部署；更轻松的迁移；更轻松的维护和扩展</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像(Image)"></a>镜像(Image)</h3><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</p>
<p>镜像是分层存储的，构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。这样使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h3><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p>
<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h3><p>和GitHub中的仓库类似，Docker中的仓库也是展现不同版本的镜像的地方。一个仓库包含一个软件（或者开发环境）的不同版本的镜像，标签就是对应着这些镜像的版本号。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。</p>
<p>与Github这种代码托管平台一样，仓库我们可以放在公共的Docker Registry中（最常用的是 Docker Hub，国内有许多高质量的镜像服务），也可以放在私有的Docker Registry中。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方安装指南在<a href="https://docs.docker.com/engine/installation/#prior-releases" target="_blank" rel="external">这里</a></p>
<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><h4 id="加载可选模块"><a href="#加载可选模块" class="headerlink" title="加载可选模块"></a>加载可选模块</h4><p>从 Ubuntu 14.04 开始，一部分内核模块移到了可选内核模块包。AUFS 内核驱动属于可选内核模块的一部分，作为推荐的 Docker 存储层驱动，一般建议安装可选内核模块包以使用 AUFS。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install \</div><div class="line">    linux-image-extra-$(uname -r) \</div><div class="line">    linux-image-extra-virtual</div></pre></td></tr></table></figure>
<h4 id="向APT中添加源"><a href="#向APT中添加源" class="headerlink" title="向APT中添加源"></a>向APT中添加源</h4><p>添加使用 HTTPS 传输的软件包以及 CA 证书:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install \</div><div class="line">    apt-transport-https \</div><div class="line">    ca-certificates \</div><div class="line">    curl \</div><div class="line">    software-properties-common</div></pre></td></tr></table></figure></p>
<p>添加软件源的 GPG 密钥（因为国内的网络问题，可以使用国内的源）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</div><div class="line"></div><div class="line"># 官方源</div><div class="line"># curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</div></pre></td></tr></table></figure></p>
<p>向<code>source.list</code>中加入Docker软件源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository \</div><div class="line">    &quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</div><div class="line">    $(lsb_release -cs) \</div><div class="line">    stable&quot;</div><div class="line"></div><div class="line"></div><div class="line"># 官方源</div><div class="line"># $ sudo add-apt-repository \</div><div class="line">#    &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</div><div class="line">#    $(lsb_release -cs) \</div><div class="line">#    stable&quot;</div></pre></td></tr></table></figure>
<h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><p>更新apt，并安装`Docker CE’:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line"></div><div class="line">$ sudo apt-get install docker-ce</div></pre></td></tr></table></figure>
<h3 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h3><p>官方版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.docker.com/ | sh</div></pre></td></tr></table></figure></p>
<p>阿里云安装脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</div></pre></td></tr></table></figure></p>
<p>DaoCloud安装脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/docker | sh</div></pre></td></tr></table></figure></p>
<h3 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h3><p><a href="https://cloud.tencent.com/document/product/457/9113?!preview=true&amp;lang=zh" target="_blank" rel="external">腾讯云</a>官方给出的配置方法：<br>修改 Docker 配置文件 <code>/etc/default/docker</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=&quot;--registry-mirror=https://mirror.ccs.tencentyun.com&quot;</div></pre></td></tr></table></figure></p>
<p>更高效的配置：</p>
<p>通过修改daemon配置文件<code>/etc/docker/daemon.json</code>来使用加速器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /etc/docker</div><div class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</div><div class="line">&#123;</div><div class="line">  &quot;registry-mirrors&quot;: [&quot;https://mirror.ccs.tencentyun.com&quot;]</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure></p>
<p>用<code>docker info</code>测试是否配置好，查看是否有以下的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Registry Mirrors:</div><div class="line"> https://mirror.ccs.tencentyun.com</div></pre></td></tr></table></figure></p>
<h3 id="Docker-compose-安装"><a href="#Docker-compose-安装" class="headerlink" title="Docker-compose 安装"></a>Docker-compose 安装</h3><p>可以参考<a href="https://docs.docker.com/compose/install/" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</div><div class="line">sudo chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>
<p>但是我在操作上面的命令的时候会出现下载不了的错误，所以我就从<a href="https://github.com/docker/compose/releases" target="_blank" rel="external">官方的Github</a>下载了最新的realease，然后复制到<code>/usr/local/bin/</code>中</p>
<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>获取镜像的格式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</div></pre></td></tr></table></figure></p>
<p>具体的帮助文档可以通过<code>docker pull --help</code>查看<br>参数解释：</p>
<ul>
<li>Docker 镜像仓库地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。</li>
<li>仓库名：如之前所说，这里的仓库名是两段式名称，即 &lt;用户名&gt;/&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</li>
</ul>
<p>运行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -it --rm ubuntu:16.04 bash</div></pre></td></tr></table></figure></p>
<p>参数解释：</p>
<ul>
<li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>
<li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li>
<li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li>
<li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li>
</ul>
<h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><p>一般使用的使用的是<code>docker image ls</code>或者<code>docker images</code> 指令<br>可以使用相应的<code>--help</code>查看帮助</p>
<h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><p>当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 docker commit 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p>
<p><code>docker commit</code>语法格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</div><div class="line"></div><div class="line"># 例子</div><div class="line">$ docker commit \</div><div class="line">    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \</div><div class="line">    --message &quot;修改了默认网页&quot; \</div><div class="line">    webserver \</div><div class="line">    nginx:v2</div></pre></td></tr></table></figure></p>
<p>可以搭配<code>docker diff</code>查看容器当前的修改和<code>docker history</code>查看镜像的相关历史记录</p>
<p>注意：慎用<code>docker commit</code>操作：</p>
<blockquote>
<p>使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 docker diff 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。</p>
</blockquote>
<p>参考：<br><a href="http://aleonchen.com/2017/02/07/qcloud-docker/" target="_blank" rel="external">博客1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我初步了解Docker技术的笔记&lt;br&gt;&lt;img src=&quot;https://data2.liuin.cn/story-writer/2017_12_10_2333.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Docker" scheme="https://www.liuin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>湾湾极东之行</title>
    <link href="https://www.liuin.cn/2017/12/09/%E6%B9%BE%E6%B9%BE%E6%9E%81%E4%B8%9C%E4%B9%8B%E8%A1%8C/"/>
    <id>https://www.liuin.cn/2017/12/09/湾湾极东之行/</id>
    <published>2017-12-09T14:39:01.000Z</published>
    <updated>2017-12-09T14:59:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末台科大台陆会说了一个月的活动终于举办了，福隆骑行，打卡台湾极东点，过一把骑行的瘾。</p>
<a id="more"></a>
<h2 id="线路"><a href="#线路" class="headerlink" title="线路"></a>线路</h2><p>台北出发，坐一个半小时的区间车到福隆车站，买便当、借车，沿着小路骑到旧草岭隧道，然后骑过旧草岭隧道。过了旧草岭隧道就能远眺龟山岛了，然后沿着环岛一号线骑行到台湾极东点——三貂角灯塔，最后再沿着环岛一号线骑行回到福隆车站，还车坐区间车回台北。</p>
<p>区间车来回150TWD，福隆便当60TWD，借车100TWD，共计花费才310TWD。超赞的物美价廉的周末出游路线！</p>
<h2 id="旧草岭隧道"><a href="#旧草岭隧道" class="headerlink" title="旧草岭隧道"></a>旧草岭隧道</h2><p>旧草岭隧道在日治大正10~13年建造（西元1921~1924年），工程费时三年，是当时台湾最长的隧道。隧道的工程质量不得不说还是蛮好的，差不多有百年历史，隧道里面还是没有漏水什么的。因为是单线铁路，后面在旁边建了一个新的双线铁路这条隧道就废弃了，改成一个供观光客骑行的景点。<br>一排路灯照着不是很黑，地下铺了铁轨形状的瓷砖。路上碰到大妈团让我们带路😂</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_9_IMG_20171209_171226.jpg" alt=" " title="旧草岭隧道 入口"></p>
<h2 id="三貂角灯塔"><a href="#三貂角灯塔" class="headerlink" title="三貂角灯塔"></a>三貂角灯塔</h2><p>三貂角灯塔就是台湾的极东点了，经度东经120度，刚好是太平洋和东海分界的地方。公元1929年及1931年，日本船舶抚顺丸及华南丸，先后于三貂角附近海域遭遇海难沉没，台湾总督府因此于此地筹建此灯塔。</p>
<p>向东眺望就是广袤的太平洋了，美不胜收！</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_9_IMG_20171209_203930.jpg" alt=" " title="三貂角灯塔"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_9_IMG_20171209_204012.jpg" alt=" " title="台湾极东点观景台"></p>
<h2 id="骑行感受"><a href="#骑行感受" class="headerlink" title="骑行感受"></a>骑行感受</h2><p>今天一共骑行应该是20公里左右，因为团队里面有小伙伴体能不是很好，所以骑行的速度不是很快，平均速度大概在10km/h。这条线路的总体感受应该是非常好的，依山傍水，左边高山，右边太平洋。</p>
<p>环岛一号线上大部分道路都是有自行车专用道，不用太担心安全的问题。周末没事花个一天半天的时间来玩玩挺好的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_9_Screenshot_2017-12-09-16-57-48-223_com.xiaomi.hm.health.png" alt=" " title="骑行轨迹"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个周末台科大台陆会说了一个月的活动终于举办了，福隆骑行，打卡台湾极东点，过一把骑行的瘾。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>从台大Compiler的学习中看自己在台湾学习的局限性</title>
    <link href="https://www.liuin.cn/2017/12/09/%E4%BB%8E%E5%8F%B0%E5%A4%A7Compiler%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9C%8B%E8%87%AA%E5%B7%B1%E5%9C%A8%E5%8F%B0%E6%B9%BE%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7/"/>
    <id>https://www.liuin.cn/2017/12/09/从台大Compiler的学习中看自己在台湾学习的局限性/</id>
    <published>2017-12-09T01:06:38.000Z</published>
    <updated>2017-12-09T02:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>
function doDecrypt(pwd, onError) {
	console.log("in doDecrypt");
	var txt = document.getElementById("enc_content").innerHTML;
	var plantext;
	try {
	  	var bytes = CryptoJS.AES.decrypt(txt, pwd);
		plaintext = bytes.toString(CryptoJS.enc.Utf8);
	} catch(err) {
		if(onError) {onError(err);}
		return;
	}
	document.getElementById("enc_content").innerHTML = plaintext;
	document.getElementById("enc_content").style.display = "block";
   document.getElementById("enc_passwd").style.display = "none";
}
</script>
<div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div>
<script>
var onError = function(error) {
	document.getElementById("enc_error").innerHTML = "password error!"
};
function decrypt() {
var passwd = document.getElementById("enc_pwd_input").value;
console.log(passwd);
doDecrypt(passwd, onError);
}
</script>
</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;加密文章&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="随笔" scheme="https://www.liuin.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 文章加密方案</title>
    <link href="https://www.liuin.cn/2017/12/07/Hexo-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88/"/>
    <id>https://www.liuin.cn/2017/12/07/Hexo-文章加密方案/</id>
    <published>2017-12-07T01:55:45.000Z</published>
    <updated>2017-12-09T14:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo搭建静态博客有时候有些想给文章加上一些权限，只有指定的人才可以看，这里提供一种通过<code>hexo-encrypt</code>插件实现的Hexo文章的加密方案</p>
<a id="more"></a>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p><code>hexo-encrypt</code>的详细介绍在<a href="https://github.com/edolphin-ydf/hexo-encrypt" target="_blank" rel="external">这里</a></p>
<p>本地安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-encrypt --save</div></pre></td></tr></table></figure></p>
<p>配置：<br>全站文章默认不加密，只有指定的文章加密</p>
<p>修改站点配置文件<code>_config.yml</code>，在末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">encrypt:</div><div class="line">    enable: true</div><div class="line">	password: 2333</div></pre></td></tr></table></figure></p>
<p>其中2333为默认密码，如果在文章中没有使用新密码，默认使用这个密码</p>
<p>文章头部的添加说明说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">encrypt: true</div><div class="line">enc_pwd: 123456</div></pre></td></tr></table></figure></p>
<p>这篇文章使用新的指定的密码</p>
<h2 id="进阶优化"><a href="#进阶优化" class="headerlink" title="进阶优化"></a>进阶优化</h2><h3 id="替换文本框为密码框"><a href="#替换文本框为密码框" class="headerlink" title="替换文本框为密码框"></a>替换文本框为密码框</h3><p>输入密码默认是明文显示的，把源码中的文本框改为密码框即可：</p>
<p>编辑文件<code>node_modules\hexo-encrypt\lib\conf_post.js</code>，找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.template = &apos; &lt;input id=&quot;enc_pwd_input&quot; type=&quot;text&quot; style=&quot;&apos; +</div></pre></td></tr></table></figure></p>
<p>替换成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.template = &apos; &lt;input id=&quot;enc_pwd_input&quot; type=&quot;password&quot; style=&quot;&apos; +</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Hexo搭建静态博客有时候有些想给文章加上一些权限，只有指定的人才可以看，这里提供一种通过&lt;code&gt;hexo-encrypt&lt;/code&gt;插件实现的Hexo文章的加密方案&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="https://www.liuin.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>初识iptables</title>
    <link href="https://www.liuin.cn/2017/12/04/%E5%88%9D%E8%AF%86iptables/"/>
    <id>https://www.liuin.cn/2017/12/04/初识iptables/</id>
    <published>2017-12-04T14:44:30.000Z</published>
    <updated>2017-12-04T14:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.wikiwand.com/zh-cn/Iptables" target="_blank" rel="external">iptables</a> 可以简单理解为 Linux 系统内核级防火墙 netfilter 的用户态客户端。<br>Linux 管理员通过调用 iptables 命令，配置 Linux 内核 netfilter 模块规则，对网络数据包的流动进行管理。</p>
<a id="more"></a>
<h4 id="iptables-基本命令"><a href="#iptables-基本命令" class="headerlink" title="iptables 基本命令"></a>iptables 基本命令</h4><h5 id="iptables-语法帮助"><a href="#iptables-语法帮助" class="headerlink" title="iptables 语法帮助"></a>iptables 语法帮助</h5><p>可以使用<code>iptables</code>查看iptables的帮助文档</p>
<h5 id="查看-iptables-表的规则"><a href="#查看-iptables-表的规则" class="headerlink" title="查看 iptables 表的规则"></a>查看 iptables 表的规则</h5><p>iptables 有[表 (tables)] 的概念，每张表又包含不同[链 (chains)]，大部分情况下我们仅需要使用 filter 和 nat 两张表的链就可以完成功能。</p>
<p>使用以下命令可以查看 filter 表中的规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -L -n</div></pre></td></tr></table></figure></p>
<p>参数解析 -L 列出规则， -n 不显示域名，命令默认显示的是 filter 表，可以通过 -t 参数来指定其他表</p>
<p>可以看到目前 filter 表中有 3 条链: INPUT, FORWARD, OUTPUT。 3 条链都没有任何规则存在，因此通过网卡的网络数据包不会受到任何影响。</p>
<blockquote>
<p>iptables 包含 5 张表（tables）：<br> raw 用于配置数据包，raw 中的数据包不会被系统跟踪。<br> filter 是用于存放所有与防火墙相关操作的默认表。<br> nat 用于网络地址转换（例如：端口转发）。<br> mangle 用于对特定数据包的修改。<br> security 用于强制访问控制网络规则。</p>
<p>链可以看作是一系列规则集合，默认的链被用于不同的场景，用户也可以创建自定义的链。例如：<br>filter 表的 INPUT 链用于进入网卡的数据包过滤<br>filter 表的 OUTPUT 链用于过滤网卡对外发送的数据包过滤 一条链中的规则从上自下顺序执行。<br>实验</p>
</blockquote>
<h4 id="禁止访问目的地址"><a href="#禁止访问目的地址" class="headerlink" title="禁止访问目的地址"></a>禁止访问目的地址</h4><h5 id="添加一条规则到-Filter-表"><a href="#添加一条规则到-Filter-表" class="headerlink" title="添加一条规则到 Filter 表"></a>添加一条规则到 Filter 表</h5><p>在没有任何防火墙规则时，尝试 ping 百度的服务器，ping 是可以正常返回的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ping -c 4 www.baidu.com</div><div class="line">PING qcloud.com (119.29.47.192) 56(84) bytes of data.</div><div class="line">64 bytes from 119.29.47.192: icmp_seq=1 ttl=58 time=3.11 ms</div><div class="line">64 bytes from 119.29.47.192: icmp_seq=2 ttl=58 time=3.10 ms</div><div class="line">64 bytes from 119.29.47.192: icmp_seq=3 ttl=58 time=3.17 ms</div></pre></td></tr></table></figure></p>
<p>假设我们作为 Linux 管理员，不希望有人从本机 ping 百度的服务器，那么就可以用到如下的 iptables 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -I OUTPUT -p icmp -d www.baidu.com -j DROP</div></pre></td></tr></table></figure></p>
<p>参数解析 -I 添加规则到链的最前面， -p 匹配协议， -d 匹配目的地址， -j DROP 将匹配的数据包实施丢掉动作</p>
<blockquote>
<p>重要:<br>因为在 iptables 一个链中的规则是从上到下依次执行的，因此一条规则在链中的位置十分重要。<br>例如一条拒绝全部连接的规则 -j REJECT 一定要放在链的最后，而允许通行的规则要放在这条规则之前。<br>否则所有网络数据包进入链后直接匹配到这条规则，将导致所有连接被拒绝。</p>
</blockquote>
<p>现在我们可以用 <code>sudo iptables -L -n</code> 命令看到 filter 表的 OUTPUT 链中新增了两条记录，其中 destination 地址是 DNS 返回的百度服务器 IP 地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line">DROP       icmp --  0.0.0.0/0            220.181.112.244</div><div class="line">DROP       icmp --  0.0.0.0/0            220.181.111.188</div></pre></td></tr></table></figure></p>
<p>这时再 ping 百度服务器会发现无法 ping 通了，因为访问百度服务器 IP 地址的数据包已经被防火墙过滤丢掉了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ping -c 4 www.baidu.com</div><div class="line">PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.</div><div class="line">ping: sendmsg: Operation not permitted</div><div class="line">ping: sendmsg: Operation not permitted</div></pre></td></tr></table></figure></p>
<h4 id="导出、编辑、导入规则"><a href="#导出、编辑、导入规则" class="headerlink" title="导出、编辑、导入规则"></a>导出、编辑、导入规则</h4><p>在进行一系列复杂的防火墙配置时，大多数时候不建议直接调用 iptables 做规则修改。 因为任何一条错误的配置或者一个 typo （输入错误）都有可能导致严重的网络问题。</p>
<p>一个最佳实践是导出现有规则到文本文件，对该文本文件进行编辑，进行检查无误后再将其导入。</p>
<h5 id="导出规则"><a href="#导出规则" class="headerlink" title="导出规则"></a>导出规则</h5><p>通过如下命令导出所有规则到文本文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables-save &gt; /home/ubuntu/iptables_rules</div></pre></td></tr></table></figure></p>
<h5 id="编辑规则"><a href="#编辑规则" class="headerlink" title="编辑规则"></a>编辑规则</h5><p>在新标签页打开 iptables_rules，在 filter 表的 :OUTPUT ACCEPT 链下面添加一条规则的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A OUTPUT -p icmp -d 114.114.114.114 -j DROP</div></pre></td></tr></table></figure></p>
<h5 id="导入规则"><a href="#导入规则" class="headerlink" title="导入规则"></a>导入规则</h5><p>使用命令将编辑过的规则重新导入 iptables<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables-restore /home/ubuntu/iptables_rules</div></pre></td></tr></table></figure></p>
<p>使用 sudo iptables -L -n 查看是否有禁止 ping 114.114.114.114 的新增规则</p>
<h5 id="清除全部规则"><a href="#清除全部规则" class="headerlink" title="清除全部规则"></a>清除全部规则</h5><p>现在我们清除上一小节中增加的规则，还原到没有任何规则的初始状态。</p>
<p>Note：当你因为错误的配置 iptables 导致自己无法远程访问的时候，从 console 执行这条命令可以快速修复状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -F</div></pre></td></tr></table></figure>
<p>iptables 还提供 -X 参数清除[自定义链]， -Z 参数重置计数器</p>
<h4 id="黑-白名单"><a href="#黑-白名单" class="headerlink" title="黑/白名单"></a>黑/白名单</h4><p>某公司禁止特定的 PC 设备访问和工作无关的网站，而其他设备则不受限制。</p>
<p>分析：</p>
<p>1.首先明确是对外访问限制，所以应该编辑 iptables OUTPUT 链进行限制</p>
<p>2.其次，由于目的地址可能是数百个网站，针对每一台PC配置数百条规则是不可接受的，因此我们选择使用自建一条链来实现。</p>
<p>3.公司只限制部分 PC 访问，因此对 PC 的匹配最好使用 IP 地址匹配，不匹配的设备则不受限制。</p>
<p>Note: 对于进入 INPUT 链的入站规则还可以采用 mac 匹配。</p>
<h5 id="查看本机-IP-地址。"><a href="#查看本机-IP-地址。" class="headerlink" title="查看本机 IP 地址。"></a>查看本机 IP 地址。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ip a show eth0</div></pre></td></tr></table></figure>
<p>在 inet 之后的就是本机网口的 IP 地址，例如 10.135.166.86</p>
<p>查看公网IP也可以使用一些IP工具进行查看</p>
<h5 id="编辑-iptables-规则："><a href="#编辑-iptables-规则：" class="headerlink" title="编辑 iptables 规则："></a>编辑 iptables 规则：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//清除已有规则</div><div class="line"></div><div class="line">sudo iptables -F</div><div class="line">//清除自建链</div><div class="line"></div><div class="line">sudo iptables -X</div><div class="line">//新建一个叫做 BLACKLIST 的链</div><div class="line"></div><div class="line">sudo iptables -N BLACKLIST</div><div class="line">//当访问的源 IP 地址是本机的时候进入 BLACKLIST 链</div><div class="line"></div><div class="line">sudo iptables -A OUTPUT -s 10.135.166.86 -j BLACKLIST</div><div class="line">//向 BLACKLIST 链添加 2 条规则</div><div class="line"></div><div class="line">sudo iptables -A BLACKLIST -d 114.114.114.114 -j DROP</div><div class="line">sudo iptables -A BLACKLIST -d 220.181.111.188 -j DROP</div></pre></td></tr></table></figure>
<p>如上配置后，会发现本机已经无法 ping BLACKLIST 中的目的地址了。</p>
<p>如果后续要增加新的禁止访问的目的地址，则只需向 BLACKLIST 链添加新规则。<br>如果需要限制另一台 PC 通过本网关转发访问外网，则只需添加一条 OUTPUT 链的源 IP 匹配规则并指向 -j BLACKLIST。</p>
<h4 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h4><p>分析： 通常来讲应该首先考虑程序本身能否配置监听多个端口，或者使用负载均衡器作为代理程序。 但在本次实验中我们将使用 iptables 监听 8080 端口并将网络数据包转发给本地80端口</p>
<p>首先测试 <code>telnet 0 80</code> 和 <code>telnet 0 8080</code> 可以看到 80 和 8080 端口都是不通的。</p>
<p>接下来我们用 netcat 监听 80 端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nc -k -l 80 &amp;</div></pre></td></tr></table></figure></p>
<p>这时候 telnet 0 80 发现 80 端口可以工作了。</p>
<p>下面我们用 iptables 做一个端口映射<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A OUTPUT -p tcp -d 127.0.0.1 --dport 8080 -j DNAT --to 127.0.0.1:80</div></pre></td></tr></table></figure></p>
<p>这里我们用到了 -t nat 参数，表示我们使用了 netfilter 的 nat 表。在 nat 表的 OUTPUT 链上做了一个 -j DNAT 转发，将访问内网 8080 端口的数据包转向了 80 端口。</p>
<p>这时候 telnet 0 8080 发现 8080 端口也可以工作了。</p>
<p>如果是监听外网的 8080 端口转发到 80 端口，则需要执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-ports 80</div></pre></td></tr></table></figure></p>
<p>通过使用 PREROUTING 链直接将访问 8080 端口的数据包转发到 80 端口</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/zh-cn/Iptables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iptables&lt;/a&gt; 可以简单理解为 Linux 系统内核级防火墙 netfilter 的用户态客户端。&lt;br&gt;Linux 管理员通过调用 iptables 命令，配置 Linux 内核 netfilter 模块规则，对网络数据包的流动进行管理。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="iptables" scheme="https://www.liuin.cn/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>台中两日游</title>
    <link href="https://www.liuin.cn/2017/12/04/%E5%8F%B0%E4%B8%AD%E4%B8%A4%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/12/04/台中两日游/</id>
    <published>2017-12-04T08:58:32.000Z</published>
    <updated>2017-12-19T16:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到周末，看天气预报台北这个周末还是下雨，这次下定决心要南下避雨。早上做的决定，然后查火车时间、定民宿九点才从家里出发，也算是一个说走就走的旅行吧。</p>
<a id="more"></a>
<h2 id="台铁网络"><a href="#台铁网络" class="headerlink" title="台铁网络"></a>台铁网络</h2><p>早上在家查火车时间的时候已经没有对号列车，想要有座位只能做区间车，还好从台北车站上车的时候还有一些座位。</p>
<p>到台中已经是下午一点了，然后继续坐区间车到清水车站，转一次公交车到高美湿地，中间换乘公交的时候等了很久。最后到高美湿地的时候已经是下午四点了。</p>
<p>其中区间车从台中到清水事实上是北上的，按理说如果北上的话我在从台北到台中的车上到清水停下来就行了。之前我一直以为台湾的铁路网络就是绕着台湾转一个圈圈，其实除了台铁在这个圆圈中生出一些短的分支以外，还有一段是两条线平行的。具体可以看台铁的<a href="https://www.railway.gov.tw/Upload/UserFiles/tr_line.pdf" target="_blank" rel="external">线路图</a>。这一段大致就是从新竹到台中一段，分成了山线和海线两条平行线，台中在山线的一段，清水在海线的一段，所以才要坐区间车绕到海线然后北上。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160347.png" alt="台中车站"></p>
<h2 id="高美湿地"><a href="#高美湿地" class="headerlink" title="高美湿地"></a>高美湿地</h2><p>高美湿地之前其实不是湿地是对外开放的<a href="https://www.wikiwand.com/zh-cn/%E6%B5%B7%E6%B0%B4%E6%B5%B4%E5%A0%B4" target="_blank" rel="external">海水浴场</a>，湿地也是这几十年形成的。主要的原因是旁边建了一个台中港导致泥沙淤积。后面又建了一组风力发电站，才有了今天照片中的这番景色。</p>
<p>到了高美湿地以后第一个感受就是风大，到桥的边上感觉都能够被吹起来。第二感觉就是这“风扇叶子”好大啊，站在发电机组旁边想着这玩意要是砸下来不就GG了。高美湿地一直是以夕阳的美景著称，但是我去的那天天上全都是云，偶尔有几个“窟窿”还不是在海的那一边，可能是我来得太早了吧。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_1512374762267.jpg" alt="别人拍的高美湿地"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160712.png" alt="我拍的高美湿地"></p>
<h2 id="台中公共交通"><a href="#台中公共交通" class="headerlink" title="台中公共交通"></a>台中公共交通</h2><p>台中的公交交通一个比较有特点的地方就是前十公里免费，这种优惠政策在台湾只有台中有，在世界上应该也是蛮罕见的。至于为什么台中会实施这种优惠政策，看网上说的好像是市长选举的时候为了拉选票推出的。另外台中的iUbike前30分钟也是免费的，这福利真是太好了，我在台中的这两天我坐公交一共只花了10+TWD。</p>
<p>不过还是要吐槽一下台中的公交车，发车间隔太长了。除了由之前的快速公交改过来的300路，其他公交线路发车间隔时间都在20分钟以上。去高美湿地的时候来回差不多都等了半个小时的公交，还是台北的公交系统发达啊。</p>
<h2 id="逢甲夜市"><a href="#逢甲夜市" class="headerlink" title="逢甲夜市"></a>逢甲夜市</h2><p>逢甲夜市号称是台湾最大的夜市，这个看他们的牌子就看得出来，别的夜市一般都只加上“观光夜市”的字样，逢甲霸气的加上了“国际观光夜市”。</p>
<p>东西的确挺多的，占了两条街，我选了两个队排得比较长的吃了一下，感觉还行。</p>
<p>旁边隔着的就是逢甲大学了，外面人潮涌动，逢甲大学里面却只有稀稀疏疏几个人。学校旁边是台湾最大的夜市，一定能够换着花样吃。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160837.png" alt="逢甲夜市"></p>
<h2 id="民宿体验"><a href="#民宿体验" class="headerlink" title="民宿体验"></a>民宿体验</h2><p>民宿因为是当天才找的，所以能够选择的余地并不过。不过总体的体验还好，民宿小姐姐特意来新光三越接我。我住的是8人混住房实际住的只有4个人，高中之后第一次睡上下铺。地点在台中市的市中心，旁边就是新光三越和市政府。卫生情况也还可以，比较特别的就是认识两个小伙伴，一个是在世新大学读传媒的马来西亚交换生；另一个是台湾这边的一个老师。</p>
<p>和他们聊的时候也收获到了蛮多的东西，比如说为什么马拉西亚人的中文那么好、台北冬天为什么一直下雨。其实想想，一个人出来玩有一个人出来玩的好处吧，如果结伴出行可能就不一定会认识到这些人有这些收获。</p>
<h2 id="东海大学"><a href="#东海大学" class="headerlink" title="东海大学"></a>东海大学</h2><p>东海大学是台中的一个有基督教背景的私立大学，台中非常有名的路思义教堂就在东海大学里面。有人评价路思义教堂是中华文化与西方相遇而产生的最佳作品。对建筑风格没什么了解，不过觉得还是挺有特色的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160942.png" alt="东海大学"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-160940.png" alt="路思义教堂"></p>
<h2 id="台中歌剧院"><a href="#台中歌剧院" class="headerlink" title="台中歌剧院"></a>台中歌剧院</h2><p>台中歌剧院的建筑非常有特色，位于台湾市中心。歌剧院由钢筋混沙土构造，部分为钢构造；建筑师伊东丰雄的设计，以人类最原始的“树屋”、“洞窟”的概念设计出美声国栋（Sexy guy），内部墙面均为曲面。共有58面曲墙，兴建难度极高。</p>
<p>比较感兴趣的时候楼顶的空中花园，但是因为修养关闭没能够上去，可惜了。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-162744.png" alt="台中歌剧院"></p>
<h2 id="台湾美术馆"><a href="#台湾美术馆" class="headerlink" title="台湾美术馆"></a>台湾美术馆</h2><p>前面的歌剧院因为11：30才开馆，所以也没能够进去参观，台湾美术馆应该是这次台中之行在室内看的最受震撼的地方吧。里面各种艺术展品都挺震撼的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-163955.png" alt="enter description here" title="美术馆外景-1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-164107.png" alt="enter description here" title="美术馆外景-2"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-163957.png" alt="enter description here" title="美术馆内景-1"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-163959.png" alt="enter description here" title="美术馆内景-2"></p>
<h2 id="静宜大学"><a href="#静宜大学" class="headerlink" title="静宜大学"></a>静宜大学</h2><p>前面的东海大学是基督教大学，而静宜大学是一所天主教大学。之前一直是一所女子大学，从1993年开始才开始招收男生。校园里面环境挺好的。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-164806.png" alt="enter description here" title="静宜大学校门"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-164735.png" alt="enter description here" title="静宜大学图书馆"></p>
<h2 id="宫原眼科"><a href="#宫原眼科" class="headerlink" title="宫原眼科"></a>宫原眼科</h2><p>当我第一次看到这个景点名的时候，我一直以为是一个医院，看他的<a href="http://www.miyahara.com.tw/" target="_blank" rel="external">官网</a>也不知道具体是干啥的。</p>
<p>后来才知道是一个甜品店，建造於西元1927年，是由日本眼科博士宫原武熊所兴建，也是日治时代台中规模最大的眼科诊所。后来成了危楼，被「日出」团队重新复原成现在颇具特色的宫原眼科。</p>
<p>听说里面的冰淇淋和凤梨酥比较有名，尝了一下冰淇淋，还不错。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_4_171204-165730.png" alt="enter description here" title="宫原眼科"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到周末，看天气预报台北这个周末还是下雨，这次下定决心要南下避雨。早上做的决定，然后查火车时间、定民宿九点才从家里出发，也算是一个说走就走的旅行吧。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>士林半日游</title>
    <link href="https://www.liuin.cn/2017/11/28/%E5%A3%AB%E6%9E%97%E5%8D%8A%E6%97%A5%E6%B8%B8/"/>
    <id>https://www.liuin.cn/2017/11/28/士林半日游/</id>
    <published>2017-11-28T06:54:34.000Z</published>
    <updated>2017-12-02T06:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>周末在家瘫了一天，另一天不想浪费了。刚好最近看了一个体验东京科技馆的视频，就想看看台湾科技馆里面有什么有趣的东西。</p>
<a id="more"></a>
<h2 id="台湾科教馆"><a href="#台湾科教馆" class="headerlink" title="台湾科教馆"></a>台湾科教馆</h2><p>台湾科教馆在台北捷运红线士林站附近，不过离捷运站还是有一点距离，推荐骑Ubike过去。旁边是台北天文馆和台北新儿童乐园。这一带还是挺适合亲子周末游玩了。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_001.jpg" alt="外景（我去的时候装修，没拍到）"></p>
<p>科教馆里面3楼到7楼是常设展厅，需要购票。价格是100TWD，学生优惠价70TWD。另外还有一些项目，立体剧院、地震剧场啥的，我也花了20TWD体验了一把地震剧场。</p>
<p>3楼到7楼的常设展厅还是挺有意思的，有许多学习互动的设备。涉及的知识差不多就是初中高中所学的生物、物理、化学和数学的相关知识（哈哈，感觉回到了高中课堂）。正常速度走走看看能够看两三个小时。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG2.jpeg" alt="模型"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG3.jpeg" alt="馆内的科普讲座"></p>
<p>参观完常设展厅，我也体验了一下地震剧场。就是一个比较大的圆盘里面坐十个人左右，然后模拟4-5级的地震，然后屏幕上播放<a href="https://www.wikiwand.com/zh-hans/921%E5%A4%A7%E5%9C%B0%E9%9C%87" target="_blank" rel="external">921地震</a>的纪录片。地震体验效果一般，但是屏幕上播放的纪录片挺震撼的。</p>
<h2 id="士林夜市"><a href="#士林夜市" class="headerlink" title="士林夜市"></a>士林夜市</h2><p>到了士林，自然要来这里有名的士林夜市逛一逛了。因为来得太早了，之前得到的逛夜市经验（哪里排队多哪里好吃）也派不上用场。于是就在网上找了推荐比较多的两家店平吃了一下。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG4.jpeg" alt="士林市场大门"></p>
<p>1972年就开业的忠诚号蚵仔煎应该是士林夜市最具代表性的小吃了，上次吃蚵仔煎还是在花莲的东门夜市，不过上次因为是带回民宿吃的，所以最后吃到的东西是凉的。这次的蚵仔煎感觉就跟上次的大不一样了，非常好吃。<br>注意台湾这边蚵仔煎的叫法是从闽南话音译过来的，叫（ǒu ā jīan）</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG1.jpeg" alt="忠诚号"></p>
<p>士林夜市大门旁边的十全排骨也不错，份量很足，吃起来很带劲。</p>
<p>十全排骨 照片</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末在家瘫了一天，另一天不想浪费了。刚好最近看了一个体验东京科技馆的视频，就想看看台湾科技馆里面有什么有趣的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>夜登剑潭山</title>
    <link href="https://www.liuin.cn/2017/11/26/%E5%A4%9C%E7%99%BB%E5%89%91%E6%BD%AD%E5%B1%B1/"/>
    <id>https://www.liuin.cn/2017/11/26/夜登剑潭山/</id>
    <published>2017-11-26T06:53:03.000Z</published>
    <updated>2017-12-02T06:56:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>看台北夜景一般的选择都是象山，那边有台北的地标建筑——101大楼。除了象山，剑潭山也是看台北夜景的一个不错的选择，人少而且能够换一个角度看台北。</p>
<a id="more"></a>
<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><p>剑潭山在士林夜市旁边，能够在士林夜市吃饱喝足再上山。不过我最近迷恋金拱门，这次是吃了两包大暑才上山的。</p>
<p>我们上山的线路大致是<a href="https://www.google.com/maps/dir/%E6%8D%B7%E9%81%8B%E5%8A%8D%E6%BD%AD%E7%AB%99+111%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A3%AB%E6%9E%97%E5%8D%80/104%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E5%B1%B1%E5%8C%BA%E8%80%81%E5%9C%B0%E6%96%B9%E8%A7%82%E6%99%AF%E5%B9%B3%E5%8F%B0/@25.0834816,121.5280835,15.63z/data=!4m24!4m23!1m15!1m1!1s0x3442aeb1dc51736b:0xba7e1559c66ed90f!2m2!1d121.525077!2d25.084873!3m4!1m2!1d121.5249269!2d25.0796471!3s0x3442aeb29b137353:0xc81fe0fdb900019a!3m4!1m2!1d121.5297702!2d25.0831486!3s0x3442aeae847cf9f3:0x8ad42cd31d0e8b6a!1m5!1m1!1s0x3442aea758724e3b:0x6f606638fbaff219!2m2!1d121.536965!2d25.0904047!3e2" target="_blank" rel="external">这样</a>的：</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_1512191397180.jpg" alt="登山路线"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_12_2_WechatIMG5.jpeg" alt="登山，出发！"></p>
<h2 id="爬山"><a href="#爬山" class="headerlink" title="爬山"></a>爬山</h2><p>我们上山的时候刚好是晚上十二点，山上几乎是一个人都没有，遇到的唯一一对外国情侣还是我们刚上去他们从山上下来的时候遇到了。</p>
<p>想想半夜如果你爬山爬着爬着发现后面有两个人其实也蛮恐怖的。</p>
<p>上山道路的前一半是有路灯的，而且这些路灯是通宵开着的，所以前面一段路还是不用怕的。途中也能够遇到一些寺庙、亭子，甚至还有羽毛球场（在山上打羽毛球就不怕球掉书上吗）。下雨的时候还能够遇到一些动物，大型的蜗牛啥的。</p>
<p>不过有路灯的登山道到的观景平台能够看到的景色就有限了，在剑潭山看台北夜景最好的地方就是老地方观景平台了。</p>
<p>晚上想要到老地方观景平台就必须要走一段没有路灯的山路，就是上面的路线图中的标出来比较大的路。一开始我们以为是公路，结果就是比前面的登山道大一点点。凌晨一点，两个大老爷们纠结了十多分钟走不走这个没有路灯的路，各种想象什么土狗、浪、蛇什么的。最后还是鼓起勇气走了，一开始走的时候有点害怕，一篇漆黑，但是走到后面习惯了也就不那么怕了。</p>
<p>没有路灯的路走个半个小时应该就到了剑潭山看夜景最好的位置——老地方观景平台了，能够望见远处的101大楼和松山机场，晚上的景色十分美丽。</p>
<p>由于晚上手机照相的质量实在是太差了，照片可以参考<a href="http://hx271.pixnet.net/blog/post/61096888-%E3%80%90%E5%8F%B0%E5%8C%97%E5%8D%81%E5%A4%A7%E5%A4%9C%E6%99%AF%E3%80%91%E9%98%BF%E5%AE%8F%E9%81%94%E4%BA%BA%E7%B2%BE%E9%81%B8~%E5%A4%9C%E6%99%9A%E5%BF%85%E7%9C%8B%E7%9A%84" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看台北夜景一般的选择都是象山，那边有台北的地标建筑——101大楼。除了象山，剑潭山也是看台北夜景的一个不错的选择，人少而且能够换一个角度看台北。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台湾延时摄影集合</title>
    <link href="https://www.liuin.cn/2017/11/21/%E5%8F%B0%E6%B9%BE%E5%BB%B6%E6%97%B6%E6%91%84%E5%BD%B1%E9%9B%86%E5%90%88/"/>
    <id>https://www.liuin.cn/2017/11/21/台湾延时摄影集合/</id>
    <published>2017-11-20T20:18:29.000Z</published>
    <updated>2017-12-21T12:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在台湾交换期间拍摄的延时摄影的集合，没有专业设备，大家看看就好</p>
<a id="more"></a>
<h2 id="捷运文湖线"><a href="#捷运文湖线" class="headerlink" title="捷运文湖线"></a>捷运文湖线</h2><p>因为文湖线的列车都是自动驾驶的，所以才能够有机会拍出这些片子</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/OYMoRU74TuA" frameborder="0" gesture="media" allowfullscreen></iframe>

<h2 id="高美湿地"><a href="#高美湿地" class="headerlink" title="高美湿地"></a>高美湿地</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/w2I4JOnycek" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

<h2 id="阿里山"><a href="#阿里山" class="headerlink" title="阿里山"></a>阿里山</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/8eSMokATgSA" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/A_Kyl8niz6k" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

<h2 id="台北-官渡大桥"><a href="#台北-官渡大桥" class="headerlink" title="台北 官渡大桥"></a>台北 官渡大桥</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/lyk9iq5TAnc" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在台湾交换期间拍摄的延时摄影的集合，没有专业设备，大家看看就好&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>台北捷运集章第一弹</title>
    <link href="https://www.liuin.cn/2017/11/19/%E5%8F%B0%E5%8C%97%E6%8D%B7%E8%BF%90%E9%9B%86%E7%AB%A0%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
    <id>https://www.liuin.cn/2017/11/19/台北捷运集章第一弹/</id>
    <published>2017-11-19T02:04:09.000Z</published>
    <updated>2017-11-27T02:06:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我完成集齐捷运纪念章章计划第一天。</p>
<a id="more"></a>
<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><p>先放一张台北整体的捷运图吧。<br><img src="https://data2.liuin.cn/story-writer/2017_11_12_1510496480309.jpg" alt="enter description here" title="台北捷运路线图"><br>计划一天完成线路：<br>永安市场（黄线）–&gt; 南势角（黄线）–&gt; 忠孝新生 –&gt; 顶埔（蓝线） –&gt; 南港展览馆 –&gt;  动物园（棕线） –&gt; 南京复兴 –&gt; 松山（绿线）–&gt; 新店（绿线） –&gt; 公馆（绿线）–&gt; 回家<br>将蓝线、棕线和绿线的所有捷运站的纪念章都集齐</p>
<p>实际完成的情况是这样的：<br>永安市场（黄线）–&gt; 南势角（黄线）–&gt; 忠孝新生 –&gt; 顶埔（蓝线） –&gt; 南港展览馆 –&gt; 南京复兴 –&gt; 松山（路线） –&gt; 大安森林公园（红线）–&gt; 回家<br>只完成了蓝线的集章任务</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG4.jpeg" alt="enter description here" title="出发"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG1-1.jpeg" alt="enter description here" title="捷运一日票"></p>
<h2 id="台北捷运“观光线”——棕线"><a href="#台北捷运“观光线”——棕线" class="headerlink" title="台北捷运“观光线”——棕线"></a>台北捷运“观光线”——棕线</h2><h2 id="大湖公园"><a href="#大湖公园" class="headerlink" title="大湖公园"></a>大湖公园</h2><p>今天一天中比较好玩的景点差不多都在棕线上，大湖公园本来不是计划游玩的景点，但是却花了一个小时在里面逛。主要是捷运一转弯就看到了这个非常美丽的湖，忍不住下去看两眼。<br> “大湖”旧名十四份埤（陂），因白鹭成群又称白鹭湖，采用中国园林式设计。其实这个湖的名气不是很大，只是台北的一个区域性公园。但是风景是相当的好，公园里面的小动物也挺多的，是一个踏青的好地方。</p>
<p> <img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG9.jpeg" alt="enter description here" title="大湖湖面"></p>
<p> <img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG11.jpeg" alt="enter description here" title="大湖风景"></p>
<h2 id="松山机场"><a href="#松山机场" class="headerlink" title="松山机场"></a>松山机场</h2><p>松山机场应该是台湾的第三大机场，仅次于桃园机场和高雄机场。是一个军民合用机场，民用部分为台北国际航空站，主要负责的是台晚本地的航线以及两岸航线，最远的也只是到韩国；军用部分为空军松山基地。<br>松山机场开放了一个观景平台供游客参观，在第一航厦和第二航厦之间。机场里面有明显的指示牌，非常容易找到。装饰非常棒，就是今天一直是阴雨天气，看到的是灰蒙蒙的一片，或许以后天气好的时候可以再来一次。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG10.jpeg" alt="enter description here" title="观景台指引"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG3.jpeg" alt="enter description here" title="台北国际航空站"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG5.jpeg" alt="enter description here" title="观景平台"></p>
<h2 id="饶河夜市"><a href="#饶河夜市" class="headerlink" title="饶河夜市"></a>饶河夜市</h2><p>来之前听说松山捷运站有一个花一千五百万新台币修建的叫“河流彎曲之處”的捷运艺术还不错，趁今天买了捷运一日票特地去看看。到了现场感受没有图片中那么好看，可能是图片修过吧。<br>饶河夜市就在松山捷运站的出口处，是台北一个比较有名的观光夜市。逛夜市就要找人多的地方，这次花了半个小时在两个地方吃了点东西，都非常好吃，一个是爆浆鸡翅另一个是进夜市口能够看到的福州世祖胡椒饼</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG7.jpeg" alt="enter description here" title="松山捷运站艺术"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG2.jpeg" alt="enter description here" title="饶河观光夜市"></p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG6.jpeg" alt="enter description here" title="福州世祖胡椒饼"></p>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>这一天一共集章44块，台北的捷运站一共有117个。现在的进度是44/117，看来还要两次才能够完成台北捷运全制霸的计划。</p>
<p><img src="https://data2.liuin.cn/story-writer/2017_11_27_WechatIMG12.jpeg" alt="enter description here" title="成果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我完成集齐捷运纪念章章计划第一天。&lt;/p&gt;
    
    </summary>
    
      <category term="台湾" scheme="https://www.liuin.cn/categories/%E5%8F%B0%E6%B9%BE/"/>
    
    
      <category term="游记" scheme="https://www.liuin.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git 停止追踪文件</title>
    <link href="https://www.liuin.cn/2017/11/16/Git-%E5%81%9C%E6%AD%A2%E8%BF%BD%E8%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>https://www.liuin.cn/2017/11/16/Git-停止追踪文件/</id>
    <published>2017-11-16T14:18:23.000Z</published>
    <updated>2017-11-24T17:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时在使用Git的时候，大多会有这种情况：因为在初始化git的时候没有考虑周全导致有些不需要的文件已经被被追踪，或者想不让在某次提交以后一些文件不被追踪（比如说一些涉及隐私的配置文件）。这里提供一些解决方案</p>
<a id="more"></a>
<h2 id="Git中忽略某些文件"><a href="#Git中忽略某些文件" class="headerlink" title="Git中忽略某些文件"></a>Git中忽略某些文件</h2><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>在一开始git进行初始化的时候我们可以通过修改配置文件.gitignore来指定哪些文件是不需要被追踪的。<br>文件 .gitignore 的格式规范如下：</p>
<ul>
<li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配。(glob 模式是指 shell 所使用的简化了的正则表达式)</li>
<li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li>
</ul>
<h3 id="快捷设置-gitignore"><a href="#快捷设置-gitignore" class="headerlink" title="快捷设置.gitignore"></a>快捷设置.gitignore</h3><p>一般我们在项目中会有超多不需要放到git上面的东西，但是一个一个加入到.gitignore中是非常麻烦的。可以使用gitignore.io提供的API快速创建<br>设置别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.ignore &apos;!gi() &#123; curl -L -s https://www.gitignore.io/api/$@ ; &#125;; gi&apos;</div></pre></td></tr></table></figure></p>
<p>这样以后创建项目的时候只需要结合你的开发环境通过关键进行快捷创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git ignore macOS &gt;&gt; .gitignore</div></pre></td></tr></table></figure></p>
<h2 id="忽略未追踪文件"><a href="#忽略未追踪文件" class="headerlink" title="忽略未追踪文件"></a>忽略未追踪文件</h2><p>在项目开发中可能会有一些新的不想追踪的文件生成，这个时候有两种处理方法：</p>
<ol>
<li>更新.gitignore 文件，这种操作能够使得其他人也忽略对这些文件的追踪</li>
<li>将忽略的文件加到项目文件夹中的 .git/Info/exclude文件中，这种操作只对本地起作用。</li>
</ol>
<h2 id="停止追踪某些文件"><a href="#停止追踪某些文件" class="headerlink" title="停止追踪某些文件"></a>停止追踪某些文件</h2><p>如果文件已经被git追踪，不想在后面的开发中提交这些文件的修改，这里有两个方案：</p>
<ol>
<li>删除文件以后再加到.gitignore 中，这种方案会使得原来那个可能有用的文件就丢失了。</li>
<li>使用<code>git update-index --assume-unchanged [filename]</code> 来忽略某些文件的修改, 这种修改只能再本地起作用，当别人使用这个项目的时候并不会起作用。</li>
<li>使用<code>git rm --cached filename</code>把文件从暂存里移除掉，之后的修改就不会追踪这些文件了。这种方案能够同步到远程，但是别人在拉取你的更新时也要消除对这些文件的追踪。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时在使用Git的时候，大多会有这种情况：因为在初始化git的时候没有考虑周全导致有些不需要的文件已经被被追踪，或者想不让在某次提交以后一些文件不被追踪（比如说一些涉及隐私的配置文件）。这里提供一些解决方案&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Git" scheme="https://www.liuin.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux中搭建FTP文件服务器</title>
    <link href="https://www.liuin.cn/2017/11/12/Linux%E4%B8%AD%E6%90%AD%E5%BB%BAFTP%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.liuin.cn/2017/11/12/Linux中搭建FTP文件服务器/</id>
    <published>2017-11-12T14:32:33.000Z</published>
    <updated>2017-12-04T14:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章对在Linux中使用VSFTPD部署FTP文件服务器做了一个简单的介绍。<br>使用的是VSFTPD，vsftpd 是“very secure FTP damon”的缩写，vsftpd的一个最大的特点是它的安全性。</p>
<a id="more"></a>
<h2 id="安装并启动FTP服务器"><a href="#安装并启动FTP服务器" class="headerlink" title="安装并启动FTP服务器"></a>安装并启动FTP服务器</h2><h3 id="安装VSFTPD"><a href="#安装VSFTPD" class="headerlink" title="安装VSFTPD"></a>安装VSFTPD</h3><p>使用 <code>apt-get</code> 安装 vsftpd：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vsftpd -y</div></pre></td></tr></table></figure></p>
<p><code>-y</code> 参数表示对所有问题用yes来回答</p>
<h3 id="启动VSFTPD"><a href="#启动VSFTPD" class="headerlink" title="启动VSFTPD"></a>启动VSFTPD</h3><p>安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经监听了 21 端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netstat -nltp | grep 21</div></pre></td></tr></table></figure></p>
<p>如果没有启动，可以手动开启 VSFTPD 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start vsftpd.service</div></pre></td></tr></table></figure></p>
<h2 id="配置用户访问目录"><a href="#配置用户访问目录" class="headerlink" title="配置用户访问目录"></a>配置用户访问目录</h2><h3 id="新建用户主目录"><a href="#新建用户主目录" class="headerlink" title="新建用户主目录"></a>新建用户主目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/uftp</div></pre></td></tr></table></figure>
<p>创建登录欢迎文件用来测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo touch /home/uftp/welcome.txt</div></pre></td></tr></table></figure></p>
<h3 id="新建用户-uftp-并设置密码"><a href="#新建用户-uftp-并设置密码" class="headerlink" title="新建用户 uftp 并设置密码"></a>新建用户 uftp 并设置密码</h3><p>创建一个用户 uftp :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd -d /home/uftp -s /bin/bash uftp</div></pre></td></tr></table></figure></p>
<p>为用户 uftp 设置密码 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd uftp</div></pre></td></tr></table></figure></p>
<p>删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /etc/pam.d/vsftpd</div></pre></td></tr></table></figure></p>
<h3 id="限制该用户仅能通过-FTP-访问"><a href="#限制该用户仅能通过-FTP-访问" class="headerlink" title="限制该用户仅能通过 FTP 访问"></a>限制该用户仅能通过 FTP 访问</h3><p>限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -s /sbin/nologin uftp</div></pre></td></tr></table></figure></p>
<h3 id="修改-vsftpd-配置"><a href="#修改-vsftpd-配置" class="headerlink" title="修改 vsftpd 配置"></a>修改 vsftpd 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a+w /etc/vsftpd.conf</div></pre></td></tr></table></figure>
<p>修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 限制用户对主目录以外目录访问</div><div class="line">chroot_local_user=YES</div><div class="line"></div><div class="line"># 指定一个 userlist 存放允许访问 ftp 的用户列表</div><div class="line">userlist_deny=NO</div><div class="line">userlist_enable=YES</div><div class="line"></div><div class="line"># 记录允许访问 ftp 用户列表</div><div class="line">userlist_file=/etc/vsftpd.user_list</div><div class="line"></div><div class="line"># 不配置可能导致莫名的530问题</div><div class="line">seccomp_sandbox=NO</div><div class="line"></div><div class="line"># 允许文件上传</div><div class="line">write_enable=YES</div><div class="line"></div><div class="line"># 使用utf8编码</div><div class="line">utf8_filesystem=YES</div></pre></td></tr></table></figure></p>
<p>新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo touch /etc/vsftpd.user_list</div><div class="line">sudo chmod a+w /etc/vsftpd.user_list</div></pre></td></tr></table></figure></p>
<p>修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uftp</div></pre></td></tr></table></figure>
<h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><p>设置主目录访问权限（只读）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a-w /home/uftp</div></pre></td></tr></table></figure></p>
<p>新建公共目录，并设置权限（读写）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</div></pre></td></tr></table></figure></p>
<p>重启vsftpd 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart vsftpd.service</div></pre></td></tr></table></figure></p>
<p>也可以多创建几个用户来实现对主目录的不同读写权限的管理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章对在Linux中使用VSFTPD部署FTP文件服务器做了一个简单的介绍。&lt;br&gt;使用的是VSFTPD，vsftpd 是“very secure FTP damon”的缩写，vsftpd的一个最大的特点是它的安全性。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 结构解析</title>
    <link href="https://www.liuin.cn/2017/11/09/Hexo-%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.liuin.cn/2017/11/09/Hexo-结构解析/</id>
    <published>2017-11-09T08:19:57.000Z</published>
    <updated>2017-11-24T17:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>对Hexo 的配置文件夹进行分析。</p>
<a id="more"></a>
<h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><p>在hexo的主目录下有一下文件和文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">├── _config.yml	    #站点配置文件</div><div class="line">├── db.json            #缓存文件</div><div class="line">├── debug.log       #hexo s --debug 产生的日志文件</div><div class="line">├── node_modules    #nodejs 本地包</div><div class="line">├── package.json    #nodejs 本地配置信息</div><div class="line">├── public               #生成的静态文件所在的文件夹</div><div class="line">├── scaffolds          #新生成page的模板</div><div class="line">├── source             #文章所在文件夹</div><div class="line">└── themes           #主题所在文件夹</div><div class="line"></div><div class="line">5 directories, 4 files</div></pre></td></tr></table></figure></p>
<h2 id="主题文件结构"><a href="#主题文件结构" class="headerlink" title="主题文件结构"></a>主题文件结构</h2><p>一个主题的大致结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml   # 主题配置文件</div><div class="line">├── languages     #语言文件夹</div><div class="line">├── layout            # 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式</div><div class="line">├── scripts        # 脚本文件夹</div><div class="line">└── source       # 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。</div></pre></td></tr></table></figure></p>
<h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式。Hexo 默认使用的Swig模板引擎。使用语法和Jinja2、Django模板引擎类似。</p>
<p>文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。</p>
<p>每个模板都默认使用 layout 布局，实际对应的文件是_layout.swig 文件。下面是各个页面所对应的模板的名称：</p>
<table>
<thead>
<tr>
<th>模板</th>
<th>用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>首页</td>
</tr>
<tr>
<td>post</td>
<td>文章</td>
<td>index</td>
</tr>
<tr>
<td>page</td>
<td>分页</td>
<td>index</td>
</tr>
<tr>
<td>archive</td>
<td>归档</td>
<td>index</td>
</tr>
<tr>
<td>category</td>
<td>分类归档</td>
<td>archive</td>
</tr>
<tr>
<td>tag</td>
<td>标签归档</td>
<td>archive</td>
</tr>
</tbody>
</table>
<p>局部模版（Partial）<br>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。</p>
<h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>只需要把 JavaScript 文件放到 scripts 文件夹，在启动时就会自动载入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Hexo 的配置文件夹进行分析。&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://www.liuin.cn/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="https://www.liuin.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux cd后追加ls</title>
    <link href="https://www.liuin.cn/2017/11/04/Linux-cd%E5%90%8E%E8%BF%BD%E5%8A%A0ls/"/>
    <id>https://www.liuin.cn/2017/11/04/Linux-cd后追加ls/</id>
    <published>2017-11-04T11:15:10.000Z</published>
    <updated>2017-11-23T11:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道你们在使用命令行的时候有没有这种体验：就是每次到一个新的目录下就会追加一个命令ls看看该目录下面有什么。这里提供一个在cd后自动追加ls的解决方案。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>查看了一下经常使用的电脑的输入指令统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1	740  33.3634%    ls</div><div class="line">2	372  16.7719%    cd</div><div class="line">3	273  12.3084%    git</div><div class="line">4	177  7.98016%    vim</div></pre></td></tr></table></figure></p>
<p>发现排在前两位的是ls和cd，而且每次cd以后必然会ls一次。所以何必不把这两个东西合在一起呢。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在环境变量的配置文件（.zshrc或者.bashrc）中加入一小段脚本即可:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">cdl</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> [ -n <span class="variable">$1</span> ] ; <span class="keyword">then</span></div><div class="line">		<span class="built_in">cd</span> <span class="variable">$1</span></div><div class="line">		ls</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">cd</span></div><div class="line">		ls</div><div class="line">	<span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> <span class="built_in">cd</span>=cdl</div></pre></td></tr></table></figure></p>
<p>这段脚本应该都看得懂吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道你们在使用命令行的时候有没有这种体验：就是每次到一个新的目录下就会追加一个命令ls看看该目录下面有什么。这里提供一个在cd后自动追加ls的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Bandit 通关题解</title>
    <link href="https://www.liuin.cn/2017/11/01/Bandit-%E9%80%9A%E5%85%B3%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.liuin.cn/2017/11/01/Bandit-通关题解/</id>
    <published>2017-11-01T14:20:54.000Z</published>
    <updated>2017-11-24T07:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bandit 是一个适合学习Linux指令的游戏吧，规则是每一关利用提供的hostname:port和上一关的password（第一关提供password）通过ssh进入到给定的环境中，按照题目要求拿到指定的Key作为下一关的password。挺好玩的，目前尚未通关，在此挖个坑</p>
<a id="more"></a>
<p>网址：<a href="http://overthewire.org/wargames/bandit/" target="_blank" rel="external">http://overthewire.org/wargames/bandit/</a></p>
<p>通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh bandit0@bandit.labs.overthewire.org -p 2220</div></pre></td></tr></table></figure></p>
<p>开玩吧！</p>
<h2 id="Level-0-→-Level-1"><a href="#Level-0-→-Level-1" class="headerlink" title="Level 0 → Level 1"></a>Level 0 → Level 1</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat readme</div></pre></td></tr></table></figure>
<h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>boJ9jbbUNNfktd78OOpsqOltutMc3MY1</p>
<h2 id="Level-1-→-Level-2"><a href="#Level-1-→-Level-2" class="headerlink" title="Level 1 → Level 2"></a>Level 1 → Level 2</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>在Linux中含有特殊字符的文件名可能和shell的一些语法向冲突，比如这一道题目中的“-”，shell就认定其之后的内容为参数。所以我们要通过./-表示文件来消除这种歧义。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ./-</div></pre></td></tr></table></figure>
<h3 id="Key-1"><a href="#Key-1" class="headerlink" title="Key"></a>Key</h3><p>CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</p>
<h2 id="Level-2-→-Level-3"><a href="#Level-2-→-Level-3" class="headerlink" title="Level 2 → Level 3"></a>Level 2 → Level 3</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>文件名中含有空格可以用反斜杠+空格表示</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat spaces\ in\ this\ filename</div></pre></td></tr></table></figure>
<h3 id="Key-2"><a href="#Key-2" class="headerlink" title="Key"></a>Key</h3><p>UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</p>
<h2 id="Level-3-→-Level-4"><a href="#Level-3-→-Level-4" class="headerlink" title="Level 3 → Level 4"></a>Level 3 → Level 4</h2><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat inhere/.inhere</div></pre></td></tr></table></figure>
<h3 id="Key-3"><a href="#Key-3" class="headerlink" title="Key"></a>Key</h3><p>pIwrPrtPN36QITSp3EQaw936yaFoFgAB</p>
<h2 id="Level-4-→-Level-5"><a href="#Level-4-→-Level-5" class="headerlink" title="Level 4 → Level 5"></a>Level 4 → Level 5</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>通过file 列出文件属性来查看那些文件是ASCII编码（人类可读的）</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cd inhere/</div><div class="line">file ./*</div><div class="line"></div><div class="line">./-file00: data</div><div class="line">./-file01: data</div><div class="line">./-file02: data</div><div class="line">./-file03: data</div><div class="line">./-file04: data</div><div class="line">./-file05: data</div><div class="line">./-file06: data</div><div class="line">./-file07: ASCII text</div><div class="line">./-file08: data</div><div class="line">./-file09: data</div><div class="line"></div><div class="line">cat ./-file07</div></pre></td></tr></table></figure>
<h3 id="Key-4"><a href="#Key-4" class="headerlink" title="Key"></a>Key</h3><p>koReBOKuIDDepwhWk7jZC0RTdopnAYKh</p>
<h2 id="Level-5-→-Level-6"><a href="#Level-5-→-Level-6" class="headerlink" title="Level 5 → Level 6"></a>Level 5 → Level 6</h2><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>和上一题一样通过文件属性进行查找，用到find指令，只需要通过文件大小就能够确定文件位置了</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd inhere/</div><div class="line">find . -size 1033c</div><div class="line"></div><div class="line">./maybehere07/.file2</div><div class="line"></div><div class="line">cat ./maybehere07/.file2</div></pre></td></tr></table></figure>
<h3 id="Key-5"><a href="#Key-5" class="headerlink" title="Key"></a>Key</h3><p>DXjZPULLxYr17uwoI01bNLQbtFemEgo7</p>
<h2 id="Level-6-→-Level-7"><a href="#Level-6-→-Level-7" class="headerlink" title="Level 6 → Level 7"></a>Level 6 → Level 7</h2><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>考察使用find指令查找文件，用到了-user、-group、-size参数。同时使用 /dev/null 来过滤多余的错误信息</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</div><div class="line"></div><div class="line">cat /var/lib/dpkg/info/bandit7.password</div></pre></td></tr></table></figure>
<h3 id="Key-6"><a href="#Key-6" class="headerlink" title="Key"></a>Key</h3><p>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</p>
<h2 id="Level-7-→-Level-8"><a href="#Level-7-→-Level-8" class="headerlink" title="Level 7 → Level 8"></a>Level 7 → Level 8</h2><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>使用grep指令在文件中查找指定字符串</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep millionth ./data.txt</div></pre></td></tr></table></figure>
<h3 id="Key-7"><a href="#Key-7" class="headerlink" title="Key"></a>Key</h3><p>cvX2JJa4CFALtqS87jk27qwqGhBM9plV</p>
<h2 id="Level-8-→-Level-9"><a href="#Level-8-→-Level-9" class="headerlink" title="Level 8 → Level 9"></a>Level 8 → Level 9</h2><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>uniq 指令能够找出文件中相邻的重复的或者不重复的行，key是所给的文件中只出现一次的行，所以要先进行排序，然后再用uniq找出不重复的行</p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort data.txt | uniq -u</div></pre></td></tr></table></figure>
<h3 id="Key-8"><a href="#Key-8" class="headerlink" title="Key"></a>Key</h3><p>UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</p>
<h2 id="Level-9-→-Level-10"><a href="#Level-9-→-Level-10" class="headerlink" title="Level 9 → Level 10"></a>Level 9 → Level 10</h2><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>strings 指令能够找出所给文件中可以打印的字符串，然后再使用grep查找key所在的位置</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings data.txt | grep ==</div></pre></td></tr></table></figure>
<h3 id="Key-9"><a href="#Key-9" class="headerlink" title="Key"></a>Key</h3><p>truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</p>
<h2 id="Level-10-→-Level-11"><a href="#Level-10-→-Level-11" class="headerlink" title="Level 10 → Level 11"></a>Level 10 → Level 11</h2><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>使用base64指令对以base64编码的文本进行解码</p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat data.txt | base64 --decode</div></pre></td></tr></table></figure>
<h3 id="Key-10"><a href="#Key-10" class="headerlink" title="Key"></a>Key</h3><p>IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</p>
<h2 id="Level-11-→-Level-12"><a href="#Level-11-→-Level-12" class="headerlink" title="Level 11 → Level 12"></a>Level 11 → Level 12</h2><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>所给的文本中的字符都被旋转了13个位置，所以我们使用tr命令将这些字符全部旋转回来</p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat data.txt | tr &apos;A-Za-z&apos; &apos;N-ZA-Mn-za-m&apos;</div></pre></td></tr></table></figure>
<h3 id="Key-11"><a href="#Key-11" class="headerlink" title="Key"></a>Key</h3><p>5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</p>
<h2 id="Level-12-→-Level-13"><a href="#Level-12-→-Level-13" class="headerlink" title="Level 12 → Level 13"></a>Level 12 → Level 13</h2><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>所给的文件是一个经过多重压缩以后的二进制文件，首先使用xxd指令将二进制文件进行反转。然后不断使用file指令得到文件信息再调用相应的解压缩指令进行解压缩。其中用到的压缩指令有：gzip、bzip2、tar </p>
<h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">xxd -r data.txt data2</div><div class="line">file data2</div><div class="line">data2: gzip compressed data, was &quot;data2.bin&quot;, from Unix, last modified: Thu Jun 6 13:59:44 2013, max compression</div><div class="line">mv data2 data.gz</div><div class="line">gzip -d data.gz</div><div class="line">file data</div><div class="line">data: bzip2 compressed data, block size = 900k</div><div class="line">bzip2 -d data</div><div class="line">bzip2: Can&apos;t guess original name for data -- using data.out</div><div class="line">file data.out</div><div class="line">data.out: gzip compressed data, was &quot;data4.bin&quot;, from Unix, last modified: Thu Jun 6 13:59:43 2013, max compression</div><div class="line">zcat data.out &gt; data3</div><div class="line">file data3</div><div class="line">data3: POSIX tar archive (GNU)</div><div class="line">tar -xvf data3</div><div class="line">data5.bin</div><div class="line">file data5.bin</div><div class="line">data5.bin: POSIX tar archive (GNU)</div><div class="line">tar -xvf data5.bin</div><div class="line">data6.bin</div><div class="line">file data6.bin</div><div class="line">bzip2 -d data6.bin</div><div class="line">bzip2: Can&apos;t guess original name for data6.bin -- using data6.bin.out</div><div class="line">file data6.bin.out</div><div class="line">data6.bin.out: POSIX tar archive (GNU)</div><div class="line">tar -xvf data6.bin.out</div><div class="line">data8.bin</div><div class="line">file data8.bin</div><div class="line">data8.bin: gzip compressed data, was &quot;data9.bin&quot;, from Unix, last modified: Thu Jun  6 13:59:43 2013, max compression</div><div class="line">zcat data8.bin &gt; data9.bin</div><div class="line">file data9.bin</div><div class="line">data9.bin: ASCII text</div><div class="line">cat data9.bin</div><div class="line">8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</div></pre></td></tr></table></figure>
<h3 id="Key-12"><a href="#Key-12" class="headerlink" title="Key"></a>Key</h3><p>8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</p>
<h2 id="Level-13-→-Level-14"><a href="#Level-13-→-Level-14" class="headerlink" title="Level 13 → Level 14"></a>Level 13 → Level 14</h2><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>给出的是bandit14的私钥，要求使用这个私钥登录bandit14获取Key，这里用到了ssh -i 指令</p>
<h3 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /etc/bandit_pass/bandit14</div><div class="line">ssh -i sshkey.private bandit14@localhost</div><div class="line">cat /etc/bandit_pass/bandit14</div></pre></td></tr></table></figure>
<h3 id="Key-13"><a href="#Key-13" class="headerlink" title="Key"></a>Key</h3><p>4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</p>
<p>#Bandit Level 14 → Level 15</p>
<h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h3><h3 id="Key-14"><a href="#Key-14" class="headerlink" title="Key"></a>Key</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bandit 是一个适合学习Linux指令的游戏吧，规则是每一关利用提供的hostname:port和上一关的password（第一关提供password）通过ssh进入到给定的环境中，按照题目要求拿到指定的Key作为下一关的password。挺好玩的，目前尚未通关，在此挖个坑&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://www.liuin.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://www.liuin.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
