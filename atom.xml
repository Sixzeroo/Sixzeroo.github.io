<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sixzeroo的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liuin.cn/"/>
  <updated>2017-07-15T13:56:41.000Z</updated>
  <id>http://www.liuin.cn/</id>
  
  <author>
    <name>Sixzeroo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Leetcode] Longest Substring Without Repeating Characters 题解</title>
    <link href="http://www.liuin.cn/2017/07/15/Leetcode-Longest-Substring-Without-Repeating-Characters-%E9%A2%98%E8%A7%A3/"/>
    <id>http://www.liuin.cn/2017/07/15/Leetcode-Longest-Substring-Without-Repeating-Characters-题解/</id>
    <published>2017-07-15T13:46:55.000Z</published>
    <updated>2017-07-15T13:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description" target="_blank" rel="external">https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个字符串，求出其中最长的不重复字符串的长度</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>用一个数组记录每个字符出现的索引值，没有出现的为零</li>
<li>设定一个开始指针表示计算字符开始的地方（初始值为0），这样每次扫描到一个字符的时候，先更新这个指针。然后计算开始指针到扫描的地方的字符串长度更新结果值。</li>
<li>最后更新字符出现的索引值</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a[<span class="number">256</span>];</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,num=<span class="number">0</span>,start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.size();i++)</div><div class="line">        &#123;</div><div class="line">            start=start&gt;a[s[i<span class="number">-1</span>]]?start:a[s[i<span class="number">-1</span>]];</div><div class="line">            num=i-start;</div><div class="line">            ans=ans&gt;num?ans:num;</div><div class="line">            a[s[i<span class="number">-1</span>]]=i;</div><div class="line">        &#125;</div><div class="line">        ans=ans&gt;num?ans:num;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接:&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/longest-substring-without-repeating-characters/#/description&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="贪心" scheme="http://www.liuin.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>初识 Git hook钩子</title>
    <link href="http://www.liuin.cn/2017/06/12/%E5%88%9D%E8%AF%86-Git-hook%E9%92%A9%E5%AD%90/"/>
    <id>http://www.liuin.cn/2017/06/12/初识-Git-hook钩子/</id>
    <published>2017-06-11T17:13:23.000Z</published>
    <updated>2017-06-11T17:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用git一直停留在比较浅的层面，最近涉及部署的相关东西的时候接触到了Git的hook，感觉这个东西非常有趣，下面总结一下我对Git中hook的认识以及分享一下我使用git的hook部署hexo博客到服务器上的过程。</p>
<a id="more"></a>
<h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Git钩子是仓库中特定事件发生时Git自动运行的普通脚本。每当我们创建一个仓库的时候，我们仓库的.git/hooks目录中有一些示例脚本。<br>这些脚本可以是任何脚本语言编写的，只要它们最后能编译到可执行文件。每次脚本中的#!/bin/sh定义了你的文件将被如何解释。</p>
<h3 id="pre-receive"><a href="#pre-receive" class="headerlink" title="pre-receive"></a>pre-receive</h3><p>git有非常多的本地钩子和服务端钩子，因为这次我使用的主要是pre-receive来部署博客，所以介绍一下pre-receive钩子,更多的钩子信息可以在文章最后的参考信息中查看<br>pre-receive钩子在有人用git push向仓库推送代码时被执行。它只存在于远端仓库中，而不是原来的仓库中。<br>所以我们可以用来在hexo提交更新的时候对服务器上的相关资源进行更新</p>
<h2 id="使用-Git-hook-自动部署-Hexo博客"><a href="#使用-Git-hook-自动部署-Hexo博客" class="headerlink" title="使用 Git hook 自动部署 Hexo博客"></a>使用 Git hook 自动部署 Hexo博客</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>首先我们要在服务器器创建一个管理内容的仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/repo</div><div class="line"><span class="built_in">cd</span> /var/repo</div><div class="line">sudo git init --bare blog.git</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里使用了 –bare 参数，是为了创建一个裸仓库，没有工作区。我们不会在裸仓库上进行操作，它只为共享而存在。<br>后面在hook的设置中会讲到工作区的设置</p>
</blockquote>
<h3 id="配置hook"><a href="#配置hook" class="headerlink" title="配置hook"></a>配置hook</h3><p>因为是在push操作时才发生的事件所以使用post-receive钩子，钩子将在git操作完以后运行<br>在blog.git/hooks 目录下新建一个post-receive文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/repo/blog.git/hooks</div><div class="line">vim post-reveive</div></pre></td></tr></table></figure></p>
<p>在post-receive中写入以下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout <span class="_">-f</span></div></pre></td></tr></table></figure>
<p>注意，/var/www/hexo 要换成你自己的部署目录，一般可能都是 /var/www/html。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。<br>同时加上可执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure></p>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>修改 hexo 目录下的 _config.yml 文件 ，使得hexo博客可以自动deploy到服务器上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@www.example.com:/var/repo/blog.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>切换服务器地址和目录为你自己的服务器的地址和目录</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>此时你创建新的文章的时候就可以通过git hook来进行自动部署了，而不需要使用GitHub page的相关服务了</p>
<hr>
<p>参考：<br><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前使用git一直停留在比较浅的层面，最近涉及部署的相关东西的时候接触到了Git的hook，感觉这个东西非常有趣，下面总结一下我对Git中hook的认识以及分享一下我使用git的hook部署hexo博客到服务器上的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://www.liuin.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>HDU 3092 Least common multiple 素数打表+ 完全背包</title>
    <link href="http://www.liuin.cn/2017/05/18/HDU-3092-Least-common-multiple-%E7%B4%A0%E6%95%B0%E6%89%93%E8%A1%A8-%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    <id>http://www.liuin.cn/2017/05/18/HDU-3092-Least-common-multiple-素数打表-完全背包/</id>
    <published>2017-05-18T08:01:14.000Z</published>
    <updated>2017-05-18T08:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3092" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3092</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出两个数S和M，让你将S分解成多个整数的和，使得这些整数的最小公倍数最大，输出这个最小公倍数（对M取模以后）</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>首先在S的范围内进行素数打表，这样就可以看成取出这么多个素数进行相加的完全背包问题（因为同一个可以取多次，相乘以后照样和其他素数互质）</li>
<li>与我们平常见到的完全背包不同的是，如果一个素数取多次，他的代价和收益都是相乘的，而不是相加，所以写法应该在01背包的基础上进行改进，枚举可能相乘的个数</li>
<li>因为相乘一定会溢出，同时取模会影响到比较大小，所以采取取对数的方法来对dp数组进行操作，同时另外开一个数组ans[]来记录答案</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10005</span>; </div><div class="line"></div><div class="line"><span class="keyword">bool</span> is_prime[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn],num;</div><div class="line"><span class="keyword">double</span> dp[maxn];</div><div class="line">ll ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	num=<span class="number">0</span>;</div><div class="line">	<span class="built_in">memset</span>(is_prime,<span class="literal">true</span>,<span class="keyword">sizeof</span>(is_prime));</div><div class="line">	is_prime[<span class="number">0</span>]=is_prime[<span class="number">1</span>]=<span class="literal">false</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(is_prime[i])prime[num++]=i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num &amp;&amp; i*prime[j]&lt;maxn;j++)</div><div class="line">		&#123;</div><div class="line">			is_prime[i*prime[j]]=<span class="literal">false</span>;</div><div class="line">			<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;  <span class="comment">//保证每一个合数都被他的最小质因数排除</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S,M;</div><div class="line">	prime_init();</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;S,&amp;M)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">		fill(ans,ans+num,<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num &amp;&amp; prime[i]&lt;S ;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">double</span> tmp=<span class="built_in">log</span>(prime[i]*<span class="number">1.0</span>);</div><div class="line">			<span class="keyword">for</span>(ll j=S;j&gt;=prime[i];j--)</div><div class="line">				<span class="keyword">for</span>(ll k=prime[i],q=<span class="number">1</span>;k&lt;=j;k*=prime[i],q++)  <span class="comment">//可以重复，q表示重复次数</span></div><div class="line">					<span class="keyword">if</span>(dp[j-k]+q*tmp&gt;dp[j])</div><div class="line">					&#123;</div><div class="line">						dp[j]=dp[j-k]+q*tmp;</div><div class="line">						ans[j]=ans[j-k]*k%M;</div><div class="line">					&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[S]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接： &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3092&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=3092&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="http://www.liuin.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 21 题解</title>
    <link href="http://www.liuin.cn/2017/05/17/Educational-Codeforces-Round-21-%E9%A2%98%E8%A7%A3/"/>
    <id>http://www.liuin.cn/2017/05/17/Educational-Codeforces-Round-21-题解/</id>
    <published>2017-05-17T09:39:44.000Z</published>
    <updated>2017-05-17T16:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="http://codeforces.com/contest/808" target="_blank" rel="external">http://codeforces.com/contest/808</a></p>
<a id="more"></a>
<h2 id="A-Lucky-Year"><a href="#A-Lucky-Year" class="headerlink" title="A Lucky Year"></a>A Lucky Year</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义一个幸运数字：有且只含有一个非零数字。给出一个数n，求这个增加多少个数以后才能够成为一个幸运数字</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>数据范围比较小，求出位数，得到最高位大1后面全是0的数，拿这个数去减原来的数就行了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n,i;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;n/(i*<span class="number">10</span>);i*=<span class="number">10</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,n/i*i+i-n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="B-Average-Sleep-Time"><a href="#B-Average-Sleep-Time" class="headerlink" title="B Average Sleep Time"></a>B Average Sleep Time</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给出一个包含n个元素的序列，表示每天的睡眠时间，同时给出一个k，表示相邻k天是一个周期，总共有n-k+1个周期，求周期平均睡眠时间</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>根据公式直接进行求解，输出的时候多输出几位，保证精度</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n,k,r;</div><div class="line">	<span class="keyword">double</span> ans;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">double</span> tmp=<span class="number">0</span>;</div><div class="line">		ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> weeks=n-k+<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">			tmp+=a[i];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			ans+=tmp/weeks;</div><div class="line">			tmp+=a[i+<span class="number">1</span>];</div><div class="line">			tmp-=a[i-k+<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.12lf\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C-Tea-Party"><a href="#C-Tea-Party" class="headerlink" title="C Tea Party"></a>C Tea Party</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出n个人的杯子的容量，以及你所含有的水的量，要求给n个人倒茶，必须满足以下条件：1.每个人的杯子必须至少倒一半的茶  2.每个人的杯子中含有的茶的量是一个整数  3.所有的茶都要倒完  4.所有人都要满意（不存在有的人杯子大但是茶少的情况）<br>判断是否存在满足上述条件的倒茶方法</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><ul>
<li>首先判断能够给每个人至少倒一半的茶</li>
<li>根据总量推算出倒茶的比例，再按照杯子的容量进行排序，按照比例向下取整进倒茶，多出来的部分分给杯子容量最大的人，以此类推</li>
<li>注意取整操作，以及满足至少倒一半的操作</li>
</ul>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100005</span>; </div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> v,u,id;</div><div class="line">&#125;a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp1</span><span class="params">(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> a.v&lt;b.v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp2</span><span class="params">(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> a.id&lt;b.id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n,w;</div><div class="line">	<span class="keyword">int</span> sum;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)</div><div class="line">	&#123;</div><div class="line">		sum=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a[i].v;</div><div class="line">			a[i].id=i;</div><div class="line">			sum+=a[i].v;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">double</span> rate=<span class="number">1.0</span>*w/sum;</div><div class="line">		<span class="keyword">if</span>(rate&lt;<span class="number">0.5</span>) </div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> last=w,tmp;</div><div class="line">		<span class="keyword">bool</span> endflag=<span class="number">0</span>;</div><div class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,Cmp1);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			tmp=<span class="built_in">floor</span>(a[i].v*rate);</div><div class="line">			<span class="keyword">if</span>(<span class="number">2</span>*tmp&lt;a[i].v) tmp++; <span class="comment">//防止在一半以下</span></div><div class="line">            a[i].u=tmp;</div><div class="line">			last-=a[i].u;</div><div class="line">			<span class="keyword">if</span>(last&lt;<span class="number">0</span>) endflag=<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(endflag)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;last&gt;<span class="number">0</span>;i--)</div><div class="line">		&#123;</div><div class="line">			tmp=a[i].v-a[i].u;</div><div class="line">			<span class="keyword">if</span>(last&gt;=tmp) </div><div class="line">			&#123;</div><div class="line">				last-=tmp;</div><div class="line">				a[i].u=a[i].v;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">                a[i].u+=last;</div><div class="line">				last=<span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,Cmp2);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;a[i].u&lt;&lt;<span class="string">" "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="D-Array-Division"><a href="#D-Array-Division" class="headerlink" title="D Array Division"></a>D Array Division</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给出一个序列，允许将两个数相互交换一次或者不交换，问是否能够将两个数分成相等的两个部分</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>先求出前缀和，再用Set维护两个集合，前面的集合/后面的集合，从1开始将序列分成两半，判断两者差的一半是否在集合中能够找到</p>
<h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>使用二分，求出前缀和，从前向后枚举交换的元素，用二分向前向后查找是否能够找到交换以后形成总数的一半的部分</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><h4 id="思路一-1"><a href="#思路一-1" class="headerlink" title="思路一"></a>思路一</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100005</span>; </div><div class="line"><span class="keyword">int</span> a[maxn],n;</div><div class="line">ll s[maxn],tot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">	&#123;</div><div class="line">		tot=<span class="number">0</span>;</div><div class="line">		s[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">		<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s1,s2;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">			s2.insert(a[i]);</div><div class="line">			tot+=a[i];</div><div class="line">			s[i]=s[i<span class="number">-1</span>]+a[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(tot&amp;<span class="number">1</span>) </div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		ll A,B,tmp;</div><div class="line">		<span class="keyword">bool</span> endflag=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			A=s[i],B=s[n]-s[i];</div><div class="line">			<span class="keyword">if</span>(A==B)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">				endflag=<span class="number">0</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			tmp=A-B;</div><div class="line">			s2.erase(s2.find(a[i]));</div><div class="line">			s1.insert(a[i]);</div><div class="line">			<span class="keyword">if</span>(tmp&gt;<span class="number">0</span> &amp;&amp; tmp%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; tmp&lt;=MAXX)  <span class="comment">//差值为偶数</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(s1.find(tmp/<span class="number">2</span>)!=s1.end())</div><div class="line">				&#123;</div><div class="line">					<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">					endflag=<span class="number">0</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(tmp&lt;<span class="number">0</span> &amp;&amp; tmp%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; tmp&gt;=-MAXX)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(s2.find(-tmp/<span class="number">2</span>)!=s2.end())</div><div class="line">				&#123;</div><div class="line">					<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">					endflag=<span class="number">0</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(endflag) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="思路二-1"><a href="#思路二-1" class="headerlink" title="思路二"></a>思路二</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100005</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line">ll s[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    ll tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        tot += a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(tot%<span class="number">2</span>!=<span class="number">0</span> || n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    tot/=<span class="number">2</span>;</div><div class="line">    s[<span class="number">0</span>]=a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)&#123;</div><div class="line">        s[i]=s[i<span class="number">-1</span>]+a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==tot)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//正二分</span></div><div class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=i<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">            ll temp=s[mid]+a[i];</div><div class="line">            <span class="keyword">if</span>(temp==tot)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp&lt;tot)  l=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        l=i+<span class="number">1</span>,r=n;</div><div class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">            ll temp=s[n]-s[mid]+a[i];</div><div class="line">            <span class="keyword">if</span>(temp==tot)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp&lt;tot) r=mid<span class="number">-1</span>;</div><div class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛链接：&lt;a href=&quot;http://codeforces.com/contest/808&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://codeforces.com/contest/808&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Codeforces" scheme="http://www.liuin.cn/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>HDU 1868 Consecutive sum 数学+枚举</title>
    <link href="http://www.liuin.cn/2017/05/16/HDU-1868-Consecutive-sum-%E6%95%B0%E5%AD%A6-%E6%9E%9A%E4%B8%BE/"/>
    <id>http://www.liuin.cn/2017/05/16/HDU-1868-Consecutive-sum-数学-枚举/</id>
    <published>2017-05-16T07:38:13.000Z</published>
    <updated>2017-05-16T07:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1868" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1868</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个数n，求出这个数被分解成连续多个数之和的方案数</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>连续多个数之和可以看成等差数列，得到公式：x(i+i+x-1)/2=n。这样我们可以枚举x，在根号n的复杂度下将问题求解</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100005</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	ll x;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=<span class="number">2</span>*x;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>((<span class="number">2</span>*x)%i) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">int</span> tmp=<span class="number">2</span>*x/i+<span class="number">1</span>-i;</div><div class="line">			<span class="keyword">if</span>(tmp%<span class="number">2</span>) <span class="keyword">continue</span>;</div><div class="line">			ans++;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1868&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=1868&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学专题" scheme="http://www.liuin.cn/tags/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HDU 1083 Courses 匈牙利算法模板题</title>
    <link href="http://www.liuin.cn/2017/05/15/HDU-1083-Courses-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
    <id>http://www.liuin.cn/2017/05/15/HDU-1083-Courses-匈牙利算法模板题/</id>
    <published>2017-05-15T13:42:22.000Z</published>
    <updated>2017-05-15T13:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1083" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1083</a></p>
<a id="more"></a>
<h2 id="题意-amp-题解"><a href="#题意-amp-题解" class="headerlink" title="题意&amp;题解"></a>题意&amp;题解</h2><p>给出一个二分图求最大匹配个数，判断时候和一边的数相等，以此题当做匈牙利算法模板</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100005</span>; </div><div class="line">  </div><div class="line"><span class="comment">/* ************************************************************************** </span></div><div class="line">//二分图匹配（匈牙利算法的DFS实现） </div><div class="line">//初始化：g[][]两边顶点的划分情况 </div><div class="line">//建立g[i][j]表示i-&gt;j的有向边就可以了，是左边向右边的匹配 </div><div class="line">//g没有边相连则初始化为0 </div><div class="line">//L是匹配左边的顶点数，R是匹配右边的顶点数 </div><div class="line">//调用：res=hungary();输出最大匹配数 </div><div class="line">//优点：适用于稠密图，DFS找增广路，实现简洁易于理解 </div><div class="line">//时间复杂度:O(VE) </div><div class="line">// ***************************************************************************/  </div><div class="line"><span class="comment">//顶点编号从1开始的  </span></div><div class="line"><span class="keyword">int</span> LN,RN;<span class="comment">//L,R数目  </span></div><div class="line"><span class="keyword">int</span> g[maxn][maxn], linker[maxn];    <span class="comment">//所连得边直接从做到右</span></div><div class="line"><span class="keyword">bool</span> used[maxn];  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> L)</span><span class="comment">//从左边开始找增广路径  </span></span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> R;  </div><div class="line">    <span class="keyword">for</span>(R = <span class="number">1</span>; R &lt;= RN; R++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(g[L][R]!=<span class="number">0</span> &amp;&amp; !used[R])  </div><div class="line">        &#123;  </div><div class="line">            <span class="comment">//找增广路，反向  </span></div><div class="line">            used[R]=<span class="literal">true</span>;  </div><div class="line">            <span class="keyword">if</span>(linker[R] == <span class="number">-1</span> || dfs(linker[R]))  </div><div class="line">            &#123;  </div><div class="line">                linker[R]=L;  </div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//这个不要忘了，经常忘记这句  </span></div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span> ;  </div><div class="line">    <span class="keyword">int</span> L;  </div><div class="line">    <span class="built_in">memset</span>(linker,<span class="number">-1</span>,<span class="keyword">sizeof</span>(linker));  </div><div class="line">    <span class="keyword">for</span>( L = <span class="number">1</span>; L &lt;= LN; L++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));  </div><div class="line">        <span class="keyword">if</span>(dfs(L) != <span class="number">0</span>)  </div><div class="line">            res++;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> res;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;LN,&amp;RN);</div><div class="line">		<span class="keyword">int</span> num,tmp;</div><div class="line">		<span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LN;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</div><div class="line">                g[i][tmp]=<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> ans=hungary();</div><div class="line">		<span class="keyword">if</span>(ans==LN) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=1083&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论-二分图" scheme="http://www.liuin.cn/tags/%E5%9B%BE%E8%AE%BA-%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>HDU 1162 Eddy&#39;s picture 最小生成树 Prim模板</title>
    <link href="http://www.liuin.cn/2017/05/15/HDU-1162-Eddy-s-picture-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-Prim%E6%A8%A1%E6%9D%BF/"/>
    <id>http://www.liuin.cn/2017/05/15/HDU-1162-Eddy-s-picture-最小生成树-Prim模板/</id>
    <published>2017-05-15T01:42:20.000Z</published>
    <updated>2017-05-15T01:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>算法链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1162" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1162</a></p>
<a id="more"></a>
<h2 id="题意-amp-题解"><a href="#题意-amp-题解" class="headerlink" title="题意&amp;题解"></a>题意&amp;题解</h2><p>裸的最小生成树，先计算出各个点的距离，跑一遍Prime。以此题记录Prime算法模板</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">205</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">2005</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> cost[maxn][maxn];</div><div class="line"><span class="keyword">double</span> mincost[maxn];  <span class="comment">//到已经确定的点的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[maxn];</div><div class="line"><span class="keyword">int</span> V;</div><div class="line"><span class="keyword">double</span> xx[maxn],yy[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((xx[a]-xx[b])*(xx[a]-xx[b])+(yy[a]-yy[b])*(yy[a]-yy[b]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;i++)</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>,&amp;xx[i],&amp;yy[i]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=V;j++)</div><div class="line">		&#123;</div><div class="line">			cost[i][j]=cost[j][i]=get_dist(i,j);</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">prim</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    fill(mincost,mincost+V+<span class="number">1</span>,INF);  <span class="comment">//注意建图方式</span></div><div class="line">    fill(used,used+V+<span class="number">1</span>,<span class="literal">false</span>);   <span class="comment">//注意建图方式</span></div><div class="line">    mincost[<span class="number">1</span>]=<span class="number">0</span>;        <span class="comment">//注意建图方式</span></div><div class="line">    <span class="comment">//used[0]=true;     不在这里初始初始化</span></div><div class="line"></div><div class="line">    <span class="keyword">double</span> res=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;i++) <span class="comment">//注意建图组织方式</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//在这里对收录一号元素，因为要遍历一号元素的相邻结点</span></div><div class="line">            <span class="keyword">if</span>(!used[i]&amp;&amp;((v==<span class="number">-1</span>)||mincost[i]&lt;mincost[v]))v=i;   </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(v==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        used[v]=<span class="literal">true</span>;</div><div class="line">        res+=mincost[v];</div><div class="line">		<span class="comment">//cout&lt;&lt;v&lt;&lt;" "&lt;&lt;res&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;i++)    <span class="comment">//注意建图方式</span></div><div class="line">            mincost[i]=min(mincost[i],cost[v][i]);  <span class="comment">//不判断是否相邻</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;V)!=EOF)</div><div class="line">	&#123;</div><div class="line">		build();</div><div class="line">		<span class="keyword">double</span> ans=prim();</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1162&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=1162&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论-最小生成树" scheme="http://www.liuin.cn/tags/%E5%9B%BE%E8%AE%BA-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2017 CCPC 中南地区邀请赛 E Strange Optimization</title>
    <link href="http://www.liuin.cn/2017/05/15/2017-CCPC-%E4%B8%AD%E5%8D%97%E5%9C%B0%E5%8C%BA%E9%82%80%E8%AF%B7%E8%B5%9B-E-Strange-Optimization/"/>
    <id>http://www.liuin.cn/2017/05/15/2017-CCPC-中南地区邀请赛-E-Strange-Optimization/</id>
    <published>2017-05-14T16:50:29.000Z</published>
    <updated>2017-05-14T17:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://202.197.224.59/OnlineJudge2/index.php/Contest/read_problem/cid/43/pid/1268" target="_blank" rel="external">http://202.197.224.59/OnlineJudge2/index.php/Contest/read_problem/cid/43/pid/1268</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义一个函数：f(t)=min(i,j∈ℤ)|i/n−j/m+t|，给出n和m，求使得f(t)最大的t的取值。（式子可以查看原网页中的式子）</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为i,j都是可以取任意整数的，所以进行式子中的前两个部分进行通分以后就是(im-jn)/mn。<br>观察我们可以得到要得到最大值<strong>t的值就是上述式子的最小精度的一半</strong>，求最小精度就是要求分子(im-jn)能表示的数的间隔<br>这个间隔我用一个比较巧妙的方法求得，用一个优先队列来存放这两个数，不断从优先队列中取出两个最小的数做差，然后再放入优先队列中，直到取出的这两个最小的数是相同的。<br>最后对得到的分数进行化简就是最后的答案了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">llc</span><span class="params">(ll a,ll b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> a*b/gcd(a,b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	ll n,m;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</div><div class="line">	&#123;</div><div class="line">		priority_queue&lt;ll,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; Q;</div><div class="line">		Q.push(n);</div><div class="line">		Q.push(m);</div><div class="line">		ll s1,s2,tmp;</div><div class="line">		s1=Q.top(),Q.pop(),s2=Q.top(),Q.pop();</div><div class="line">		<span class="keyword">while</span>(s1!=s2)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//cout&lt;&lt;s1&lt;&lt;s2&lt;&lt;endl;</span></div><div class="line">			tmp=<span class="built_in">abs</span>(s1-s2);</div><div class="line">			Q.push(s1),Q.push(s2),Q.push(tmp);</div><div class="line">            s1=Q.top(),Q.pop(),s2=Q.top(),Q.pop();</div><div class="line">		&#125;</div><div class="line">		ll p=s1,q=<span class="number">2</span>*m*n;</div><div class="line">		tmp=gcd(p,q);</div><div class="line">		<span class="keyword">while</span>(tmp!=<span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			p/=tmp,q/=tmp;</div><div class="line">			tmp=gcd(p,q);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;p&lt;&lt;<span class="string">"/"</span>&lt;&lt;q&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>做出这道题的时候还是有些激动的，因为在现场赛上两题如果罚时不多的话就是铜牌。哈哈，如果我去打这场比赛就能够拿一个铜牌。<br>好好努力，提升实力，以后在区域赛上拿牌就美滋滋了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://202.197.224.59/OnlineJudge2/index.php/Contest/read_problem/cid/43/pid/1268&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://202.197.224.59/OnlineJudge2/index.php/Contest/read_problem/cid/43/pid/1268&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学专题" scheme="http://www.liuin.cn/tags/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HDU 1874 畅通工程续 最短路Dijkstra模板题</title>
    <link href="http://www.liuin.cn/2017/05/15/HDU-1874-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD-%E6%9C%80%E7%9F%AD%E8%B7%AFDijkstra%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
    <id>http://www.liuin.cn/2017/05/15/HDU-1874-畅通工程续-最短路Dijkstra模板题/</id>
    <published>2017-05-14T16:44:08.000Z</published>
    <updated>2017-05-14T16:46:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1874</a></p>
<a id="more"></a>
<h2 id="题意-amp-题解"><a href="#题意-amp-题解" class="headerlink" title="题意&amp;题解"></a>题意&amp;题解</h2><p>裸的最短路，注意重边问题。以此题来代表Dijkstra模板（邻接矩阵）</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">205</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">2005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[maxn][maxn];  <span class="comment">//邻接矩阵建图</span></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> used[maxn];  <span class="comment">//表示是否被收录</span></div><div class="line"><span class="keyword">int</span> V,E;</div><div class="line"></div><div class="line"><span class="comment">//建图</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span>(d));</div><div class="line">	<span class="built_in">memset</span>(cost,INF,<span class="keyword">sizeof</span>(cost));    <span class="comment">//初始化邻接矩阵</span></div><div class="line">	<span class="keyword">int</span> u,v,w;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)</div><div class="line">	&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;u,&amp;v,&amp;w);</div><div class="line">        cost[u][v]=cost[v][u]=min(cost[v][u],w);  <span class="comment">//去重边操作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    fill(d,d+V,INF);</div><div class="line">    fill(used,used+V,<span class="literal">false</span>);</div><div class="line">    d[s]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v=<span class="number">-1</span>;</div><div class="line">        <span class="comment">//从未被收录的点中找出一个距离最小的点</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!used[j]&amp;&amp;(v==<span class="number">-1</span>||d[j]&lt;d[v]))v=j;  <span class="comment">//v==-1设置哨兵，确定有没有没被收录的点</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(v==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        used[v]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">            d[i]=min(d[i],d[v]+cost[v][i]);  <span class="comment">//松弛操作</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S,T;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;V,&amp;E)!=EOF)</div><div class="line">	&#123;</div><div class="line">		build();</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;S,&amp;T);</div><div class="line">		dijkstra(S);</div><div class="line">		<span class="keyword">int</span> ans=d[T];</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans==INF?<span class="number">-1</span>:ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1874&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=1874&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论-最短路" scheme="http://www.liuin.cn/tags/%E5%9B%BE%E8%AE%BA-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>HDU 2544 最短路 SPFA模板题</title>
    <link href="http://www.liuin.cn/2017/05/14/HDU-2544-%E6%9C%80%E7%9F%AD%E8%B7%AF-SPFA%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
    <id>http://www.liuin.cn/2017/05/14/HDU-2544-最短路-SPFA模板题/</id>
    <published>2017-05-14T13:48:29.000Z</published>
    <updated>2017-05-14T16:47:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=2544</a></p>
<a id="more"></a>
<h2 id="题意-amp-题解"><a href="#题意-amp-题解" class="headerlink" title="题意&amp;题解"></a>题意&amp;题解</h2><p>最短路模板题，以此题记录SPFA模板</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10005</span>;</div><div class="line"><span class="keyword">int</span> visit[maxn],dist[maxn];</div><div class="line"><span class="keyword">int</span> n,m,id;</div><div class="line"></div><div class="line"><span class="comment">//链式前向星建图</span></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> v,w,next;</div><div class="line">&#125;edges[maxm];</div><div class="line"><span class="keyword">int</span> head[maxn]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span>   <span class="comment">//u到v的权值为w的边</span></span></div><div class="line">&#123;</div><div class="line">	edges[id].v=v;</div><div class="line">	edges[id].w=w;</div><div class="line">	edges[id].next=head[u];    <span class="comment">//把之前的第一条边作为当前边的最后一条边</span></div><div class="line">	head[u]=id++;              <span class="comment">//id为从0开始的标号</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//建图</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">	<span class="keyword">int</span> u,v,w;</div><div class="line">	id=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;u,&amp;v,&amp;w);</div><div class="line">		addedge(u,v,w);</div><div class="line">		addedge(v,u,w);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span></div><div class="line">&#123;</div><div class="line">    fill(visit,visit+maxn,<span class="number">0</span>);   <span class="comment">//标记所有节点未被访问</span></div><div class="line">    fill(dist,dist+maxn,INF);   <span class="comment">//求最短路，初始化最大值</span></div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</div><div class="line">    visit[st]=<span class="number">1</span>;</div><div class="line">    dist[st]=<span class="number">0</span>;</div><div class="line">    Q.push(st);</div><div class="line">    <span class="keyword">while</span> (!Q.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> now=Q.front();</div><div class="line">        Q.pop();</div><div class="line">        visit[now]=<span class="number">0</span>;           <span class="comment">//注意此处将该点标记为未访问</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=edges[i].next)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> v=edges[i].v;</div><div class="line">            <span class="keyword">int</span> w=edges[i].w;</div><div class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[now]+w)   <span class="comment">//最短路松弛</span></div><div class="line">            &#123;</div><div class="line">                dist[v]=dist[now]+w;</div><div class="line">                <span class="keyword">if</span>(!visit[v])</div><div class="line">                &#123;</div><div class="line">                    Q.push(v);</div><div class="line">                    visit[v]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n==<span class="number">0</span> &amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		init();</div><div class="line">		spfa(<span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> ans=dist[n];</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=2544&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=2544&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论-最短路" scheme="http://www.liuin.cn/tags/%E5%9B%BE%E8%AE%BA-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>ACM中常用的STL（二）</title>
    <link href="http://www.liuin.cn/2017/05/13/ACM%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84STL%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.liuin.cn/2017/05/13/ACM中常用的STL（二）/</id>
    <published>2017-05-13T07:47:48.000Z</published>
    <updated>2017-05-13T07:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章讲了STL里面常用容器的用法，这一篇文章将主要讲一场常用函数的用法以及后期补充的一些注意事项</p>
<a id="more"></a>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="next-permutation-prev-permutation-first-last"><a href="#next-permutation-prev-permutation-first-last" class="headerlink" title="next_permutation/prev_permutation(first,last)"></a>next_permutation/prev_permutation(first,last)</h3><p>转换所给区间内的元素到下一个字典序，成功返回TRUE，不成功返回FALSE（不存在下一个字典序）</p>
<h3 id="sort-stable-sort-first-last"><a href="#sort-stable-sort-first-last" class="headerlink" title="sort/stable_sort(first,last)"></a>sort/stable_sort(first,last)</h3><p>对区间内的进行排序，前者为稳定排序，后者为不稳定排序</p>
<h4 id="重载operate-lt-更改排序规则"><a href="#重载operate-lt-更改排序规则" class="headerlink" title="重载operate\&lt;更改排序规则"></a>重载operate\&lt;更改排序规则</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a,b;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp; nodeb) <span class="keyword">const</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(a==nodeb.a)         <span class="comment">//确定优先级a比bda</span></div><div class="line">			<span class="keyword">return</span> b&lt;nodeb.b;</div><div class="line">		<span class="keyword">return</span> a&lt;nodeb.a;     <span class="comment">//优先最小值</span></div><div class="line">	&#125;</div><div class="line">&#125;s[maxn];</div></pre></td></tr></table></figure>
<h4 id="自定义排序函数更改排序规则"><a href="#自定义排序函数更改排序规则" class="headerlink" title="自定义排序函数更改排序规则"></a>自定义排序函数更改排序规则</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp</span><span class="params">(<span class="keyword">const</span> node &amp;x,<span class="keyword">const</span> node &amp;y)</span>   <span class="comment">//自定义比较函数</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(x.a==y.a)                       <span class="comment">//a的优先级大于b</span></div><div class="line">		<span class="keyword">return</span> x.b&lt;y.b;</div><div class="line">	<span class="keyword">return</span> x.a&lt;y.a;                   <span class="comment">//最小值优先</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="partial-sort-first-middle-last"><a href="#partial-sort-first-middle-last" class="headerlink" title="partial_sort(first,middle,last)"></a>partial_sort(first,middle,last)</h3><p>对中间部分元素进行排序，缺省比较函数，可以用于求出最大（或者最小）的k个元素<br>类似的partial_sort_copy(first,last,d_first,d_last) 对部分元素（根据新的容器的范围）进行排序以后复制值新的容器内</p>
<h3 id="lower-bound-upper-bound-first-last-value"><a href="#lower-bound-upper-bound-first-last-value" class="headerlink" title="lower_bound/upper_bound(first,last,value)"></a>lower_bound/upper_bound(first,last,value)</h3><p>前者返回大于等于value的第一个数的迭代器，<br>后者返回大于value的第一个数的迭代器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章讲了STL里面常用容器的用法，这一篇文章将主要讲一场常用函数的用法以及后期补充的一些注意事项&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="STL" scheme="http://www.liuin.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>ACM中常用的STL （一）</title>
    <link href="http://www.liuin.cn/2017/05/13/ACM%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84STL-%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.liuin.cn/2017/05/13/ACM中常用的STL-（一）/</id>
    <published>2017-05-13T07:47:25.000Z</published>
    <updated>2017-05-13T07:53:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期在在刷题的时候发现很多的STL的容器还有函数都用得不是很熟练。总所周知，在刷题的时候一些基本的STL的容器和函数的用法是必不可少的。<br>我将用两篇文章来整理一些常用的STL容器和函数的用法，这一篇主要讲容器</p>
<a id="more"></a>
<h2 id="共通能力"><a href="#共通能力" class="headerlink" title="共通能力"></a>共通能力</h2><p>所有容器中存放的都是值而非引用，即容器进行安插操作时内部实施的是拷贝操作。因此容器的每个元素必须能够被拷贝。如果希望存放的不是副本，容器元素只能是指针。</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue 队列"></a>queue 队列</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>queue的定义需要两个参数，一个是元素类型，一个容器类型，元素类型是必要的，容器类型是可选的，默认为deque类型</p>
<h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><ul>
<li>push(x) 入队，将x接到队列的末端</li>
<li>pop() 出队，弹出队列的第一个元素，注意，并不会返回被弹出元素的值</li>
<li>front() 访问队首元素</li>
<li>back() 访问队尾元素</li>
<li>empty() 判断队列是否为空</li>
<li>size()  访问队列中的元素个数</li>
</ul>
<h3 id="priority-queue-优先队列"><a href="#priority-queue-优先队列" class="headerlink" title="priority_queue 优先队列"></a>priority_queue 优先队列</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>需要三个参数，一个是元素类型，一个是保存数据的容器类型（默认为vector），一个是比较方式（默认为less()方法，即最大值优先），后两个参数可以省去</p>
<h4 id="自定义比较方式"><a href="#自定义比较方式" class="headerlink" title="自定义比较方式"></a>自定义比较方式</h4><h5 id="改变第三个参数比较类"><a href="#改变第三个参数比较类" class="headerlink" title="改变第三个参数比较类"></a>改变第三个参数比较类</h5><p>使用greater比较类即为最小值优先，此时对容器类型不能够省略<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;que3;<span class="comment">//注意“&gt;&gt;”会被认为错误，    </span></div><div class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt; &gt;que4;<span class="comment">////最大值优先</span></div></pre></td></tr></table></figure></p>
<h5 id="自定义比较类（结构体）"><a href="#自定义比较类（结构体）" class="headerlink" title="自定义比较类（结构体）"></a>自定义比较类（结构体）</h5><p>可以自定义一个规定对比方式的结构最为第三个参数进行传入，同上容器类型不能够省略<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义比较结构</span></div><div class="line"><span class="keyword">struct</span> cmp1&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a&gt;b;<span class="comment">//最小值优先</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> cmp2&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a&lt;b;<span class="comment">//最大值优先</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp1&gt;que1;<span class="comment">//最小值优先</span></div><div class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp2&gt;que2;<span class="comment">//最大值优先</span></div></pre></td></tr></table></figure></p>
<h5 id="重载operate-lt"><a href="#重载operate-lt" class="headerlink" title="重载operate&lt;"></a>重载operate&lt;</h5><p>我们也可以对数据结构中的operate&lt;进行重载，从而使用其默认的比较类。<br>这种方法也可以定义结构体中各个变量比较的一个优先级<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义数据结构</span></div><div class="line"><span class="keyword">struct</span> number1&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> number1 &amp;a) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x&gt;a.x;<span class="comment">//最小值优先</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> number2&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> number2 &amp;a) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x&lt;a.x;<span class="comment">//最大值优先</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">    priority_queue&lt;number1&gt;que5; <span class="comment">//最小优先级队列</span></div><div class="line">    priority_queue&lt;number2&gt;que6;  <span class="comment">//最大优先级队列</span></div></pre></td></tr></table></figure></p>
<h4 id="基本方法-1"><a href="#基本方法-1" class="headerlink" title="基本方法"></a>基本方法</h4><ul>
<li>push(x) 插入元素并在容器中进行排序</li>
<li>pop() 移除堆顶元素</li>
<li>top() 获取堆顶元素</li>
<li>empty() 判断队列是否为空</li>
<li>size()  访问队列中的元素个数</li>
<li><h3 id="vector-动态数组"><a href="#vector-动态数组" class="headerlink" title="vector 动态数组"></a>vector 动态数组</h3></li>
</ul>
<h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>一般只使用到一个参数，数据类型参数</p>
<h4 id="基本方法-2"><a href="#基本方法-2" class="headerlink" title="基本方法"></a>基本方法</h4><ul>
<li>重载[]  可以通过下边获取元素</li>
<li>front() 返回第一个元素的值</li>
<li>end()  返回最后一个元素的值</li>
<li>begin()  返回第一个迭代器</li>
<li>end()  返回最后一个迭代器</li>
<li>empty() 判断是否为空</li>
<li>size()  获取元素个数</li>
<li>reserve()  反转数组</li>
<li>clear()  清楚所有元素</li>
<li>push_back(x)  在最后加入元素x</li>
<li>pop_back()</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>可以看成是集合，容器内不含有重复元素<br>针对集合操作的算法函数见函数部分<br>multiset 与set相似，不同就是前者支持重复对象</p>
<h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>第一个参数是数据类型，第二个参数是比较类（默认为less\<key\>,最大值优先）</key\></p>
<h4 id="基本方法-3"><a href="#基本方法-3" class="headerlink" title="基本方法"></a>基本方法</h4><ul>
<li>begin()     　　 返回set容器的第一个元素的迭代器</li>
<li>end() 　　　　 ,返回set容器的最后一个元素的迭代器</li>
<li>clear()   　　     ,删除set容器中的所有的元素</li>
<li>empty() 　　　,判断set容器是否为空</li>
<li>size() 　　　　 ,返回当前set容器中的元素个数</li>
<li>count()              用来查找set中某个某个键值出现的次数。这个函数在set并不是很实用，因为一个键值在set只可能出现0或1次，这样就变成了判断某一键值是否在set出现过了。</li>
<li>erase(key_value)    ,  删除键值key_value的值</li>
<li>find()  ，       返回给定值值得定位器，如果没找到则返回end()。</li>
<li>insert(key_value);       将key_value插入到set中 ，返回值是pair\<set\<int\>::iterator,bool>，bool标志着插入是否成功，而iterator代表插入的位置，若key_value已经在set中，则iterator表示的key_value在set中的位置。</set\<int\></li>
<li>lower_bound(key_value) ，   返回第一个大于等于key_value的定位器</li>
<li>upper_bound(key_value)，   返回最后一个大于等于key_value的定位器</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>自动建立Key － value的对应，可以根据key值快速查找记录。<br>multimap 用法与map用法相似，区别在于允许出现重复的key值</p>
<h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>第一个参数key类型，第二个参数value类型，第三个参数比较类（默认less\<key\>)</key\></p>
<h4 id="基本方法-4"><a href="#基本方法-4" class="headerlink" title="基本方法"></a>基本方法</h4><ul>
<li>重载[]  可以通过下标来修改/插入key-value</li>
<li>insert(key-value)   插入键值对，可以是pair\<key,value\>对，返回一个map的迭代器</key,value\></li>
<li>find(key)     根据key来查找键值对，返回一个map的迭代器</li>
<li>count(key)     返回键为key的键值对个数</li>
<li>lower_bound(key)    返回大于等于key的一个元素的迭代器</li>
<li>upper_bound(key)   返回大于key的第一个元素的迭代器</li>
</ul>
<h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p>添加头文件utility<br>提供存储将两种数据合在一起的数据类型一个数据类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期在在刷题的时候发现很多的STL的容器还有函数都用得不是很熟练。总所周知，在刷题的时候一些基本的STL的容器和函数的用法是必不可少的。&lt;br&gt;我将用两篇文章来整理一些常用的STL容器和函数的用法，这一篇主要讲容器&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="STL" scheme="http://www.liuin.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>POJ 3273 Monthly Expense 二分</title>
    <link href="http://www.liuin.cn/2017/05/10/POJ-3273-Monthly-Expense-%E4%BA%8C%E5%88%86/"/>
    <id>http://www.liuin.cn/2017/05/10/POJ-3273-Monthly-Expense-二分/</id>
    <published>2017-05-10T01:00:40.000Z</published>
    <updated>2017-05-10T01:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=3273" target="_blank" rel="external">http://poj.org/problem?id=3273</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出包含n个元素的数组，将这n个元素分成最多m段，问各种分法中每段和的最大值得最小值是多少</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>最小化最大值问题，使用二分进行求解，需要注意的是，在不断二分的时候边界更新的时候，当中间值不满足条件的时候，新的区间应该是[mid+1,r]，满足条件的时候新的区间应该是[l,mic].即要排除掉不满足条件的数</p>
<h2 id="代码-ing-namespace-std"><a href="#代码-ing-namespace-std" class="headerlink" title="代码                                                                            ing namespace std;"></a>代码                                                                            ing namespace std;</h2><p>#define INF 0x3f3f3f3f<br>typedef long long ll;<br>const int maxn=100010;<br>int n,m;<br>int d[maxn];</p>
<p>bool judge(int s)<br>{<br>    int num=0,tmp=0;<br>    for(int i=0;i&lt;n;i++)<br>    {<br>        if(tmp+d[i]&lt;=s) tmp+=d[i];<br>        else<br>        {<br>            //cout&lt;&lt;tmp&lt;&lt;” “;<br>            tmp=d[i];<br>            num++;<br>        }<br>    }<br>    if(tmp) num++;<br>    //cout&lt;&lt;num&lt;&lt;endl;<br>    return num&lt;=m;<br>}</p>
<p>int fun(int maxv,int sum)<br>{<br>    int l=maxv,r=sum,mid;<br>    while(l<r) {="" mid="l+((r-l)">&gt;1);<br>        mid=(l+r)/2;<br>        //cout&lt;&lt;l&lt;&lt;” “&lt;&lt;r&lt;&lt;” “&lt;&lt;mid&lt;&lt;endl;<br>        if(judge(mid)) r=mid;<br>        else l=mid+1;<br>    }<br>    return l;<br>}</r)></p>
<p>void solve()<br>{<br>    while(scanf(“%d %d”,&amp;n,&amp;m)!=EOF)<br>    {<br>        int sum=0,maxv=0;<br>        for(int i=0;i&lt;n;i++)<br>        {<br>            scanf(“%d”,&amp;d[i]);<br>            sum+=d[i];<br>            maxv=max(maxv,d[i]);<br>        }<br>        printf(“%d\n”,fun(maxv,sum));<br>    }<br>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://poj.org/problem?id=3273&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=3273&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="其他-二分" scheme="http://www.liuin.cn/tags/%E5%85%B6%E4%BB%96-%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ 3258 River Hopscotch 二分</title>
    <link href="http://www.liuin.cn/2017/05/09/POJ-3258-River-Hopscotch-%E4%BA%8C%E5%88%86/"/>
    <id>http://www.liuin.cn/2017/05/09/POJ-3258-River-Hopscotch-二分/</id>
    <published>2017-05-09T15:59:35.000Z</published>
    <updated>2017-05-09T16:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=3258" target="_blank" rel="external">http://poj.org/problem?id=3258</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一条河对岸中n个石子的坐标（加上起点和终点），现在移走m个石子，要求两个石子间的最小值最大，这个最大的最小值</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个一道经典的二分题目，最大化最小值问题。在查找过程中判断一个数是否满足条件的时候，我们可以转化成判断满足这个最小值需要移走的石子数，通过跟给定的石子数进行比较来判断这个数是否满足条件。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</div><div class="line"><span class="keyword">int</span> l,n,m;</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> j=<span class="number">0</span>,num=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(d[i]-d[j]&lt;s) num++;</div><div class="line">		<span class="keyword">else</span> j=i;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//cout&lt;&lt;"s:"&lt;&lt;s&lt;&lt;"num:"&lt;&lt;num&lt;&lt;"m:"&lt;&lt;m&lt;&lt;endl;</span></div><div class="line">	<span class="keyword">return</span> num&lt;=m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ll=<span class="number">0</span>,rr=l+<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> mid;</div><div class="line">	<span class="keyword">while</span>(ll+<span class="number">1</span>&lt;rr)</div><div class="line">	&#123;</div><div class="line">		mid=(ll+rr)&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="comment">//cout&lt;&lt;ll&lt;&lt;" "&lt;&lt;rr&lt;&lt;" "&lt;&lt;mid&lt;&lt;endl;</span></div><div class="line">		<span class="keyword">if</span>(judge(mid))</div><div class="line">			ll=mid;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			rr=mid;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ll;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;l,&amp;n,&amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i]);</div><div class="line">        d[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">		d[n+<span class="number">1</span>]=l;</div><div class="line">		n+=<span class="number">2</span>;</div><div class="line">		sort(d,d+n);</div><div class="line">		<span class="keyword">int</span> ans=fun();</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://poj.org/problem?id=3258&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=3258&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="其他-二分" scheme="http://www.liuin.cn/tags/%E5%85%B6%E4%BB%96-%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #412 Div 2 题解</title>
    <link href="http://www.liuin.cn/2017/05/08/Codeforces-Round-412-Div-2-%E9%A2%98%E8%A7%A3/"/>
    <id>http://www.liuin.cn/2017/05/08/Codeforces-Round-412-Div-2-题解/</id>
    <published>2017-05-08T13:16:06.000Z</published>
    <updated>2017-05-08T14:16:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="http://codeforces.com/contest/807" target="_blank" rel="external">http://codeforces.com/contest/807</a></p>
<a id="more"></a>
<h2 id="A-Is-it-rated"><a href="#A-Is-it-rated" class="headerlink" title="A Is it rated?"></a>A Is it rated?</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定多个比赛参与者比赛前后的积分，判断这场比赛有没有rated，对rated的定义：至少一个选手的积分发生变化，unrated定义：积分没有变化但是排名发生变化;maybe定义：分数没有变化，排名没变（非递增）</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先判断积分是否发生变化，然后判断是否非递减</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a[maxn],b[maxn];</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(a[i]!=b[i])</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"rated"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">				flag=<span class="number">0</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!flag)</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;a[i]&gt;a[i<span class="number">-1</span>])</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"unrated"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">				flag=<span class="number">0</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"maybe"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="B-T-Shirt-Hunt"><a href="#B-T-Shirt-Hunt" class="headerlink" title="B T-Shirt Hunt"></a>B T-Shirt Hunt</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给出一个选手这场比赛的排名和当前成绩和这场比赛可能的最差成绩，同时给出一个程序：<br>i := (s div 50) mod 475<br>repeat 25 times:<br>    i := (i * 96 + 42) mod 475<br>        print (26 + i)<br>程序输入一个积分，有25个输出每个输入表示可能的排名，问经过hacks以后达到能够输出当前排名的积分所需要进行成功的hacks次数是多少？</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>读懂题目这道题非常水，只要以50为单位不断在原来的基础进行加减直到达到符合要求的值，最后输出需要成功的hacks次数就行了</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> p)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i=(s/<span class="number">50</span>)%<span class="number">475</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">25</span>;j++)</div><div class="line">	&#123;</div><div class="line">		i=(i*<span class="number">96</span>+<span class="number">42</span>)%<span class="number">475</span>;</div><div class="line">		<span class="keyword">if</span>(<span class="number">26</span>+i==p)</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> p,x,y;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;x&gt;&gt;y)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(fun(x,p))</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> tmp=x<span class="number">-50</span>;</div><div class="line">		<span class="keyword">while</span>(tmp&gt;=y)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(fun(tmp,p))</div><div class="line">			&#123;</div><div class="line">				<span class="comment">//cout&lt;&lt;tmp&lt;&lt;endl;</span></div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                flag=<span class="number">0</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			tmp-=<span class="number">50</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!flag)</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		tmp=x+<span class="number">50</span>;</div><div class="line">		<span class="keyword">while</span>(tmp)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(fun(tmp,p))</div><div class="line">			&#123;</div><div class="line">				<span class="comment">//cout&lt;&lt;tmp&lt;&lt;endl;</span></div><div class="line">                <span class="keyword">int</span> ans=(tmp-x)/<span class="number">100</span>;</div><div class="line">				<span class="keyword">if</span>((tmp-x)%<span class="number">100</span>!=<span class="number">0</span>) ans++;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			tmp+=<span class="number">50</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C-Success-Rate"><a href="#C-Success-Rate" class="headerlink" title="C Success Rate"></a>C Success Rate</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出两个分数：x/y p/q，定义两种操作：分子分母同时加上1；分母加上1。问要将前面的分数变成后面的分数要进行的操作数</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>前面的分数操作到后面的分数y是一定会变成q的倍数的，这样就相当于选择最小的倍数，写一个判断当前倍数是否符合条件的函数，然后再用二分法跑一边就行了，注意特判！</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judg</span><span class="params">(ll x,ll y,ll p,ll q,ll rate)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(rate*p&gt;=x &amp;&amp; rate*q-y&gt;=rate*p-x)</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(ll x,ll y,ll p,ll q,ll l,ll r)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> r;</div><div class="line">	<span class="keyword">if</span>(r==l+<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(judg(x,y,p,q,l)) <span class="keyword">return</span> l;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(judg(x,y,p,q,r)) <span class="keyword">return</span> r;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></div><div class="line">	ll rate=y/q;</div><div class="line">	ll m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(judg(x,y,p,q,m)) <span class="keyword">return</span> fun(x,y,p,q,l,m);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> fun(x,y,p,q,m,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t)</div><div class="line">	&#123;</div><div class="line">		ll x,y,p,q;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> id=<span class="number">0</span>;id&lt;t;id++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;p&gt;&gt;q;</div><div class="line">			<span class="keyword">if</span>(x*q==p*y)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(p==q || (p==<span class="number">0</span> &amp;&amp; x!=<span class="number">0</span>)) </div><div class="line">			&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			ll rate=fun(x,y,p,q,y/q,<span class="number">1e18</span>/q);</div><div class="line">			<span class="keyword">if</span>(rate==<span class="number">-1</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;rate*q-y&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛链接：&lt;a href=&quot;http://codeforces.com/contest/807&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://codeforces.com/contest/807&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Codeforces" scheme="http://www.liuin.cn/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1284 Primitive Roots 欧拉函数</title>
    <link href="http://www.liuin.cn/2017/05/06/POJ-1284-Primitive-Roots-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>http://www.liuin.cn/2017/05/06/POJ-1284-Primitive-Roots-欧拉函数/</id>
    <published>2017-05-06T09:46:01.000Z</published>
    <updated>2017-05-06T09:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=1284" target="_blank" rel="external">http://poj.org/problem?id=1284</a><br><a id="more"></a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义一个数原根x：{x^i(mod p) =1,2,…,p-1}，先给出素数p，要求p得原根个数</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这里用到了一个定理：<br>如果p有原根，则p的原根个数为Euler[Euler[p]]</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;ll,ll&gt; prime_factor(ll t)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">map</span>&lt;ll,ll&gt; ret;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=t;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(t%i==<span class="number">0</span>) &#123; ++ret[i];t/=i; &#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(t!=<span class="number">1</span>) ret[t]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">Euler</span> <span class="params">(ll t)</span></span></div><div class="line">&#123;</div><div class="line">	ll ret=t;</div><div class="line">	<span class="built_in">map</span>&lt;ll,ll&gt; fac=prime_factor(t);</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">map</span>&lt;ll,ll&gt;::iterator i=fac.begin();i!=fac.end();i++)</div><div class="line">		ret=ret*(i-&gt;first<span class="number">-1</span>)/i-&gt;first;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	ll n;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF &amp;&amp; n)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Euler(Euler(n)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://poj.org/problem?id=1284&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=1284&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学专题" scheme="http://www.liuin.cn/tags/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2407 Relatives 欧拉函数</title>
    <link href="http://www.liuin.cn/2017/05/06/POJ-2407-Relatives-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>http://www.liuin.cn/2017/05/06/POJ-2407-Relatives-欧拉函数/</id>
    <published>2017-05-06T09:39:31.000Z</published>
    <updated>2017-05-06T09:44:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=2407" target="_blank" rel="external">http://poj.org/problem?id=2407</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个数n，求出有多少个数小于n并且与n互质，n的范围为1e9</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>裸的欧拉函数，具体的内容：<br>小于n且与n互质的数的个数=n*(1-1/P1)*(1-1/P2)….*(1-1/Pn)，其中Pn为不同的质因数<br>注意特判1的时候ans=0，不过本题没有卡这个东西</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;ll,ll&gt; prime_factor(ll t)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">map</span>&lt;ll,ll&gt; ret;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=t;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(t%i==<span class="number">0</span>) &#123; ++ret[i];t/=i; &#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(t!=<span class="number">1</span>) ret[t]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">Euler</span> <span class="params">(ll t)</span></span></div><div class="line">&#123;</div><div class="line">	ll ret=t;</div><div class="line">	<span class="built_in">map</span>&lt;ll,ll&gt; fac=prime_factor(t);</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">map</span>&lt;ll,ll&gt;::iterator i=fac.begin();i!=fac.end();i++)</div><div class="line">		ret=ret*(i-&gt;first<span class="number">-1</span>)/i-&gt;first;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	ll n;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF &amp;&amp; n)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Euler(n));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://poj.org/problem?id=2407&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=2407&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学专题" scheme="http://www.liuin.cn/tags/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #411 (Div. 2) 题解</title>
    <link href="http://www.liuin.cn/2017/05/05/Codeforces-Round-411-Div-2-%E9%A2%98%E8%A7%A3/"/>
    <id>http://www.liuin.cn/2017/05/05/Codeforces-Round-411-Div-2-题解/</id>
    <published>2017-05-04T16:56:40.000Z</published>
    <updated>2017-05-13T07:56:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="http://codeforces.com/contest/805" target="_blank" rel="external">http://codeforces.com/contest/805</a></p>
<a id="more"></a>
<h2 id="A-Fake-NP"><a href="#A-Fake-NP" class="headerlink" title="A Fake NP"></a>A Fake NP</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一个范围[l,r]，对于所有的从l到r的数的因子数中出现最多的因子数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以发现除了范围内只有一个数，其他情况2都是出现次数最多的因子数</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> l,r;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(l==r)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"2"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="B-3-palindrome"><a href="#B-3-palindrome" class="headerlink" title="B 3-palindrome"></a>B 3-palindrome</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>要求你创建一个仅含有a、b、c三个字符的长度为n的序列，要求序列中不含有长度为3的回文串,，并且要求含有c字符的数目尽可能少。</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>“aabb”这样的字符创不断循环就不会含有长度为3的回文串</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">olve()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> st=<span class="string">"aabb"</span>;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> d=n/<span class="number">4</span>;</div><div class="line">		n%=<span class="number">4</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;st;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;st[i];</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C-Find-Amir"><a href="#C-Find-Amir" class="headerlink" title="C Find Amir"></a>C Find Amir</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出编号为1到n的n个点，规定两点(i,j)之间的权值为(i+j)mod(n+1)，求将所有点连接起来的最小代价</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><ul>
<li>最小生成树问题，用贪心思想，发现将第1小的点和第1大的点配对，第2小的点和第2大的点配对，。。。（以此类推可以配对n/2条边）,这样的每次配对的代价都是0</li>
<li>这样两两结对以后（奇数情况下会多出一个点），再将第i大点和第i+1小的点配对，这种配对的每次代价为1。这样就可以生成一棵最小生成树，总体的代价就是后面的配对产生的代价：偶数时候为(n/2-1)，奇数的时候是n/2</li>
</ul>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;n/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">cout</span>&lt;&lt;n/<span class="number">2</span><span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="D-Minimum-number-of-steps"><a href="#D-Minimum-number-of-steps" class="headerlink" title="D Minimum number of steps"></a>D Minimum number of steps</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给出一个只含有字符a、b的字符串，规定一次操作为将原字符串的一个’ab’子串转换成’bba’，求转换成最终无法转换的状态要进行的操作次数（对10^9+7取模）</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><ul>
<li>操作完的最终状态应该是所有的字符a都换到了字符串的最后，同时每次操作我们可以看成a向后移动一位的过程，这样的话我们可以计算每个字符a到字符串最后全是a的部分的距离来对于这个a要进行的操作次数。</li>
<li>但是每次a向后移动一位对前面的a是有影响的————每向后移动一位对于前面的a相当于增加了一个b，也就是增加了前面的a到字符串最后的距离。这样我们可以从后往前进行考虑来统一这种影响。</li>
<li>从后往前扫描，用tmp记录中间b的个数，遇到a时累加到ans中同时对tmp加倍（相当于已经将当前的a转移到了最后，这样对于前面的a来说就是增加了tmp个b）。最后的答案就是所有操作的代价ans</li>
</ul>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> a;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)</div><div class="line">	&#123;</div><div class="line">		ll tmp=<span class="number">0</span>,ans=<span class="number">0</span>,num=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(a[i]==<span class="string">'a'</span>)</div><div class="line">			&#123;</div><div class="line">				ans=(ans+tmp)%MOD;</div><div class="line">				tmp=(<span class="number">2</span>*tmp)%MOD;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				tmp++;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>看清题意再敲代码，B题就是因为误以为是长度&gt;=3的回文子串而导致错了两发</li>
<li>提高debug水平，D题思路一直对但是因为else分支里面的一个错误导致迟迟没有AC</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛链接：&lt;a href=&quot;http://codeforces.com/contest/805&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://codeforces.com/contest/805&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Codeforces" scheme="http://www.liuin.cn/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5686 斐波那契数+大数</title>
    <link href="http://www.liuin.cn/2017/05/04/HDU-5686-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0-%E5%A4%A7%E6%95%B0/"/>
    <id>http://www.liuin.cn/2017/05/04/HDU-5686-斐波那契数-大数/</id>
    <published>2017-05-04T03:16:20.000Z</published>
    <updated>2017-05-04T03:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5686" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5686</a></p>
<a id="more"></a>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一个全部是1组成的序列，可以合并相邻的两个1，变成一个新的序列。问总共可以构成多少种不同的序列。序列长度范围为200</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题其实列出前几个数的答案可以观察得到是一个斐波那契数，当然也可以按照下面这种方式进行理解：<br>一个序列的组合方式可以分成两种情况：第一种情况是最后一个数不考虑那么相当于前面的n-1个数的排列种树；第二种情况将最后两个数合并这样就相当于前面n-2个数的排列情况<br>斐波那契数到达200个数，要使用大数模板，套上用就行了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> BigInt</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> nlen=<span class="number">4</span>;  <span class="comment">//控制数组中的每一个数字的长度，为了乘法运算不溢出设定为4</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> mod=<span class="number">10000</span>;    <span class="comment">//每个数字大小设定</span></div><div class="line">    <span class="keyword">short</span> n[<span class="number">1000</span>],len;  <span class="comment">//存放数字的数组以及数组的长度</span></div><div class="line">    BigInt()<span class="comment">//没有赋值时初始化为0</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(n,<span class="number">0</span>,<span class="keyword">sizeof</span>(n));</div><div class="line">        len=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    BigInt(<span class="keyword">int</span> num)<span class="comment">//数字为其赋值时，将数字4位4位存放在数组当中</span></div><div class="line">    &#123;</div><div class="line">        len=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(num&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n[len++]=num%mod;</div><div class="line">            num/=mod;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    BigInt(<span class="keyword">const</span> <span class="keyword">char</span> *s)  <span class="comment">//字符串赋值时</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s);</div><div class="line">        len=l%nlen==<span class="number">0</span>?l/nlen:l/nlen+<span class="number">1</span>;<span class="comment">//确定数组长度</span></div><div class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-=nlen)<span class="comment">//每次处理数组中的一位</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> j=i-nlen+<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>) j=<span class="number">0</span>;<span class="comment">//最后面数字的处理</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=i;k++)</div><div class="line">                tmp=tmp*<span class="number">10</span>+s[k]-<span class="string">'0'</span>;</div><div class="line">            n[index++]=tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    BigInt <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInt &amp;b)<span class="keyword">const</span> <span class="comment">//加法操作</span></div><div class="line">    &#123;</div><div class="line">        BigInt res;</div><div class="line">        res.len=max(len,b.len);  <span class="comment">//确定位数</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.len;i++)</div><div class="line">        &#123;</div><div class="line">            res.n[i]+=(i&lt;len?n[i]:<span class="number">0</span>)+(i&lt;b.len?b.n[i]:<span class="number">0</span>); <span class="comment">//对象位置相加</span></div><div class="line">            res.n[i+<span class="number">1</span>]+=res.n[i]/mod; <span class="comment">//进位处理</span></div><div class="line">            res.n[i]=res.n[i]%mod;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(res.n[res.len]&gt;<span class="number">0</span>)res.len++;  <span class="comment">//最后的结果多出一位时</span></div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    BigInt <span class="keyword">operator</span>*(<span class="keyword">const</span> BigInt &amp;b)<span class="keyword">const</span>  <span class="comment">//乘法操作</span></div><div class="line">    &#123;</div><div class="line">        BigInt res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)  <span class="comment">//模拟过程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> up=<span class="number">0</span>;  <span class="comment">//进位存储</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.len;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> tmp=n[i]*b.n[i]+up+res.n[i+j];</div><div class="line">                res.n[i+j]=tmp%mod;</div><div class="line">                up=tmp/mod;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(up!=<span class="number">0</span>)  <span class="comment">//处理一遍以后还有进位</span></div><div class="line">                res.n[i+b.len]=up;</div><div class="line">        &#125;</div><div class="line">        res.len=len+b.len;  <span class="comment">//先取到位数可能最大的值</span></div><div class="line">        <span class="keyword">while</span>(res.n[res.len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;res.len&gt;<span class="number">1</span>)res.len--;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span>  <span class="comment">//输出时的逆序输出</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,n[len<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%04d"</span>,n[i]);   <span class="comment">//注意一定要加04,确保输出四位</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    BigInt a[<span class="number">210</span>];</div><div class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    a[<span class="number">2</span>]=<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;<span class="number">201</span>;i++)</div><div class="line">        a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">        a[n].show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5686&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5686&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学专题" scheme="http://www.liuin.cn/tags/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2429 GCD &amp; LCM Inverse 大素数分解</title>
    <link href="http://www.liuin.cn/2017/05/01/POJ-2429-GCD-LCM-Inverse-%E5%A4%A7%E7%B4%A0%E6%95%B0%E5%88%86%E8%A7%A3/"/>
    <id>http://www.liuin.cn/2017/05/01/POJ-2429-GCD-LCM-Inverse-大素数分解/</id>
    <published>2017-05-01T07:24:05.000Z</published>
    <updated>2017-05-01T07:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=2429" target="_blank" rel="external">http://poj.org/problem?id=2429</a></p>
<a id="more"></a>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出两个数的最大公因数和最小公倍数（数据范围2^64），求这两个数（存在多组数时输出和最小的一组数）</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们很容易得到以下方程： (a/gcd)*(b/gcd)=(lcm/gcd)。因为(a/gcd)和(b/gcd)一定是互质的（如果不互质，gcd就要改变），这样我们就可以看成是将(lcm/gcd)分解成互质的两个数。<br>使用Pollard-Rho算法算出大整数的素因子表，为了保证分解成的两个数是互质的，将素质因子表中相同的数进行相乘，可以证明这样得到的数组内的元素之间还是互质的。<br>最后只需要对表中的元素分成两组就行了，用一个简单的DFS就可以搞定。</p>
<h3 id="代码-处于Runtime-error"><a href="#代码-处于Runtime-error" class="headerlink" title="代码(处于Runtime error )"></a>代码(处于Runtime error )</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="comment">//Miller_Rabin 算法进行素数测试</span></div><div class="line"><span class="comment">//速度快，而且可以判断 &lt;2^63的数</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">20</span>; <span class="comment">//随机算法判定次数</span></div><div class="line"></div><div class="line"><span class="comment">//计算 (a*b)%c  加法快速幂</span></div><div class="line"><span class="function">ll <span class="title">mul_mod</span><span class="params">(ll a,ll b,ll c)</span></span></div><div class="line">&#123;</div><div class="line">	a%=c;</div><div class="line">	b%=c;</div><div class="line">	ll ret=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(b)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)</div><div class="line">			ret+=a,ret%=c;</div><div class="line">		a&lt;&lt;=<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(a&gt;=c)a%=c;</div><div class="line">		b&gt;&gt;=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 计算x^n %c</span></div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll x,ll n,ll mod)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> x%mod;</div><div class="line">	x%=mod;</div><div class="line">	ll tmp=x;</div><div class="line">	ll ret=<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(n)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) ret=mul_mod(ret,tmp,mod);</div><div class="line">		tmp=mul_mod(tmp,tmp,mod);</div><div class="line">		n&gt;&gt;=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//以a为基,n-1=x*2^t      a^(n-1)=1(mod n)  验证n是不是合数</span></div><div class="line"><span class="comment">//一定是合数返回true,不一定返回false</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a,ll n,ll x,ll t)</span></span></div><div class="line">&#123;</div><div class="line">	ll ret=pow_mod(a,x,n);</div><div class="line">	ll last=ret;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">	&#123;</div><div class="line">		ret=mul_mod(ret,ret,n);</div><div class="line">		<span class="keyword">if</span>(ret==<span class="number">1</span> &amp;&amp; last!=<span class="number">1</span> &amp;&amp; last!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		last=ret;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(ret!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Miller_Rabin()算法素数判定</span></div><div class="line"><span class="comment">//是素数返回true.(可能是伪素数，但概率极小)</span></div><div class="line"><span class="comment">//合数返回false;</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(ll n)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//偶数</span></div><div class="line">	ll x=n<span class="number">-1</span>,t=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!(x&amp;<span class="number">1</span>)) </div><div class="line">	&#123;</div><div class="line">		x&gt;&gt;=<span class="number">1</span>;</div><div class="line">		t++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S;i++)</div><div class="line">	&#123;</div><div class="line">		ll a=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(check(a,n,x,t))</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// pollard_rho 算法进行质因数分解</span></div><div class="line">ll factor[<span class="number">10000</span>];   <span class="comment">//分解结果</span></div><div class="line"><span class="keyword">int</span> tol;    <span class="comment">//分解个数</span></div><div class="line"></div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(a&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-a,b);</div><div class="line">	<span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">Pollard_rho</span><span class="params">(ll x,ll c)</span></span></div><div class="line">&#123;</div><div class="line">	ll i=<span class="number">1</span>,k=<span class="number">2</span>;</div><div class="line">	ll x0=rand()%x;</div><div class="line">	ll y=x0;</div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		i++;</div><div class="line">        x0=(mul_mod(x0,x0,x)+c)%x;</div><div class="line">        ll d=gcd(y-x0,x);</div><div class="line">        <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=x) <span class="keyword">return</span> d;</div><div class="line">        <span class="keyword">if</span>(y==x0) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">if</span>(i==k)&#123;y=x0;k+=k;&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//对n进行素因子分解</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findfac</span><span class="params">(ll n)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(Miller_Rabin(n))</div><div class="line">	&#123;</div><div class="line">		factor[tol++]=n;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	ll p=n;</div><div class="line">    <span class="keyword">while</span>(p&gt;=n)p=Pollard_rho(p,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</div><div class="line">    findfac(p);</div><div class="line">    findfac(n/p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DFS 求数</span></div><div class="line">ll min_sum;   <span class="comment">//和的最小值设置为全局变量</span></div><div class="line">ll ansa,ansb;</div><div class="line">ll factor_new[<span class="number">10000</span>],num1;  <span class="comment">//将重复素因子相乘以后的表</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll tmpa,ll tmpb,ll pos,<span class="keyword">const</span> ll len)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(pos==len)</div><div class="line">	&#123;</div><div class="line">        <span class="keyword">if</span>(tmpa+tmpb&lt;=min_sum)</div><div class="line">		    ansa=tmpa,ansb=tmpb;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		dfs(tmpa*factor_new[pos],tmpb,pos+<span class="number">1</span>,len);</div><div class="line">		dfs(tmpa,tmpb*factor_new[pos],pos+<span class="number">1</span>,len);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	ll a,b;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;a,&amp;b)!=EOF)</div><div class="line">	&#123;</div><div class="line">		num1=<span class="number">0</span>;</div><div class="line">		b/=a;</div><div class="line">		findfac(b);</div><div class="line">		sort(factor,factor+tol);    </div><div class="line">		factor_new[<span class="number">0</span>]=factor[<span class="number">0</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tol;i++)                    <span class="comment">//除去重复素因子</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(factor[i]==factor[i<span class="number">-1</span>])</div><div class="line">				factor_new[num1]*=factor[i];</div><div class="line">			<span class="keyword">else</span></div><div class="line">				factor_new[++num1]=factor[i];</div><div class="line">		&#125;</div><div class="line">		min_sum=factor_new[<span class="number">0</span>]+b/factor_new[<span class="number">0</span>];</div><div class="line">		dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,num1+<span class="number">1</span>);    <span class="comment">//dfs 枚举结果</span></div><div class="line">		<span class="keyword">if</span>(ansa&gt;ansb) swap(ansa,ansb);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ansa*a,ansb*a);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">    <span class="comment">//test();</span></div><div class="line">    solve();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://poj.org/problem?id=2429&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=2429&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.liuin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学专题" scheme="http://www.liuin.cn/tags/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
</feed>
